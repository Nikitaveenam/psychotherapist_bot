import os
import logging
import asyncio
import random
import httpx
import hashlib
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta, timezone
from decimal import Decimal, getcontext
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, F, html
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, 
    InlineKeyboardMarkup, BotCommand, ErrorEvent
)
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.markdown import hide_link

from sqlalchemy import text, MetaData, Table, Column, Integer, String, Boolean, DateTime, BigInteger, Float
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import declarative_base

# --- Configuration ---
load_dotenv()

# Decimal precision
getcontext().prec = 8

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ],
)
logger = logging.getLogger(__name__)

# --- States ---
class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_gender = State()
    waiting_for_diary_entry = State()
    waiting_for_diary_password = State()
    waiting_for_wheel = State()
    waiting_for_detox = State()
    waiting_for_archetype = State()
    waiting_for_gratitude = State()
    waiting_for_promo = State()
    waiting_for_task_completion = State()
    waiting_for_sleep_data = State()

class HabitCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_time = State()

class AdminStates(StatesGroup):
    creating_challenge = State()
    setting_rewards = State()
    waiting_for_premium_username = State()
    waiting_for_ban_user = State()     
    waiting_for_unban_user = State()
    waiting_for_hearts_data = State()
    waiting_for_ban_username = State()
    waiting_for_user_history = State()
    creating_task = State()
    creating_promo = State()

class Config:
    TRIAL_DAYS = 3
    TRIAL_DAILY_LIMIT = 25
    TRIAL_TOKEN_LIMIT = 500
    PREMIUM_DAILY_LIMIT = 20
    PREMIUM_TOKEN_LIMIT = 800
    FREE_WEEKLY_LIMIT = 5
    HEARTS_PER_DAY = 3
    CHALLENGE_REWARD = 5
    CHALLENGE_DURATION = 120
    REFERRAL_REWARD_HEARTS = 10
    REFERRAL_REWARD_DAYS = 2
    MAX_REFERRALS_PER_MONTH = 5
    DIARY_REWARD = 5
    TASK_REWARD_RANGE = (5, 15)

# --- Constants ---
PSYCHOLOGY_FEATURES = [
    {
        "id": "wheel_of_life",
        "title": "‚öñÔ∏è –ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞",
        "description": "–ê–Ω–∞–ª–∏–∑ 8 –∫–ª—é—á–µ–≤—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏. –ù–∞–≥—Ä–∞–¥–∞: 30üíñ",
        "reward": 30,
        "duration": "5-10 –º–∏–Ω—É—Ç"
    },
    {
        "id": "detox_anxiety",
        "title": "üåÄ –î–µ—Ç–æ–∫—Å —Ç—Ä–µ–≤–æ–≥–∏",
        "description": "3-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –ö–ü–¢. –ù–∞–≥—Ä–∞–¥–∞: 50üíñ",
        "reward": 50,
        "duration": "15-20 –º–∏–Ω—É—Ç"
    },
    {
        "id": "archetype_test",
        "title": "ü¶∏ –¢–µ—Å—Ç –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤",
        "description": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞—Ä—Ö–µ—Ç–∏–ø. –ù–∞–≥—Ä–∞–¥–∞: 20üíñ",
        "reward": 20,
        "duration": "5 –º–∏–Ω—É—Ç"
    },
    {
        "id": "gratitude_journal",
        "title": "üôè –î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
        "description": "–§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤—ã—á–∫—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏. –ù–∞–≥—Ä–∞–¥–∞: 10üíñ/–¥–µ–Ω—å",
        "reward": 10,
        "duration": "3-5 –º–∏–Ω—É—Ç"
    },
    {
        "id": "sleep_analyzer",
        "title": "üåô –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞",
        "description": "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ù–∞–≥—Ä–∞–¥–∞: 25üíñ",
        "reward": 25,
        "duration": "5-7 –º–∏–Ω—É—Ç"
    },
    {
        "id": "stress_test",
        "title": "üß™ –¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞",
        "description": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞. –ù–∞–≥—Ä–∞–¥–∞: 15üíñ",
        "reward": 15,
        "duration": "3-5 –º–∏–Ω—É—Ç"
    },
    {
        "id": "emotional_diary",
        "title": "üé≠ –î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π",
        "description": "–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞–≥—Ä–∞–¥–∞: 20üíñ",
        "reward": 20,
        "duration": "7-10 –º–∏–Ω—É—Ç"
    },
    {
        "id": "relationship_advice",
        "title": "üíû –°–æ–≤–µ—Ç—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º",
        "description": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ù–∞–≥—Ä–∞–¥–∞: 25üíñ",
        "reward": 25,
        "duration": "10-15 –º–∏–Ω—É—Ç"
    }
]

DAILY_TASKS = [
    {
        "id": "meditation",
        "title": "üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è 5 –º–∏–Ω—É—Ç",
        "description": "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç",
        "reward": 10
    },
    {
        "id": "gratitude_list",
        "title": "üôè –°–ø–∏—Å–æ–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
        "description": "–ó–∞–ø–∏—à–∏—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è",
        "reward": 8
    },
    {
        "id": "water_reminder",
        "title": "üíß –í—ã–ø–∏—Ç—å –≤–æ–¥—ã",
        "description": "–í—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∏ –∑–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ",
        "reward": 5
    },
    {
        "id": "positive_affirmation",
        "title": "üí´ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
        "description": "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 3 –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ —Å–µ–±–µ",
        "reward": 7
    },
    {
        "id": "small_step",
        "title": "üë£ –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥",
        "description": "–°–¥–µ–ª–∞–π—Ç–µ –æ–¥–∏–Ω –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ –≤–∞—à–µ–π —Ü–µ–ª–∏",
        "reward": 12
    },
    {
        "id": "digital_detox",
        "title": "üìµ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å",
        "description": "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 30 –º–∏–Ω—É—Ç –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤",
        "reward": 15
    },
    {
        "id": "nature_time",
        "title": "üå≥ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
        "description": "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
        "reward": 10
    },
    {
        "id": "kindness_act",
        "title": "ü§ù –ê–∫—Ç –¥–æ–±—Ä–æ—Ç—ã",
        "description": "–°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–¥–∏–Ω –¥–æ–±—Ä—ã–π –ø–æ—Å—Ç—É–ø–æ–∫ —Å–µ–≥–æ–¥–Ω—è",
        "reward": 12
    },
    {
        "id": "evening_reflection",
        "title": "üåô –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è",
        "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å",
        "reward": 10
    },
    {
        "id": "morning_routine",
        "title": "üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª",
        "reward": 8
    }
]

PREMIUM_SHOP_ITEMS = [
    {
        "id": "premium_1_day",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 1 –¥–µ–Ω—å",
        "description": "100üíñ | –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
        "price": 100,
        "type": "hearts"
    },
    {
        "id": "premium_7_days",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 7 –¥–Ω–µ–π",
        "description": "600üíñ | –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º",
        "price": 600,
        "type": "hearts"
    },
    {
        "id": "premium_1_month",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 1 –º–µ—Å—è—Ü",
        "description": "2000üíñ | –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥",
        "price": 2000,
        "type": "hearts"
    }
]

HEARTS_SHOP_ITEMS = [
    {
        "id": "custom_analysis",
        "title": "üîç –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        "description": "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏ –ø—Ä–∏–≤—ã—á–µ–∫",
        "price": 150,
        "type": "hearts"
    },
    {
        "id": "dream_interpretation",
        "title": "üåå –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤",
        "description": "–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Å–Ω–æ–≤ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è",
        "price": 120,
        "type": "hearts"
    },
    {
        "id": "relationship_guide",
        "title": "üíë –ì–∏–¥ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º",
        "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º",
        "price": 180,
        "type": "hearts"
    },
    {
        "id": "career_consult",
        "title": "üíº –ö–∞—Ä—å–µ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
        "description": "–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
        "price": 200,
        "type": "hearts"
    },
    {
        "id": "motivation_boost",
        "title": "üöÄ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –±—É—Å—Ç",
        "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–Ω",
        "price": 100,
        "type": "hearts"
    },
    {
        "id": "sleep_improvement",
        "title": "üò¥ –£–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞",
        "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–Ω—É",
        "price": 150,
        "type": "hearts"
    }
]

PAID_SHOP_ITEMS = [
    {
        "id": "emergency_help",
        "title": "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å",
        "description": "–ì–∏–¥ –ø–æ –≤—ã—Ö–æ–¥—É –∏–∑ –∫—Ä–∏–∑–∏—Å–∞",
        "price": 99,
        "currency": "RUB",
        "details": "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö"
    },
    {
        "id": "personal_guide",
        "title": "üß≠ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥",
        "description": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü",
        "price": 149,
        "currency": "RUB",
        "details": "30-–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è"
    },
    {
        "id": "mood_analysis",
        "title": "üìä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π",
        "description": "–ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ 30 –¥–Ω–µ–π",
        "price": 129,
        "currency": "RUB",
        "details": "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞—à–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    },
    {
        "id": "horoscope",
        "title": "‚ôå –ì–æ—Ä–æ—Å–∫–æ–ø",
        "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü",
        "price": 99,
        "currency": "RUB",
        "details": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑"
    },
    {
        "id": "anxiety_detox",
        "title": "üß† –î–µ—Ç–æ–∫—Å —Ç—Ä–µ–≤–æ–≥–∏",
        "description": "3-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –ø–æ –ö–ü–¢",
        "price": 149,
        "currency": "RUB",
        "details": "–ü–æ—à–∞–≥–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"
    },
    {
        "id": "deep_analysis",
        "title": "üîÆ –ì–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        "description": "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π",
        "price": 149,
        "currency": "RUB",
        "details": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    }
]

PREMIUM_PAID_ITEMS = [
    {
        "id": "premium_1_month",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 1 –º–µ—Å—è—Ü",
        "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º",
        "price": 299,
        "currency": "RUB",
        "days": 30
    },
    {
        "id": "premium_3_months",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
        "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥",
        "price": 799,
        "currency": "RUB",
        "days": 90
    },
    {
        "id": "premium_6_months",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤",
        "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "price": 1499,
        "currency": "RUB",
        "days": 180
    },
    {
        "id": "premium_1_year",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 1 –≥–æ–¥",
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø + –±–æ–Ω—É—Å—ã",
        "price": 2599,
        "currency": "RUB",
        "days": 365
    }
]

# Check environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_URL = os.getenv("DB_URL")
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "").split(",") if id.strip()]
CRYPTO_API_KEY = os.getenv("CRYPTO_API_KEY")

if not all([BOT_TOKEN, DB_URL]):
    logger.critical("Missing required environment variables!")
    exit(1)

# --- Bot initialization ---
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# Database connection
engine = create_async_engine(DB_URL, echo=False)
async_session = async_sessionmaker(engine, expire_on_commit=False)
metadata = MetaData()
Base = declarative_base(metadata=metadata)

# Define users table with all required columns
users = Table(
    "users",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("telegram_id", BigInteger, unique=True, nullable=False),
    Column("full_name", String(100)),
    Column("username", String(100)),
    Column("gender", String(10)),
    Column("is_premium", Boolean, default=False),
    Column("hearts", Integer, default=Config.HEARTS_PER_DAY),
    Column("is_admin", Boolean, default=False),
    Column("trial_started_at", DateTime),
    Column("subscription_expires_at", DateTime),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("last_activity_at", DateTime, default=datetime.utcnow),
    Column("is_banned", Boolean, default=False),
    Column("name", String(100), nullable=True),
    Column("diary_password", String(100), nullable=True),
    Column("daily_requests", Integer, default=0),
    Column("total_requests", Integer, default=0),
    Column("last_diary_reward", DateTime),
    Column("referral_code", String(20), unique=True),
    Column("referrer_id", BigInteger),
    Column("referrals_count", Integer, default=0),
    Column("last_referral_date", DateTime),
    Column("ip_address", String(45))
)

# –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
payments = Table(
    "payments",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("amount", Float),
    Column("currency", String(10)),
    Column("item_id", String(50)),
    Column("status", String(20), default="pending"),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞
diary_entries = Table(
    "diary_entries",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("entry_text", String(2000)),
    Column("mood", String(20)),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—ã—á–µ–∫
habits = Table(
    "habits",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("title", String(100)),
    Column("description", String(500)),
    Column("reminder_time", String(10), nullable=True),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
habit_completions = Table(
    "habit_completions",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("habit_id", Integer),
    Column("completed_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ –∫–æ–ª–µ—Å–∞ –±–∞–ª–∞–Ω—Å–∞
wheel_balance = Table(
    "wheel_balance",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("health", Integer),
    Column("relationships", Integer),
    Column("career", Integer),
    Column("finance", Integer),
    Column("spirit", Integer),
    Column("hobbies", Integer),
    Column("environment", Integer),
    Column("growth", Integer),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# Add new tables for the additional functionality
user_tasks = Table(
    "user_tasks",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("task_id", String(50)),
    Column("completed_at", DateTime, default=datetime.utcnow),
    Column("reward_received", Boolean, default=False)
)

admin_tasks = Table(
    "admin_tasks",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("title", String(100)),
    Column("description", String(500)),
    Column("reward", Integer),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("expires_at", DateTime)
)

promo_codes = Table(
    "promo_codes",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("code", String(20), unique=True),
    Column("discount_percent", Integer),
    Column("valid_until", DateTime),
    Column("uses_remaining", Integer),
    Column("created_at", DateTime, default=datetime.utcnow)
)

# --- Helper functions ---
def get_archetype_description(archetype: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞"""
    descriptions = {
        '–ì–µ—Ä–æ–π': "–í—ã —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–º–µ–ª—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏.",
        '–û–ø–µ–∫—É–Ω': "–í—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ –¥—Ä—É–≥–∏—Ö –∏ –∑–∞—â–∏—â–∞–µ—Ç–µ —Å–ª–∞–±—ã—Ö.",
        '–ú—É–¥—Ä–µ—Ü': "–í—ã –∏—â–µ—Ç–µ –∏—Å—Ç–∏–Ω—É –∏ –¥–µ–ª–∏—Ç–µ—Å—å –∑–Ω–∞–Ω–∏—è–º–∏ —Å –º–∏—Ä–æ–º.",
        '–ò—Å–∫–∞—Ç–µ–ª—å': "–í—ã –∂–∞–∂–¥–µ—Ç–µ —Å–≤–æ–±–æ–¥—ã –∏ –Ω–æ–≤—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π."
    }
    return descriptions.get(archetype, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ö–µ—Ç–∏–ø")

async def get_user(telegram_id: int) -> Optional[Dict[str, Any]]:
    """Get user from database"""
    try:
        async with async_session() as session:
            result = await session.execute(
                text("SELECT * FROM users WHERE telegram_id = :telegram_id"),
                {"telegram_id": telegram_id}
            )
            user = result.mappings().first()
            return dict(user) if user else None
    except Exception as e:
        logger.error(f"Error getting user: {e}")
        return None

async def update_user(telegram_id: int, **kwargs) -> bool:
    """Update user data"""
    try:
        async with async_session() as session:
            stmt = users.update().where(users.c.telegram_id == telegram_id).values(**kwargs)
            await session.execute(stmt)
            await session.commit()
            return True
    except Exception as e:
        logger.error(f"Error updating user: {e}")
        return False

async def create_user(telegram_id: int, full_name: str, username: str = None, is_admin: bool = False, referrer_id: int = None) -> Dict[str, Any]:
    """Create new user"""
    try:
        async with async_session() as session:
            # Generate referral code
            referral_code = hashlib.sha256(f"{telegram_id}{datetime.utcnow().timestamp()}".encode()).hexdigest()[:8]
            
            user_data = {
                "telegram_id": telegram_id,
                "full_name": full_name,
                "username": username,
                "is_admin": is_admin,
                "trial_started_at": datetime.utcnow() if not is_admin else None,
                "created_at": datetime.utcnow(),
                "referral_code": referral_code,
                "referrer_id": referrer_id
            }

            result = await session.execute(
                users.insert().values(**user_data).returning(users)
            )
            await session.commit()
            user = dict(result.mappings().first())
            
            # Apply referral rewards if applicable
            if referrer_id:
                await apply_referral_rewards(referrer_id, telegram_id)
            
            return user
    except Exception as e:
        logger.error(f"Error creating user: {e}")
        raise

async def create_diary_entry(user_id: int, entry_text: str, mood: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    try:
        async with async_session() as session:
            await session.execute(
                diary_entries.insert().values(
                    user_id=user_id,
                    entry_text=entry_text,
                    mood=mood
                )
            )
            await session.commit()
            return True
    except Exception as e:
        logger.error(f"Error creating diary entry: {e}")
        return False

async def get_diary_entries(user_id: int, limit: int = 10):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with async_session() as session:
            result = await session.execute(
                text("SELECT * FROM diary_entries WHERE user_id = :user_id ORDER BY created_at DESC LIMIT :limit"),
                {"user_id": user_id, "limit": limit}
            )
            return [dict(row) for row in result.mappings()]
    except Exception as e:
        logger.error(f"Error getting diary entries: {e}")
        return []

async def create_habit(user_id: int, title: str, description: str, reminder_time: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É"""
    try:
        async with async_session() as session:
            result = await session.execute(
                habits.insert().values(
                    user_id=user_id,
                    title=title,
                    description=description,
                    reminder_time=reminder_time
                ).returning(habits)
            )
            await session.commit()
            return dict(result.mappings().first())
    except Exception as e:
        logger.error(f"Error creating habit: {e}")
        return None

async def get_user_habits(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with async_session() as session:
            result = await session.execute(
                text("SELECT * FROM habits WHERE user_id = :user_id ORDER BY created_at DESC"),
                {"user_id": user_id}
            )
            return [dict(row) for row in result.mappings()]
    except Exception as e:
        logger.error(f"Error getting habits: {e}")
        return []

async def complete_habit(habit_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    try:
        async with async_session() as session:
            await session.execute(
                habit_completions.insert().values(
                    habit_id=habit_id,
                    completed_at=datetime.utcnow()
                )
            )
            await session.commit()
            return True
    except Exception as e:
        logger.error(f"Error completing habit: {e}")
        return False

async def save_wheel_balance(user_id: int, scores: Dict[str, int]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–ª–µ—Å–∞ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        async with async_session() as session:
            await session.execute(
                wheel_balance.insert().values(
                    user_id=user_id,
                    **scores
                )
            )
            await session.commit()
            return True
    except Exception as e:
        logger.error(f"Error saving wheel balance: {e}")
        return False
    
async def apply_referral_rewards(referrer_id: int, new_user_id: int):
    """Apply rewards for referral"""
    try:
        async with async_session() as session:
            # Check if referrer hasn't exceeded monthly limit
            referrer = await get_user(referrer_id)
            if not referrer:
                return
                
            # Check last referral date
            now = datetime.utcnow()
            last_ref_date = referrer.get('last_referral_date')
            
            if last_ref_date and (now - last_ref_date).days < 30:
                if referrer.get('referrals_count', 0) >= Config.MAX_REFERRALS_PER_MONTH:
                    return
            
            # Update referrer stats
            await session.execute(
                users.update()
                .where(users.c.telegram_id == referrer_id)
                .values(
                    referrals_count=users.c.referrals_count + 1,
                    last_referral_date=now,
                    hearts=users.c.hearts + Config.REFERRAL_REWARD_HEARTS,
                    subscription_expires_at=users.c.subscription_expires_at + timedelta(days=Config.REFERRAL_REWARD_DAYS)
                )
            )
            
            # Give new user trial if they don't have one
            new_user = await get_user(new_user_id)
            if not new_user.get('trial_started_at'):
                await session.execute(
                    users.update()
                    .where(users.c.telegram_id == new_user_id)
                    .values(
                        trial_started_at=now,
                        subscription_expires_at=now + timedelta(days=Config.TRIAL_DAYS)
                    )
                )
            
            await session.commit()
    except Exception as e:
        logger.error(f"Error applying referral rewards: {e}")

async def get_user_account_status(user_id: int) -> str:
    """Get user account status (free, trial, premium)"""
    user = await get_user(user_id)
    if not user:
        return "free"
    
    if user.get('is_premium'):
        return "premium"
    
    if user.get('trial_started_at'):
        trial_end = user['trial_started_at'] + timedelta(days=Config.TRIAL_DAYS)
        if datetime.utcnow() < trial_end:
            return "trial"
    
    return "free"

async def check_diary_entry_today(user_id: int) -> bool:
    """Check if user made diary entry today"""
    async with async_session() as session:
        result = await session.execute(
            text("""
                SELECT 1 FROM diary_entries 
                WHERE user_id = :user_id 
                AND DATE(created_at) = CURRENT_DATE
            """),
            {"user_id": user_id}
        )
        return bool(result.scalar())

async def get_diary_entries_by_period(user_id: int, days: int = None, date: datetime = None):
    """Get diary entries for specific period"""
    try:
        async with async_session() as session:
            query = text("""
                SELECT * FROM diary_entries 
                WHERE user_id = :user_id
            """)
            params = {"user_id": user_id}
            
            if days:
                query = text(f"""
                    {query.text} AND created_at >= NOW() - INTERVAL '{days} days'
                    ORDER BY created_at DESC
                """)
            elif date:
                query = text(f"""
                    {query.text} AND DATE(created_at) = :date
                    ORDER BY created_at DESC
                """)
                params["date"] = date
            else:
                query = text(f"{query.text} ORDER BY created_at DESC LIMIT 7")
            
            result = await session.execute(query, params)
            return [dict(row) for row in result.mappings()]
    except Exception as e:
        logger.error(f"Error getting diary entries: {e}")
        return []

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å"""
    return hashlib.sha256(password.encode()).hexdigest()

async def check_diary_password(user_id: int, password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    user = await get_user(user_id)
    if not user or not user.get('diary_password'):
        return False
    return user['diary_password'] == hash_password(password)

# –í —Ä–∞–∑–¥–µ–ª–µ "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
DAILY_TASKS = {
    "diary": {"reward": 10, "min_length": 50},
    "habits": {"reward": 5, "min_count": 1},
    "challenge": {"reward": 20}
}

async def check_daily_tasks(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    tasks = {
        "diary": await check_diary_entry(user_id),
        "habits": await check_habits(user_id),
        "challenge": await check_challenge(user_id)
    }
    
    total_reward = 0
    for task, completed in tasks.items():
        if completed:
            total_reward += DAILY_TASKS[task]["reward"]
    
    if total_reward > 0:
        await add_hearts(user_id, total_reward)
        await bot.send_message(
            user_id,
            f"üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è! –ü–æ–ª—É—á–µ–Ω–æ: {total_reward}üíñ"
        )
    
async def check_diary_entry(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–¥–µ–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ —Å–µ–≥–æ–¥–Ω—è"""
    async with async_session() as session:
        result = await session.execute(
            text("""
                SELECT 1 FROM diary_entries 
                WHERE user_id = :user_id 
                AND DATE(created_at) = CURRENT_DATE
                AND LENGTH(entry_text) >= :min_length
            """),
            {"user_id": user_id, "min_length": DAILY_TASKS["diary"]["min_length"]}
        )
        return bool(result.scalar())

async def check_habits(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—ã—á–∫–∏ —Å–µ–≥–æ–¥–Ω—è"""
    async with async_session() as session:
        result = await session.execute(
            text("""
                SELECT COUNT(*) FROM habit_completions hc
                JOIN habits h ON hc.habit_id = h.id
                WHERE h.user_id = :user_id
                AND DATE(hc.completed_at) = CURRENT_DATE
            """),
            {"user_id": user_id}
        )
        count = result.scalar()
        return count >= DAILY_TASKS["habits"]["min_count"]

async def check_challenge(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ
    # –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    return False
    
async def add_hearts(user_id: int, amount: int) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ä–¥–µ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user = await get_user(user_id)
    if not user:
        return False
    return await update_user(user_id, hearts=user.get('hearts', 0) + amount)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard(user_id: Optional[int] = None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    buttons = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology_menu"),
         InlineKeyboardButton(text="üìî –î–Ω–µ–≤–Ω–∏–∫", callback_data="personal_diary")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏", callback_data="habits"),
        InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
        # –ú–∞–≥–∞–∑–∏–Ω –∏ –ø—Ä–µ–º–∏—É–º
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
         InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="premium_shop")],
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral_system"),
         InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")])
        
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_keyboard():
    """–ü–æ–ª–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    buttons = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
         InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üíé –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin_premium"),
         InlineKeyboardButton(text="üíñ –ù–∞—á–∏—Å–ª–∏—Ç—å —Å–µ—Ä–¥—Ü–∞", callback_data="admin_hearts")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="admin_ban"),
         InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="admin_unban")],
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_create_task"),
         InlineKeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ", callback_data="admin_create_promo")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_gender_keyboard():
    """Gender selection keyboard"""
    buttons = [
        [InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
        [InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_diary_period_keyboard():
    """Diary period selection keyboard"""
    buttons = [
        [InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="diary_7")],
        [InlineKeyboardButton(text="üóì –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="diary_30")],
        [InlineKeyboardButton(text="üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="diary_custom")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="personal_diary")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_habit_schedule_keyboard():
    """Habit schedule selection keyboard"""
    buttons = [
        [InlineKeyboardButton(text="‚è∞ –°–µ–≥–æ–¥–Ω—è", callback_data="habit_today")],
        [InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="habit_custom_date")],
        [InlineKeyboardButton(text="üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="habit_daily")],
        [InlineKeyboardButton(text="üö´ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="habit_no_reminder")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_premium_payment_keyboard(item_id: str):
    """Premium payment methods keyboard"""
    buttons = [
        [InlineKeyboardButton(text="üí≥ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT)", callback_data=f"premium_crypto_{item_id}")],
        [InlineKeyboardButton(text="üü£ –ÆMoney", callback_data=f"premium_yoomoney_{item_id}")],
        [InlineKeyboardButton(text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"premium_promo_{item_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="premium_shop")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_profile_keyboard():
    """–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    buttons = [
        [InlineKeyboardButton(text="üìî –õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫", callback_data="personal_diary")],
        [InlineKeyboardButton(text="‚úÖ –¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habits")],
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="premium_shop")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_psychology_menu_keyboard():
    """–ú–µ–Ω—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏"""
    buttons = [
        [InlineKeyboardButton(text="‚öñÔ∏è –ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞", callback_data="wheel_of_life")],
        [InlineKeyboardButton(text="üåÄ –î–µ—Ç–æ–∫—Å —Ç—Ä–µ–≤–æ–≥–∏", callback_data="detox_anxiety")],
        [InlineKeyboardButton(text="ü¶∏ –¢–µ—Å—Ç –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤", callback_data="archetype_test")],
        [InlineKeyboardButton(text="üôè –î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏", callback_data="gratitude_journal")],
        [InlineKeyboardButton(text="üåô –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞", callback_data="sleep_analyzer")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç —Å—Ç—Ä–µ—Å—Å–∞", callback_data="stress_test")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_diary_keyboard():
    """–ú–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚úçÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="new_diary_entry")],
        [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_diary_entries")],
        [InlineKeyboardButton(text="üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="set_diary_password")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_habits_keyboard():
    """–ú–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", callback_data="new_habit")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="my_habits")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_shop_keyboard():
    """–ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    buttons = [
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="premium_shop")],
        [InlineKeyboardButton(text="üí∞ –ü–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="paid_shop")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_premium_shop_keyboard():
    """–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏—É–º–∞"""
    buttons = [
        [InlineKeyboardButton(text=item["title"], callback_data=f"buy_premium_{item['id']}")]
        for item in PREMIUM_SHOP_ITEMS
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_paid_shop_keyboard():
    """–ú–∞–≥–∞–∑–∏–Ω –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    buttons = [
        [InlineKeyboardButton(text=item["title"], callback_data=f"buy_paid_{item['id']}")]
        for item in PAID_SHOP_ITEMS
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_methods_keyboard(item_id: str):
    """–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [InlineKeyboardButton(text="üí≥ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT)", callback_data=f"pay_crypto_{item_id}")],
        [InlineKeyboardButton(text="üü£ –ÆMoney", callback_data=f"pay_yoomoney_{item_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="paid_shop")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- Handlers ---
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command with new onboarding flow"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º last_activity_at –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ
        await update_user(message.from_user.id, last_activity_at=datetime.utcnow())
        
        loading_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...")
        
        # Check if user exists
        user = await get_user(message.from_user.id)
        
        if not user:
            # New user flow
            await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)
            
            # Send bot introduction
            intro_text = (
                f"{hide_link('https://example.com/bot-preview.jpg')}"
                "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MindHelper ‚Äî –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!</b>\n\n"
                "–Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é GPT-4o, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º:\n"
                "‚Ä¢ –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏—è—Ö –∏ –º—ã—Å–ª—è—Ö\n"
                "‚Ä¢ –†–∞–∑–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
                "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏\n"
                "‚Ä¢ –ù–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö\n\n"
                "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
                "üß† <i>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑—ã</i>\n"
                "üìî <i>–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º</i>\n"
                "‚úÖ <i>–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –∏ —Ü–µ–ª–µ–π</i>\n"
                "üéØ <i>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</i>\n"
                "üíé <i>–ü—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏</i>\n\n"
                "<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b> –Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞. "
                "–í –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:"
            )
            
            await message.answer(
                intro_text,
                reply_markup=get_gender_keyboard()
            )
            await state.set_state(UserStates.waiting_for_gender)
        else:
            # Existing user
            await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)
            await show_main_menu(message.from_user.id, message)
            
    except Exception as e:
        logger.error(f"Error in /start handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(StateFilter(UserStates.waiting_for_name))
async def process_user_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await update_user(message.from_user.id, name=name)
    await state.clear()
    
    await message.answer(
        f"‚ú® –û—Ç–ª–∏—á–Ω–æ, {name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        reply_markup=get_main_menu_keyboard()
    )

async def show_main_menu(user_id: int, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º"""
    user = await get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    name = user.get('name', '–¥—Ä—É–≥')
    time_of_day = "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ" if 5 <= datetime.now().hour < 12 else \
                 "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å" if 12 <= datetime.now().hour < 18 else \
                 "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä" if 18 <= datetime.now().hour < 23 else \
                 "–¥–æ–±—Ä–æ–π –Ω–æ—á–∏"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    if user.get('is_banned'):
        await message.answer(f"‚õî {name}, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return

    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if user.get('is_admin'):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        async with async_session() as session:
            total_users = (await session.execute(text("SELECT COUNT(*) FROM users"))).scalar()
            active_today = (await session.execute(text(
                "SELECT COUNT(*) FROM users WHERE created_at >= CURRENT_DATE"
            ))).scalar()

        admin_text = (
            f"üëë {time_of_day.capitalize()}, {name} (–ê–¥–º–∏–Ω)\n\n"
            f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n\n"
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:"
        )

        await message.answer(
            admin_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                [InlineKeyboardButton(text="üë§ –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user"),
                 InlineKeyboardButton(text="üíé –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin_premium")],
                [InlineKeyboardButton(text="üíñ –ù–∞—á–∏—Å–ª–∏—Ç—å —Å–µ—Ä–¥—Ü–∞", callback_data="admin_hearts"),
                 InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="admin_ban")],
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_create_task"),
                 InlineKeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ", callback_data="admin_create_promo")],
                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                [InlineKeyboardButton(text="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                 InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")],
                # –°–∏—Å—Ç–µ–º–∞
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
                 InlineKeyboardButton(text="üì¶ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_backup")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        return

    # –ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    account_status = await get_user_account_status(user_id)
    status_icon = "üíé" if account_status == "premium" else \
                 "üü¢" if account_status == "trial" else \
                 "üîπ"

    main_menu_text = (
        f"{time_of_day.capitalize()}, {name}! {status_icon}\n\n"
        f"üíñ –ë–∞–ª–∞–Ω—Å: {user.get('hearts', 0)}\n"
        f"üìÖ –í —Å–∏—Å—Ç–µ–º–µ —Å: {user['created_at'].strftime('%d.%m.%Y')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )

    await message.answer(
        main_menu_text,
        reply_markup=get_main_menu_keyboard(user_id)
    )
        
@router.callback_query(F.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """Process gender selection"""
    gender = "male" if callback.data == "gender_male" else "female"
    salutation = "–î–æ—Ä–æ–≥–æ–π" if gender == "male" else "–î–æ—Ä–æ–≥–∞—è"
    
    await update_user(callback.from_user.id, gender=gender)
    await state.clear()
    
    user = await get_user(callback.from_user.id)
    name = user.get('name', '–¥—Ä—É–≥')
    
    await callback.message.edit_text(
        f"{salutation} {name}, —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞. "
        "–ù–∞—á–Ω–∏—Ç–µ —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """Show enhanced user profile"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    name = user.get('name', '–¥—Ä—É–≥')
    hearts = user.get('hearts', 0)
    gender_emoji = "üë®" if user.get('gender') == "male" else "üë©"
    
    # Get account status
    status = await get_user_account_status(callback.from_user.id)
    status_text = {
        "free": "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
        "trial": "üü¢ –ü—Ä–æ–±–Ω—ã–π",
        "premium": "üíé –ü—Ä–µ–º–∏—É–º"
    }.get(status, "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π")
    
    # Get requests info
    daily_requests = user.get('daily_requests', 0)
    total_requests = user.get('total_requests', 0)
    
    if status == "trial":
        trial_end = user['trial_started_at'] + timedelta(days=Config.TRIAL_DAYS)
        days_left = (trial_end - datetime.utcnow()).days
        status_text += f" ({days_left} –¥–Ω. –æ—Å—Ç–∞–ª–æ—Å—å)"
        requests_limit = Config.TRIAL_DAILY_LIMIT
    elif status == "premium":
        requests_limit = Config.PREMIUM_DAILY_LIMIT
    else:
        requests_limit = Config.FREE_WEEKLY_LIMIT
    
    # Get habits and diary stats
    habits = await get_user_habits(callback.from_user.id)
    completed_habits = sum(1 for _ in habits)
    
    diary_entries = await get_diary_entries(callback.from_user.id, 7)
    
    # Get referral info if available
    referral_info = ""
    if user.get('referral_code'):
        referral_info = (
            f"\n\nüë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n"
            f"–í–∞—à –∫–æ–¥: <code>{user['referral_code']}</code>\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.get('referrals_count', 0)}/{Config.MAX_REFERRALS_PER_MONTH} (–º–µ—Å.)\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {Config.REFERRAL_REWARD_DAYS} –¥–Ω. –ø—Ä–µ–º–∏—É–º–∞ + {Config.REFERRAL_REWARD_HEARTS}üíñ –∑–∞ –∫–∞–∂–¥–æ–≥–æ"
        )
    
    text = (
        f"{gender_emoji} <b>–ü—Ä–æ—Ñ–∏–ª—å {name}</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"üíñ <b>–°–µ—Ä–¥–µ—á–∫–∏:</b> {hearts}\n"
        f"üìù <b>–ó–∞–ø—Ä–æ—Å—ã:</b> {daily_requests}/{requests_limit} (—Å–µ–≥–æ–¥–Ω—è)\n"
        f"üìö <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {total_requests}\n\n"
        f"üìî <b>–î–Ω–µ–≤–Ω–∏–∫:</b> {len(diary_entries)} –∑–∞–ø–∏—Å–µ–π\n"
        f"‚úÖ <b>–ü—Ä–∏–≤—ã—á–∫–∏:</b> {completed_habits} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        f"{referral_info}"
    )
    
    buttons = [
        [InlineKeyboardButton(text="üìî –õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫", callback_data="personal_diary")],
        [InlineKeyboardButton(text="‚úÖ –¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habits")],
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="premium_shop")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(callback.from_user.id, callback.message)
    await callback.answer()

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    name = user.get('name', '–¥—Ä—É–≥')
    hearts = user.get('hearts', 0)
    
    habits = await get_user_habits(callback.from_user.id)
    completed_habits = sum(1 for _ in habits)
    
    diary_entries = await get_diary_entries(callback.from_user.id, 1)
    
    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å {name}</b>\n\n"
        f"üíñ –°–µ—Ä–¥–µ—á–µ–∫: {hearts}\n"
        f"üìù –ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: {len(diary_entries)}\n"
        f"‚úÖ –ü—Ä–∏–≤—ã—á–µ–∫: {completed_habits}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# --- Diary handlers ---
@router.callback_query(F.data == "personal_diary")
async def personal_diary_menu(callback: CallbackQuery):
    """Diary menu with info"""
    diary_info = (
        "üìî <b>–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏, —ç–º–æ—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è. "
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞–π—Ç–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏.\n\n"
        "‚ú® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—å —Å —ç–º–æ—Ü–∏—è–º–∏ (üòä, üò¢ –∏ –¥—Ä.) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏: +{Config.DIARY_REWARD}üíñ (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        diary_info,
        reply_markup=get_diary_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "new_diary_entry")
async def new_diary_entry(callback: CallbackQuery, state: FSMContext):
    """–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    await callback.message.edit_text(
        "‚úçÔ∏è <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è. "
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "<i>–°–µ–≥–æ–¥–Ω—è –±—ã–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å! –Ø –∑–∞–∫–æ–Ω—á–∏–ª –≤–∞–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. üòä</i>",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_diary_entry)
    await callback.answer()
    
@router.message(StateFilter(UserStates.waiting_for_diary_entry))
async def process_diary_entry(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    entry_text = message.text.strip()
    if len(entry_text) < 5:
        await message.answer("–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞
    mood = None
    emotions = ["üòä", "üò¢", "üò†", "üòç", "üòê", "üò®", "üò≠", "ü§î"]
    for emoji in emotions:
        if emoji in entry_text:
            mood = emoji
            entry_text = entry_text.replace(emoji, "").strip()
            break

    if await create_diary_entry(message.from_user.id, entry_text, mood):
        await add_hearts(message.from_user.id, 5)  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–ø–∏—Å—å
        await message.answer(
            "üìî –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! +5üíñ",
            reply_markup=get_diary_keyboard()
        )
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
    
    await state.clear()
    
@router.callback_query(F.data == "my_diary_entries")
async def show_diary_entries(callback: CallbackQuery):
    """Show diary entries with period selection"""
    entries = await get_diary_entries_by_period(callback.from_user.id, days=7)
    if not entries:
        await callback.message.edit_text(
            "üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.",
            reply_markup=get_diary_keyboard()
        )
    else:
        text = "üìñ <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        for entry in entries[:7]:  # Show last 7 entries by default
            date = entry['created_at'].strftime("%d.%m.%Y %H:%M")
            mood = entry.get('mood', '')
            preview = entry['entry_text'][:50] + ("..." if len(entry['entry_text']) > 50 else "")
            text += f"üìÖ <b>{date}</b> {mood}\n{preview}\n\n"

        text += "\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥:"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_diary_period_keyboard(),
            parse_mode="HTML"
        )
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_diary_password))
async def process_diary_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    password = message.text.strip()
    if len(password) < 6:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    hashed = hash_password(password)
    if await update_user(message.from_user.id, diary_password=hashed):
        await message.answer("üîê –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_diary_keyboard())
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–æ–ª—è.")
    
    await state.clear()

@router.callback_query(F.data == "set_diary_password")
async def set_diary_password(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫"""
    await callback.message.edit_text(
        "üîê <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_diary_password)
    await callback.answer()
    
@router.callback_query(F.data.startswith("diary_"))
async def show_diary_by_period(callback: CallbackQuery):
    """Show diary entries for specific period"""
    period = callback.data.replace("diary_", "")
    
    if period == "custom":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        # Here you would set state to wait for date input
        await callback.answer()
        return
    
    days = int(period) if period.isdigit() else 7
    entries = await get_diary_entries_by_period(callback.from_user.id, days=days)
    
    if not entries:
        await callback.message.edit_text(
            f"üìñ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.",
            reply_markup=get_diary_period_keyboard()
        )
    else:
        text = f"üìñ <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:</b>\n\n"
        for entry in entries:
            date = entry['created_at'].strftime("%d.%m.%Y %H:%M")
            mood = entry.get('mood', '')
            preview = entry['entry_text'][:50] + ("..." if len(entry['entry_text']) > 50 else "")
            text += f"üìÖ <b>{date}</b> {mood}\n{preview}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_diary_period_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫ ---
@router.callback_query(F.data == "habits")
async def habits_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫"""
    await callback.message.edit_text(
        "‚úÖ <b>–¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.",
        reply_markup=get_habits_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "new_habit")
async def new_habit(callback: CallbackQuery, state: FSMContext):
    """–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"""
    await callback.message.edit_text(
        "‚ûï <b>–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:",
        parse_mode="HTML"
    )
    await state.set_state(HabitCreation.waiting_for_title)
    await callback.answer()

@router.message(StateFilter(HabitCreation.waiting_for_title))
async def process_habit_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    title = message.text.strip()
    if len(title) < 3:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(title=title)
    await state.set_state(HabitCreation.waiting_for_description)
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:"
    )

@router.message(StateFilter(HabitCreation.waiting_for_description))
async def process_habit_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    description = message.text.strip()
    if len(description) < 5:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(description=description)
    await state.set_state(HabitCreation.waiting_for_time)
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00) –∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ:"
    )

@router.message(StateFilter(HabitCreation.waiting_for_time))
async def process_habit_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≤—ã—á–∫–∏"""
    time_input = message.text.strip()
    reminder_time = None if time_input.lower() == '–Ω–µ—Ç' else time_input

    data = await state.get_data()
    habit = await create_habit(
        user_id=message.from_user.id,
        title=data['title'],
        description=data['description'],
        reminder_time=reminder_time
    )

    if habit:
        await message.answer(
            f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{data['title']}' —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_habits_keyboard()
        )
        await add_hearts(message.from_user.id, 10)  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏.")
    
    await state.clear()

@router.callback_query(F.data == "my_habits")
async def show_user_habits(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    habits = await get_user_habits(callback.from_user.id)
    if not habits:
        await callback.message.edit_text(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.",
            reply_markup=get_habits_keyboard()
        )
    else:
        text = "üìä <b>–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:</b>\n\n"
        for habit in habits:
            reminder = f"‚è∞ {habit['reminder_time']}" if habit['reminder_time'] else ""
            text += f"‚Ä¢ {habit['title']} {reminder}\n"

        await callback.message.edit_text(
            text,
            reply_markup=get_habits_keyboard(),
            parse_mode="HTML"
        )
    await callback.answer()
    
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ ---
@router.callback_query(F.data == "psychology_menu")
async def psychology_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    text = (
        "üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º –º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º:\n\n"
        "‚öñÔ∏è <b>–ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞</b> - –æ—Ü–µ–Ω–∫–∞ 8 —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏\n"
        "üåÄ <b>–î–µ—Ç–æ–∫—Å —Ç—Ä–µ–≤–æ–≥–∏</b> - 3-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –ø–æ –ö–ü–¢\n"
        "ü¶∏ <b>–¢–µ—Å—Ç –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤</b> - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–π –ø—Å–∏—Ö–æ—Ç–∏–ø\n"
        "üôè <b>–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏</b> - –ø—Ä–∞–∫—Ç–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏\n"
        "üåô <b>–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞</b> - –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞\n"
        "üß™ <b>–¢–µ—Å—Ç —Å—Ç—Ä–µ—Å—Å–∞</b> - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞\n\n"
        "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–µ—Ä–¥–µ—á–∫–∏!"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_psychology_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "wheel_of_life")
async def wheel_of_life_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–µ—Å–æ–º –±–∞–ª–∞–Ω—Å–∞"""
    await callback.message.edit_text(
        "‚öñÔ∏è <b>–ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "–û—Ü–µ–Ω–∏—Ç–µ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ñ–µ—Ä—ã –≤–∞—à–µ–π –∂–∏–∑–Ω–∏:\n\n"
        "1. –ó–¥–æ—Ä–æ–≤—å–µ\n2. –û—Ç–Ω–æ—à–µ–Ω–∏—è\n3. –ö–∞—Ä—å–µ—Ä–∞\n4. –§–∏–Ω–∞–Ω—Å—ã\n"
        "5. –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å\n6. –•–æ–±–±–∏\n7. –û–∫—Ä—É–∂–µ–Ω–∏–µ\n8. –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7,8,5,6,4,7,8,6):",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_wheel)
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_wheel))
async def process_wheel_scores(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫ –∫–æ–ª–µ—Å–∞ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        scores = list(map(int, message.text.strip().split(',')))
        if len(scores) != 8 or any(score < 0 or score > 10 for score in scores):
            raise ValueError
        
        categories = [
            "health", "relationships", "career", "finance",
            "spirit", "hobbies", "environment", "growth"
        ]
        scores_dict = dict(zip(categories, scores))
        
        if await save_wheel_balance(message.from_user.id, scores_dict):
            await add_hearts(message.from_user.id, 30)  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            await message.answer(
                "‚úÖ –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! +30üíñ\n\n"
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                "1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ñ–µ—Ä—ã —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏\n"
                "2. –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é 1-2 —Å—Ñ–µ—Ä",
                reply_markup=get_psychology_menu_keyboard()
            )
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫.")
    
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ 8 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 10 —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return
    
    await state.clear()

@router.callback_query(F.data == "detox_anxiety")
async def detox_anxiety_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–µ—Ç–æ–∫—Å–∞ —Ç—Ä–µ–≤–æ–≥–∏"""
    await callback.message.edit_text(
        "üåÄ <b>–î–µ—Ç–æ–∫—Å —Ç—Ä–µ–≤–æ–≥–∏</b>\n\n"
        "–≠—Ç–æ 3-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –ø–æ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç–µ—Ä–∞–ø–∏–∏.\n\n"
        "–î–µ–Ω—å 1: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Ç—Ä–µ–≤–æ–≥–∏\n"
        "–î–µ–Ω—å 2: –¢–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è\n"
        "–î–µ–Ω—å 3: –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? (–¥–∞/–Ω–µ—Ç)",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_detox)
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_detox))
async def process_detox_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–µ—Ç–æ–∫—Å–∞"""
    answer = message.text.strip().lower()
    if answer == '–¥–∞':
        await add_hearts(message.from_user.id, 50)  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –Ω–∞—á–∞–ª–æ –∫—É—Ä—Å–∞
        await message.answer(
            "üåÄ <b>–î–µ–Ω—å 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤</b>\n\n"
            "1. –ó–∞–ø–∏—à–∏—Ç–µ 3 —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≤—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Ç—Ä–µ–≤–æ–≥—É\n"
            "2. –û—Ç–º–µ—Ç—å—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º\n"
            "3. –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏ –æ—Ç 1 –¥–æ 10\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "1. –°–∏—Ç—É–∞—Ü–∏—è: ..., –¢—Ä–∏–≥–≥–µ—Ä: ..., –£—Ä–æ–≤–µ–Ω—å: ...\n"
            "2. ...",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∫—É—Ä—Å –ø–æ–∑–∂–µ.",
            reply_markup=get_psychology_menu_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data == "archetype_test")
async def archetype_test_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤"""
    await callback.message.edit_text(
        "ü¶∏ <b>–¢–µ—Å—Ç –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤</b>\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –∞—Ä—Ö–µ—Ç–∏–ø:\n\n"
        "1. –í —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —è –æ–±—ã—á–Ω–æ:\n"
        "–∞) –î–µ–π—Å—Ç–≤—É—é —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ\n–±) –ò—â—É –ø–æ–¥–¥–µ—Ä–∂–∫—É\n–≤) –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é\n–≥) –£—Ö–æ–∂—É –≤ —Å–µ–±—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∞,–±,–≤,–≥,–∞):",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_archetype)
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_archetype))
async def process_archetype_test(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤"""
    answers = message.text.strip().lower().split(',')
    if len(answers) != 5 or any(a not in ['–∞', '–±', '–≤', '–≥'] for a in answers):
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ 5 –æ—Ç–≤–µ—Ç–æ–≤ (–∞,–±,–≤,–≥) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ö–µ—Ç–∏–ø–∞
    archetypes = {
        '–∞': '–ì–µ—Ä–æ–π', '–±': '–û–ø–µ–∫—É–Ω', '–≤': '–ú—É–¥—Ä–µ—Ü', '–≥': '–ò—Å–∫–∞—Ç–µ–ª—å'
    }
    main_archetype = archetypes[max(set(answers), key=answers.count)]
    
    await add_hearts(message.from_user.id, 20)  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    await message.answer(
        f"ü¶∏ <b>–í–∞—à –∞—Ä—Ö–µ—Ç–∏–ø: {main_archetype}</b>\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {get_archetype_description(main_archetype)}\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã\n"
        "2. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–ª–∞–±—ã–µ –∞—Å–ø–µ–∫—Ç—ã",
        reply_markup=get_psychology_menu_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()
    
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ---
@router.callback_query(F.data == "shop")
async def shop_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    user = await get_user(callback.from_user.id)
    hearts = user.get('hearts', 0) if user else 0
    
    await callback.message.edit_text(
        f"üõç <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n\n"
        f"üíñ –í–∞—à –±–∞–ª–∞–Ω—Å: {hearts}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_shop_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
    
@router.callback_query(F.data == "premium_shop")
async def premium_shop_menu(callback: CallbackQuery):
    """Premium shop menu"""
    user = await get_user(callback.from_user.id)
    hearts = user.get('hearts', 0) if user else 0
    
    premium_info = (
        "üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç–∞:\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ GPT-4o\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–∞–º\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        f"üíñ –í–∞—à –±–∞–ª–∞–Ω—Å: {hearts}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:"
    )
    
    await callback.message.edit_text(
        premium_info,
        reply_markup=get_premium_shop_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("buy_premium_"))
async def buy_premium_item(callback: CallbackQuery):
    """Buy premium with hearts"""
    item_id = callback.data.replace("buy_premium_", "")
    item = next((i for i in PREMIUM_SHOP_ITEMS if i['id'] == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    if user.get('hearts', 0) < item['price']:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–¥–µ—á–µ–∫")
        return

    # Process premium purchase
    days = 1 if item_id == "premium_1_day" else (7 if item_id == "premium_7_days" else 30)
    expires_at = datetime.utcnow() + timedelta(days=days)
    
    if await update_user(
        callback.from_user.id,
        is_premium=True,
        subscription_expires_at=expires_at,
        hearts=user.get('hearts', 0) - item['price']
    ):
        await callback.message.edit_text(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {item['title']}!\n\n"
            f"–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {expires_at.strftime('%d.%m.%Y')}",
            reply_markup=get_premium_shop_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_premium_shop_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "paid_shop")
async def paid_shop(callback: CallbackQuery):
    """–ú–∞–≥–∞–∑–∏–Ω –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    await callback.message.edit_text(
        "üí∞ <b>–ü–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏:\n"
        "‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å - 99‚ÇΩ\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ - 149‚ÇΩ\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π - 129‚ÇΩ\n"
        "‚Ä¢ –ì–æ—Ä–æ—Å–∫–æ–ø - 99‚ÇΩ\n"
        "‚Ä¢ –î–µ—Ç–æ–∫—Å —Ç—Ä–µ–≤–æ–≥–∏ - 149‚ÇΩ\n"
        "‚Ä¢ –ì–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - 149‚ÇΩ",
        reply_markup=get_paid_shop_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("buy_paid_"))
async def buy_paid_item(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –ø–ª–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    item_id = callback.data.replace("buy_paid_", "")
    item = next((i for i in PAID_SHOP_ITEMS if i['id'] == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await callback.message.edit_text(
        f"üí∞ <b>{item['title']}</b>\n\n"
        f"{item['description']}\n\n"
        f"–¶–µ–Ω–∞: {item['price']}‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_methods_keyboard(item_id),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pay_crypto_"))
async def pay_with_crypto(callback: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
    item_id = callback.data.replace("pay_crypto_", "")
    item = next((i for i in PAID_SHOP_ITEMS if i['id'] == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await callback.message.edit_text(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ {item['title']}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {item['price']}‚ÇΩ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
        "<code>TMrLxEVr1sd5UCYB2iQXpj7GM3K5KdXTCP</code>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{item_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"buy_paid_{item_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()
    
@router.callback_query(F.data.startswith("pay_yoomoney_"))
async def pay_with_yoomoney(callback: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney"""
    item_id = callback.data.replace("pay_yoomoney_", "")
    item = next((i for i in PAID_SHOP_ITEMS if i['id'] == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await callback.message.edit_text(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ {item['title']}</b>\n\n"
        f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {item['price']}‚ÇΩ –Ω–∞ –ÆMoney:\n"
        "<code>4100119110059662</code>\n\n"
        "2. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à @username\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{item_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"buy_paid_{item_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()
    
@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    item_id = callback.data.replace("check_payment_", "")
    item = next((i for i in PAID_SHOP_ITEMS if i['id'] == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    # –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
    
    try:
        async with async_session() as session:
            await session.execute(
                payments.insert().values(
                    user_id=callback.from_user.id,
                    amount=item['price'],
                    currency=item['currency'],
                    item_id=item_id,
                    status="completed"
                )
            )
            await session.commit()
        
        await callback.message.edit_text(
            f"üéâ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫: {item['title']}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõç –í –º–∞–≥–∞–∑–∏–Ω", callback_data="paid_shop")]
            ]),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"buy_paid_{item_id}")]
            ])
        )
    
    await callback.answer()
    
# --- –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ---
async def check_payments():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ñ–æ–Ω–µ"""
    while True:
        try:
            async with async_session() as session:
                result = await session.execute(
                    text("SELECT * FROM payments WHERE status = 'pending'")
                )
                payments = result.mappings().all()

                for payment in payments:
                    # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                    # –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    pass

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_payments: {e}")

        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
async def send_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            now = datetime.now()
            async with async_session() as session:
                result = await session.execute(
                    text("""
                        SELECT h.user_id, h.title, h.description 
                        FROM habits h
                        WHERE h.reminder_time IS NOT NULL
                        AND h.reminder_time = :now
                    """),
                    {"now": now.strftime("%H:%M")}
                )
                habits = result.mappings().all()

                for habit in habits:
                    try:
                        await bot.send_message(
                            habit['user_id'],
                            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {habit['title']}\n{habit['description']}"
                        )
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ send_reminders: {e}")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
# –ê–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏–∫–∏
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    async with async_session() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result = await session.execute(text("SELECT COUNT(*) FROM users"))
        total_users = result.scalar()
        
        result = await session.execute(text("SELECT COUNT(*) FROM users WHERE is_premium = TRUE"))
        premium_users = result.scalar()
        
        result = await session.execute(text("SELECT COUNT(*) FROM users WHERE is_banned = TRUE"))
        banned_users = result.scalar()
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        result = await session.execute(text("""
            SELECT COUNT(*) FROM users 
            WHERE last_activity_at >= NOW() - INTERVAL '1 day'
        """))
        active_today = result.scalar()

    text = (
        "üìä <b>–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üíé –ü—Ä–µ–º–∏—É–º: {premium_users}\n"
        f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_users}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_today}\n"
    )
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user")],
            [InlineKeyboardButton(text="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_recent_users")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()
    
@router.message(Command("admin"))
async def admin_panel(message: Message):
    """Admin panel"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    async with async_session() as session:
        # Total users
        result = await session.execute(text("SELECT COUNT(*) FROM users"))
        total_users = result.scalar()
        
        # Active today
        result = await session.execute(
            text("SELECT COUNT(*) FROM users WHERE last_activity_at >= CURRENT_DATE")
        )
        active_today = result.scalar()
        
        # Premium users
        result = await session.execute(
            text("SELECT COUNT(*) FROM users WHERE is_premium = TRUE")
        )
        premium_users = result.scalar()
        
        # Latest users
        result = await session.execute(
            text("SELECT username, created_at FROM users ORDER BY created_at DESC LIMIT 5")
        )
        latest_users = result.mappings().all()
        
        # Pending payments
        result = await session.execute(
            text("""
                SELECT p.id, u.username, p.amount, p.currency, p.item_id 
                FROM payments p
                JOIN users u ON p.user_id = u.telegram_id
                WHERE p.status = 'pending'
                ORDER BY p.created_at DESC
                LIMIT 5
            """)
        )
        pending_payments = result.mappings().all()
    
    # Format latest users
    latest_users_text = "\n".join(
        f"‚Ä¢ @{user['username']} ({user['created_at'].strftime('%d.%m')})"
        for user in latest_users
    ) if latest_users else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # Format pending payments
    payments_text = "\n".join(
        f"‚Ä¢ @{pay['username']} - {pay['amount']}{pay['currency']} ({pay['item_id']})"
        for pay in pending_payments
    ) if pending_payments else "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π"
    
    admin_text = (
        f"üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
        f"‚Ä¢ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}\n\n"
        f"üÜï <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
        f"{latest_users_text}\n\n"
        f"üí≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
        f"{payments_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏", callback_data="admin_confirm_payments")],
        [InlineKeyboardButton(text="üíé –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin_premium")],
        [InlineKeyboardButton(text="üíñ –ù–∞—á–∏—Å–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="admin_hearts")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_ban")],
        [InlineKeyboardButton(text="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_create_task")],
        [InlineKeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo")]
    ]
    
    await message.answer(
        admin_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_ban")
async def admin_ban_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        "üö´ <b>–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_ban_user)
    await callback.answer()

@router.callback_query(F.data == "admin_unban")
async def admin_unban_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        "‚úÖ <b>–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_unban_user)
    await callback.answer()
    
@router.callback_query(F.data == "admin_confirm_payments")
async def admin_confirm_payments(callback: CallbackQuery):
    """Show pending payments for confirmation"""
    async with async_session() as session:
        result = await session.execute(
            text("""
                SELECT p.id, u.username, p.amount, p.currency, p.item_id, p.created_at
                FROM payments p
                JOIN users u ON p.user_id = u.telegram_id
                WHERE p.status = 'pending'
                ORDER BY p.created_at DESC
            """)
        )
        payments = result.mappings().all()
    
    if not payments:
        await callback.message.edit_text("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await callback.answer()
        return
    
    text = "üí≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n\n"
    for payment in payments:
        date = payment['created_at'].strftime("%d.%m %H:%M")
        text += (
            f"üÜî {payment['id']}\n"
            f"üë§ @{payment['username']}\n"
            f"üí∞ {payment['amount']}{payment['currency']}\n"
            f"üì¶ {payment['item_id']}\n"
            f"üìÖ {date}\n\n"
        )
    
    buttons = [
        [InlineKeyboardButton(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {payment['id']}", callback_data=f"confirm_pay_{payment['id']}")]
        for payment in payments
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )
    await callback.answer()
    
@router.callback_query(F.data.startswith("confirm_pay_"))
async def confirm_payment(callback: CallbackQuery):
    """Confirm specific payment"""
    payment_id = int(callback.data.replace("confirm_pay_", ""))
    
    async with async_session() as session:
        # Get payment details
        result = await session.execute(
            text("""
                SELECT p.*, u.telegram_id, u.username 
                FROM payments p
                JOIN users u ON p.user_id = u.telegram_id
                WHERE p.id = :payment_id
            """),
            {"payment_id": payment_id}
        )
        payment = result.mappings().first()
        
        if not payment:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Update payment status
        await session.execute(
            text("UPDATE payments SET status = 'completed' WHERE id = :payment_id"),
            {"payment_id": payment_id}
        )
        
        # Apply premium if it's a premium purchase
        if payment['item_id'].startswith("premium_"):
            days = 30 if "1_month" in payment['item_id'] else (
                7 if "7_days" in payment['item_id'] else 1
            )
            
            # Get current expiry
            result = await session.execute(
                text("SELECT subscription_expires_at FROM users WHERE telegram_id = :user_id"),
                {"user_id": payment['user_id']}
            )
            current_expiry = result.scalar()
            
            new_expiry = (
                max(current_expiry, datetime.utcnow()) if current_expiry 
                else datetime.utcnow()
            ) + timedelta(days=days)
            
            await session.execute(
                text("""
                    UPDATE users 
                    SET is_premium = TRUE, 
                        subscription_expires_at = :expiry 
                    WHERE telegram_id = :user_id
                """),
                {"expiry": new_expiry, "user_id": payment['user_id']}
            )
        
        await session.commit()
        
        # Notify user
        try:
            await bot.send_message(
                payment['user_id'],
                f"üéâ –í–∞—à –ø–ª–∞—Ç–µ–∂ {payment['amount']}{payment['currency']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                f"–¢–æ–≤–∞—Ä: {payment['item_id']}\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
            )
        except Exception as e:
            logger.error(f"Could not notify user: {e}")
        
        await callback.answer(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        await admin_confirm_payments(callback)  # Refresh list
        
@router.message(F.photo)
async def handle_payment_proof(message: Message):
    """Handle payment proof photos"""
    user = await get_user(message.from_user.id)
    if not user:
        return
    
    # Check if user has pending payments
    async with async_session() as session:
        result = await session.execute(
            text("""
                SELECT id, item_id FROM payments 
                WHERE user_id = :user_id AND status = 'pending'
                ORDER BY created_at DESC
                LIMIT 1
            """),
            {"user_id": message.from_user.id}
        )
        payment = result.mappings().first()
    
    if not payment:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
        return
    
    # Save photo info (in real bot you would save the photo file_id)
    await message.answer(
        "‚úÖ –í–∞—à —á–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.\n\n"
        f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment['id']}\n"
        f"–¢–æ–≤–∞—Ä: {payment['item_id']}"
    )
    
    # Notify admins
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_photo(
                admin_id,
                photo=message.photo[-1].file_id,
                caption=(
                    f"üÜî –ü–ª–∞—Ç–µ–∂: {payment['id']}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.get('username', 'N/A')} ({message.from_user.id})\n"
                    f"üì¶ –¢–æ–≤–∞—Ä: {payment['item_id']}\n\n"
                    "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {payment['id']}",
                        callback_data=f"confirm_pay_{payment['id']}"
                    )]
                ])
            )
        except Exception as e:
            logger.error(f"Could not notify admin {admin_id}: {e}")

# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
@router.callback_query(F.data.startswith("pay_crypto_"))
async def pay_with_crypto(callback: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
    item_id = callback.data.replace("pay_crypto_", "")
    item = next((i for i in PAID_SHOP_ITEMS if i['id'] == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # Create payment record
    async with async_session() as session:
        result = await session.execute(
            payments.insert().values(
                user_id=callback.from_user.id,
                amount=item['price'],
                currency=item['currency'],
                item_id=item_id,
                status="pending"
            ).returning(payments)
        )
        payment = dict(result.mappings().first())
        await session.commit()
    
    await callback.message.edit_text(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ {item['title']}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {item['price']}‚ÇΩ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
        "<code>TMrLxEVr1sd5UCYB2iQXpj7GM3K5KdXTCP</code>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
        "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç 5-10 –º–∏–Ω—É—Ç.\n\n"
        f"ID –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: <code>{payment['id']}</code>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"buy_paid_{item_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆMoney
@router.callback_query(F.data.startswith("pay_yoomoney_"))
async def pay_with_yoomoney(callback: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney"""
    item_id = callback.data.replace("pay_yoomoney_", "")
    item = next((i for i in PAID_SHOP_ITEMS if i['id'] == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # Create payment record
    async with async_session() as session:
        result = await session.execute(
            payments.insert().values(
                user_id=callback.from_user.id,
                amount=item['price'],
                currency=item['currency'],
                item_id=item_id,
                status="pending"
            ).returning(payments)
        )
        payment = dict(result.mappings().first())
        await session.commit()
    
    await callback.message.edit_text(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ {item['title']}</b>\n\n"
        f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {item['price']}‚ÇΩ –Ω–∞ –ÆMoney:\n"
        "<code>4100119110059662</code>\n\n"
        "2. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
        f"<code>@{callback.from_user.username} {payment['id']}</code>\n\n"
        "3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç 5-10 –º–∏–Ω—É—Ç.\n\n"
        f"ID –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: <code>{payment['id']}</code>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"buy_paid_{item_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()
    
@router.callback_query(F.data == "admin_premium")
async def admin_premium_handler(callback: CallbackQuery, state: FSMContext):
    """Admin premium activation"""
    await callback.message.edit_text(
        "üíé <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–æ–∫ (–≤ –¥–Ω—è—Ö) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>@username 30</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>@ivanov 30</code> - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_premium_username)
    await callback.answer()

@router.callback_query(F.data == "referral_system")
async def show_referral_system(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    text = (
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{user['referral_code']}</code>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:\n"
        f"‚Ä¢ {Config.REFERRAL_REWARD_HEARTS}üíñ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ\n"
        f"‚Ä¢ {Config.REFERRAL_REWARD_DAYS} –¥–Ω—è –ø—Ä–µ–º–∏—É–º–∞\n\n"
        f"–ú–∞–∫—Å–∏–º—É–º {Config.MAX_REFERRALS_PER_MONTH} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü.\n\n"
        "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n"
        f"https://t.me/{(await bot.get_me()).username}?start={user['referral_code']}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "sleep_analyzer")
async def sleep_analyzer_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞"""
    await callback.message.edit_text(
        "üåô <b>–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞</b>\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º —Å–Ω–µ:\n\n"
        "1. –í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –ª–µ–≥–ª–∏ —Å–ø–∞—Ç—å?\n"
        "2. –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–ø–∞–ª–∏?\n"
        "3. –ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (1-10)?\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23:00,7,6):",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_sleep_data)
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_sleep_data))
async def process_sleep_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ"""
    try:
        bedtime, hours, quality = message.text.strip().split(',')
        hours = float(hours)
        quality = int(quality)
        
        if not (0 < quality <= 10):
            raise ValueError
        
        analysis = "–•–æ—Ä–æ—à–∏–π —Å–æ–Ω" if quality >= 7 else "–ü–ª–æ—Ö–æ–π —Å–æ–Ω"
        
        await add_hearts(message.from_user.id, 25)
        await message.answer(
            f"üåô <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n"
            f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É: {bedtime}\n"
            f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours} —á–∞—Å–æ–≤\n"
            f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}/10\n\n"
            f"<b>–í—ã–≤–æ–¥:</b> {analysis}\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            "1. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ª–æ–∂–∏—Ç—å—Å—è –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è\n"
            "2. –ò–∑–±–µ–≥–∞–π—Ç–µ —ç–∫—Ä–∞–Ω–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
            reply_markup=get_psychology_menu_keyboard(),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤—Ä–µ–º—è,—á–∞—Å—ã,–∫–∞—á–µ—Å—Ç–≤–æ (1-10)")
        return
    
    await state.clear()
    
@router.message(StateFilter(UserStates.waiting_for_sleep_data))
async def process_sleep_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ"""
    try:
        bedtime, hours, quality = message.text.strip().split(',')
        hours = float(hours)
        quality = int(quality)
        
        if not (0 < quality <= 10):
            raise ValueError
        
        analysis = "–•–æ—Ä–æ—à–∏–π —Å–æ–Ω" if quality >= 7 else "–ü–ª–æ—Ö–æ–π —Å–æ–Ω"
        
        await add_hearts(message.from_user.id, 25)
        await message.answer(
            f"üåô <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n"
            f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É: {bedtime}\n"
            f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours} —á–∞—Å–æ–≤\n"
            f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}/10\n\n"
            f"<b>–í—ã–≤–æ–¥:</b> {analysis}\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            "1. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ª–æ–∂–∏—Ç—å—Å—è –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è\n"
            "2. –ò–∑–±–µ–≥–∞–π—Ç–µ —ç–∫—Ä–∞–Ω–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
            reply_markup=get_psychology_menu_keyboard(),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤—Ä–µ–º—è,—á–∞—Å—ã,–∫–∞—á–µ—Å—Ç–≤–æ (1-10)")
        return
    
    await state.clear()
    
@router.message(StateFilter(AdminStates.waiting_for_premium_username))
async def process_admin_premium(message: Message, state: FSMContext):
    """Process admin premium activation"""
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError
        
        username = parts[0].lstrip('@')
        days = int(parts[1])
        
        if days <= 0:
            raise ValueError
        
        # Find user by username
        async with async_session() as session:
            result = await session.execute(
                text("SELECT telegram_id FROM users WHERE username = :username"),
                {"username": username}
            )
            user = result.mappings().first()
            
            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # Calculate new expiration date
            user_id = user['telegram_id']
            current_expiry = await session.execute(
                text("SELECT subscription_expires_at FROM users WHERE telegram_id = :user_id"),
                {"user_id": user_id}
            )
            current_expiry = current_expiry.scalar()
            
            new_expiry = (
                max(current_expiry, datetime.utcnow()) if current_expiry 
                else datetime.utcnow()
            ) + timedelta(days=days)
            
            # Update user
            await session.execute(
                text("""
                    UPDATE users 
                    SET is_premium = TRUE, 
                        subscription_expires_at = :expiry 
                    WHERE telegram_id = :user_id
                """),
                {"expiry": new_expiry, "user_id": user_id}
            )
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è @{username} –¥–æ {new_expiry.strftime('%d.%m.%Y')}"
            )
            
            # Notify user
            try:
                await bot.send_message(
                    user_id,
                    f"üéâ –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π!\n"
                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {new_expiry.strftime('%d.%m.%Y')}"
                )
            except Exception as e:
                logger.error(f"Could not notify user: {e}")
    
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @username –¥–Ω–∏")
    
    await state.clear()

# ... [other admin handlers]

# --- Background tasks ---
async def reset_daily_limits():
    """Reset daily request limits"""
    while True:
        try:
            now = datetime.utcnow()
            async with async_session() as session:
                # Reset daily requests for all users
                await session.execute(
                    text("UPDATE users SET daily_requests = 0")
                )
                await session.commit()
                
                logger.info(f"Reset daily requests at {now}")
                
        except Exception as e:
            logger.error(f"Error in reset_daily_limits: {e}")
        
        # Run once per day at midnight UTC
        await asyncio.sleep(24 * 60 * 60)

async def check_subscriptions():
    """Check and update expired subscriptions"""
    while True:
        try:
            now = datetime.utcnow()
            async with async_session() as session:
                # Find expired premium users
                result = await session.execute(
                    text("""
                        SELECT telegram_id FROM users 
                        WHERE is_premium = TRUE 
                        AND subscription_expires_at < :now
                    """),
                    {"now": now}
                )
                expired_users = result.mappings().all()
                
                if expired_users:
                    # Disable premium for expired users
                    await session.execute(
                        text("""
                            UPDATE users 
                            SET is_premium = FALSE 
                            WHERE is_premium = TRUE 
                            AND subscription_expires_at < :now
                        """),
                        {"now": now}
                    )
                    await session.commit()
                    
                    # Notify users
                    for user in expired_users:
                        try:
                            await bot.send_message(
                                user['telegram_id'],
                                "‚ö†Ô∏è –í–∞—à–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. "
                                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë –≤ –º–∞–≥–∞–∑–∏–Ω–µ."
                            )
                        except Exception as e:
                            logger.error(f"Could not notify user {user['telegram_id']}: {e}")
                
                logger.info(f"Checked subscriptions at {now}, expired: {len(expired_users)}")
                
        except Exception as e:
            logger.error(f"Error in check_subscriptions: {e}")
        
        # Run once per hour
        await asyncio.sleep(60 * 60)

async def check_user_ban(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    user = await get_user(user_id)
    return user and user.get('is_banned', False)

@router.message()
async def check_banned_user(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if await check_user_ban(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ")
        return
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    
# --- Startup ---
async def on_startup(dp: Dispatcher):
    """Bot startup actions"""
    # Set bot commands
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="profile", description="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="tasks", description="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    ])
    
    # Start background tasks
    asyncio.create_task(reset_daily_limits())
    asyncio.create_task(check_subscriptions())
    asyncio.create_task(send_reminders())
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == "__main__":
    async def main():
        await on_startup(dp)
        await dp.start_polling(bot)

    asyncio.run(main())