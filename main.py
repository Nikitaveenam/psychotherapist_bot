import os
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from dotenv import load_dotenv
import openai
import httpx

from models import Base, User
from utils import check_user_subscription, is_user_allowed_to_chat

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DB_URL = os.getenv("DB_URL")
ADMIN_IDS = os.getenv("ADMIN_IDS", "").split(",")

if not BOT_TOKEN or not OPENAI_API_KEY or not DB_URL:
    logging.critical("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞–º—è—Ç–∏)
storage = MemoryStorage()
logger.warning("‚ö†Ô∏è Redis –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
async def set_default_commands():
    try:
        commands = [
            BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
            BotCommand(command="profile", description="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            BotCommand(command="subscription", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"),
            BotCommand(command="admin", description="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"),
        ]
        await bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DB_URL, echo=False)
Session = async_sessionmaker(engine, expire_on_commit=False)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscription_kb():
    return InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü ‚Äî 299‚ÇΩ", callback_data="subscribe_1")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ ‚Äî 799‚ÇΩ", callback_data="subscribe_3")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 1499‚ÇΩ", callback_data="subscribe_6")],
        [InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2999‚ÇΩ", callback_data="subscribe_12")],
    ])

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="my_status")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay")],
        [InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def handle_start(message: Message):
    async with Session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                name=message.from_user.full_name,
                trial_started_at=datetime.utcnow()
            )
            session.add(user)
            await session.commit()

    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–ù–û–ù–ò–ú–ù–´–ô –ü–°–ò–•–û–õ–û–ì</b>!  "
        "ü§ñ –Ø –∏—Å–ø–æ–ª—å–∑—É—é <b>GPT-4</b> –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ <b>GPT-3.5</b> –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. "
        "ü´ñ –ù–∞–ø–∏—à–∏, –∫–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å –∏–ª–∏ —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç.  "
        "üìå –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–µ–Ω—å. "
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
    )

    await message.answer(text, reply_markup=get_main_menu_kb())  # –Ø–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def handle_help(message: Message):
    await message.answer(
        "üìò <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>  "
        "‚Ä¢ –ù–∞–ø–∏—à–∏ –æ —Å–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≤–æ–ø—Ä–æ—Å–µ –∏–ª–∏ —ç–º–æ—Ü–∏—è—Ö "
        "‚Ä¢ –ü–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò (GPT-3.5 / GPT-4) "
        "‚Ä¢ –£ —Ç–µ–±—è –µ—Å—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–µ–Ω—å  "
        "üîê –•–æ—á–µ—à—å –±–æ–ª—å—à–µ? –ê–∫—Ç–∏–≤–∏—Ä—É–π –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /subscription "
        "üîé –ö–æ–º–∞–Ω–¥–∞ /profile –ø–æ–∫–∞–∂–µ—Ç —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å "
        "üìã –ö–æ–º–∞–Ω–¥–∞ /admin –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
    )

# –ö–æ–º–∞–Ω–¥–∞ /profile
@router.message(Command("profile"))
async def handle_profile(message: Message):
    async with Session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await check_user_subscription(user, session)

        if user.is_premium:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        elif user.trial_started_at and (datetime.utcnow() - user.trial_started_at).days <= 3:
            status = "üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        else:
            status = "üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"

        await message.answer(
            f"üìä <b>–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:</b> {status} üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.subscription_expires_at.strftime('%d.%m.%Y') if user.subscription_expires_at else '‚Äî'}"
        )

# –ö–æ–º–∞–Ω–¥–∞ /subscription
@router.message(Command("subscription"))
async def handle_subscribe(message: Message):
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:", reply_markup=get_subscription_kb())

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@router.message(Command("admin"))
async def handle_admin(message: Message):
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        
        await set_default_commands()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
