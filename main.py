import os
import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
)
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from dotenv import load_dotenv

from models import Base, User
from utils import check_user_subscription, is_user_allowed_to_chat
from openai import AsyncOpenAI
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DB_URL = os.getenv("DB_URL")
ADMIN_IDS = os.getenv("ADMIN_IDS", "").split(",")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

storage = MemoryStorage()
logger.warning("‚ö†Ô∏è Redis –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç—å.")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher(storage=storage)

engine = create_async_engine(DB_URL, echo=False)
Session = async_sessionmaker(engine, expire_on_commit=False)

client = AsyncOpenAI(api_key=OPENAI_API_KEY)

def get_subscription_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü ‚Äî 299‚ÇΩ", callback_data="subscribe_1")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ ‚Äî 799‚ÇΩ", callback_data="subscribe_3")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 1499‚ÇΩ", callback_data="subscribe_6")],
        [InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2999‚ÇΩ", callback_data="subscribe_12")],
    ])

def get_main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="my_status")],
        [InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="pay")],
        [InlineKeyboardButton(text="‚ùì FAQ", callback_data="faq")],
    ])

@dp.message(Command("start"))
async def handle_start(message: Message):
    async with Session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                name=message.from_user.full_name,
                trial_started_at=datetime.utcnow()
            )
            session.add(user)
            await session.commit()

    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–ù–û–ù–ò–ú–ù–û–ì–û –ü–°–ò–•–û–õ–û–ì–ê</b>! ü§ñ –Ø –∏—Å–ø–æ–ª—å–∑—É—é <b>GPT-4</b> –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ <b>GPT-3.5</b> –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞. ü´ñ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à—ë–ª –≤–∞—à –¥–µ–Ω—å –∏–ª–∏ —á—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç. üìå –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /help\n\n"
        "ü§ñ –Ø –∏—Å–ø–æ–ª—å–∑—É—é GPT-4 (–¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤) –∏ GPT-3.5 (–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ).\n"
        "ü´ñ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à—ë–ª –≤–∞—à –¥–µ–Ω—å –∏–ª–∏ —á—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç.\n"
        "üìå –£ –≤–∞—Å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."
    )
    await message.answer(text, reply_markup=get_main_menu_kb())

@dp.message(Command("help"))
async def handle_help(message: Message):
    await message.answer(
        "<b>üìò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥\n"
        "/profile ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/subscribe ‚Äî –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/chat ‚Äî –û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"
    )

@dp.message(Command("profile"))
async def handle_profile(message: Message):
    async with Session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await check_user_subscription(user, session)
        if user.is_premium:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        elif user.trial_started_at and (datetime.utcnow() - user.trial_started_at).days <= 3:
            status = "üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        else:
            status = "üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"

        await message.answer(
            f"üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> {status}\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.subscription_expires_at.strftime('%d.%m.%Y') if user.subscription_expires_at else '‚Äî'}"
        )

@dp.message(Command("subscribe"))
async def handle_subscribe(message: Message):
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=get_subscription_kb())

@dp.message(Command("chat"))
async def handle_chat(message: Message):
    async with Session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start")
            return

        if not await is_user_allowed_to_chat(session, user):
            await message.answer("üö´ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
            return

        model = "gpt-4" if user.is_premium else "gpt-3.5-turbo"

        try:
            response = await client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": message.text}],
            )
            reply = response.choices[0].message.content.strip()
            await message.answer(reply)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        today = datetime.now().strftime("%Y-%m-%d")
        if not hasattr(user, "daily_requests"):
            user.daily_requests = {}
        user.daily_requests[today] = user.daily_requests.get(today, 0) + 1
        await session.commit()

async def setup_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="help", description="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"),
        BotCommand(command="profile", description="–í–∞—à —Å—Ç–∞—Ç—É—Å"),
        BotCommand(command="subscribe", description="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="chat", description="–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º"),
    ]
    await bot.set_my_commands(commands)

async def main():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

    await setup_bot_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())