import asyncio
import hashlib
import logging
import os
import random
import re
from datetime import datetime, timedelta, timezone
from decimal import Decimal, getcontext
from typing import Optional, Dict, Any, List, Tuple

import aiocron
import httpx
import pytz
from dotenv import load_dotenv

from threading import Thread
import uvicorn
from fastapi import FastAPI, Request, status
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, Router, F, html, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    BotCommand,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ErrorEvent,
    PreCheckoutQuery,
    SuccessfulPayment,
)
from aiogram.utils.markdown import hide_link

from sqlalchemy import (
    BigInteger,
    Boolean,
    Column,
    DateTime,
    Float,
    Integer,
    MetaData,
    String,
    Table,
    Text,
    text,
)
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine
from sqlalchemy.orm import declarative_base
from sqlalchemy.sql import func

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = FastAPI()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DB_URL = os.getenv("DB_URL")
DB_URL_SYNC = os.getenv("DB_URL_SYNC")
ADMIN_IDS = [int(x.strip()) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
CRYPTO_API_KEY = os.getenv("CRYPTO_API_KEY")
YOOMONEY_WALLET = os.getenv("YOOMONEY_WALLET")
YOOMONEY_SECRET = os.getenv("YOOMONEY_SECRET")
TRON_ADDRESS = os.getenv("TRON_ADDRESS")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, OPENAI_API_KEY, DB_URL]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN, OPENAI_API_KEY –∏ DB_URL –≤ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
getcontext().prec = 8
AI_MODEL = "gpt-3.5-turbo"
AI_PUBLIC_MODEL_NAME = "GPT-4o"
TIMEZONE = pytz.timezone("Europe/Moscow")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DB_URL, echo=False)
async_session = async_sessionmaker(engine, expire_on_commit=False)
metadata = MetaData()
Base = declarative_base(metadata=metadata)

CRISIS_KEYWORDS = [
    "—Å—É–∏—Ü–∏–¥", "–ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π", "—É–º—Ä—É", "–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å", 
    "–Ω–µ–Ω–∞–≤–∏–∂—É —Å–µ–±—è", "–≤—Å–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ", "—Å–∏–ª—å–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è"
]

PSYCHOLOGY_PRACTICES = [
    {
        "title": "‚öñÔ∏è –ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞",
        "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ 8 —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏ –∏ –Ω–∞–π–¥–∏—Ç–µ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞.",
        "content": "–ö–æ–ª–µ—Å–æ –±–∞–ª–∞–Ω—Å–∞ - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ñ–µ—Ä–∞–º–∏ –∂–∏–∑–Ω–∏...",
        "hearts_cost": 0,
        "premium_only": False
    },
    {
        "title": "üôè –î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
        "description": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.",
        "content": "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å...",
        "hearts_cost": 0,
        "premium_only": False
    },
    {
        "title": "üåÄ –¢–µ—Ö–Ω–∏–∫–∞ 5-4-3-2-1",
        "description": "–ú–µ—Ç–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è —Ç—Ä–µ–≤–æ–≥–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç.",
        "content": "–ö–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ç—Ä–µ–≤–æ–≥—É, –Ω–∞–∑–æ–≤–∏—Ç–µ:\n5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç–µ...",
        "hearts_cost": 5,
        "premium_only": True
    },
    {
        "title": "üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏—á–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü",
        "description": "–ù–∞—É—á–∏—Ç–µ—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å '–Ω–µ—Ç' –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã.",
        "content": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –≤ –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –≤–∞—à–∏ –≥—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Ä—É—à–∞—é—Ç—Å—è, –∏ –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å '–Ω–µ—Ç' —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ —Å–µ–±–µ –∏ –¥—Ä—É–≥–∏–º.",
        "hearts_cost": 10,
        "premium_only": True
    },
    {
        "title": "üîÑ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫",
        "description": "–ò–∑–º–µ–Ω–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ —É–±–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ.",
        "content": "–ó–∞–ø–∏—à–∏—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∏—Ö –ø–æ-–Ω–æ–≤–æ–º—É —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–æ—Å—Ç.",
        "hearts_cost": 8,
        "premium_only": True
    },
    {
        "title": "üåø –ü—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏",
        "description": "–ù–∞—É—á–∏—Ç–µ—Å—å –±—ã—Ç—å –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è —Å–µ–±—è.",
        "content": "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–¥—É) –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º: –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –æ—â—É—â–µ–Ω–∏—è, –∑–∞–ø–∞—Ö–∏, —ç–º–æ—Ü–∏–∏.",
        "hearts_cost": 0,
        "premium_only": False
    },
    {
        "title": "üî• –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–∏",
        "description": "–°–æ–∑–¥–∞–π—Ç–µ —è—Ä–∫–∏–π –º—ã—Å–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑ —Å–≤–æ–µ–≥–æ —É—Å–ø–µ—Ö–∞.",
        "content": "–ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ –≤–æ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª—è—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ? –ß—Ç–æ –≤—ã –≤–∏–¥–∏—Ç–µ –∏ —Å–ª—ã—à–∏—Ç–µ?",
        "hearts_cost": 5,
        "premium_only": True
    },
    {
        "title": "üí¨ –î–∏–∞–ª–æ–≥ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∫—Ä–∏—Ç–∏–∫–æ–º",
        "description": "–û—Å–ª–∞–±—å—Ç–µ –≤–ª–∏—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞.",
        "content": "–ó–∞–ø–∏—à–∏—Ç–µ —Ä–µ–ø–ª–∏–∫–∏ –≤–∞—à–µ–≥–æ '–∫—Ä–∏—Ç–∏–∫–∞' –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–∏—Ö —Å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–±–æ—Ç–ª–∏–≤–æ–≥–æ –¥—Ä—É–≥–∞.",
        "hearts_cost": 7,
        "premium_only": True
    },
    {
        "title": "üéØ SMART-—Ü–µ–ª–∏",
        "description": "–ù–∞—É—á–∏—Ç–µ—Å—å —Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∏–∑–º–µ—Ä–∏–º—ã–µ —Ü–µ–ª–∏.",
        "content": "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–ª—å –ø–æ —Å–∏—Å—Ç–µ–º–µ SMART: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è, –∏–∑–º–µ—Ä–∏–º–∞—è, –¥–æ—Å—Ç–∏–∂–∏–º–∞—è, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏.",
        "hearts_cost": 0,
        "premium_only": False
    },
    {
        "title": "üîî –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ¬´–Ø–∫–æ—Ä–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤¬ª",
        "description": "–ó–∞–∫—Ä–µ–ø–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä—É–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.",
        "content": "–í—Å–ø–æ–º–Ω–∏—Ç–µ –º–æ–º–µ–Ω—Ç —Å–∏–ª—ã –≤ –∂–∏–∑–Ω–∏, –≤—Å–ø–æ–º–Ω–∏—Ç–µ —Ç–µ–ª–µ—Å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ '—è–∫–æ—Ä—å' –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ–º –∫ —Ä—É–∫–µ, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
        "hearts_cost": 10,
        "premium_only": True
    },
    {
        "title": "üåô –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏",
        "description": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è.",
        "content": "–ü–µ—Ä–µ–¥ —Å–Ω–æ–º –æ—Ç–≤–µ—Ç—å—Ç–µ —Å–µ–±–µ: —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ? –ß—Ç–æ —è –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å –∑–∞–≤—Ç—Ä–∞?",
        "hearts_cost": 0,
        "premium_only": False
    },
    {
        "title": "üìñ –ü–∏—Å—å–º–æ —Å–∞–º–æ–º—É —Å–µ–±–µ –≤ –±—É–¥—É—â–µ–µ",
        "description": "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è.",
        "content": "–ù–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ —Å–≤–æ–µ–º—É '—è' —á–µ—Ä–µ–∑ –≥–æ–¥. –ö–∞–∫–∏–µ —Å–æ–≤–µ—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ –¥–∞—Ç—å? –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?",
        "hearts_cost": 5,
        "premium_only": True
    },
    {
        "title": "üõ†Ô∏è –¢–µ—Ö–Ω–∏–∫–∞ '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫—Ä—É–≥–∞ –∑–∞–±–æ—Ç'",
        "description": "–†–∞–∑–¥–µ–ª—è–π—Ç–µ, —á—Ç–æ –≤—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç–µ, –∞ —á—Ç–æ ‚Äî –Ω–µ—Ç.",
        "content": "–°–æ—Å—Ç–∞–≤—å—Ç–µ –¥–≤–∞ —Å–ø–∏—Å–∫–∞: —á—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—Å, –∏ —á—Ç–æ –Ω–µ—Ç. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—Ö –≤ –≤–∞—à–µ–π –∑–æ–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—è.",
        "hearts_cost": 8,
        "premium_only": True
    },
]

SHOP_ITEMS = [
    {
        "name": "üìö –ö–Ω–∏–≥–∞ '–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–º'",
        "description": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ —Å —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º.",
        "price": 50,
        "type": "digital"
    },
    {
        "name": "üéß –ê—É–¥–∏–æ–º–µ–¥–∏—Ç–∞—Ü–∏—è",
        "description": "30-–º–∏–Ω—É—Ç–Ω–∞—è –∞—É–¥–∏–æ–º–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è.",
        "price": 30,
        "type": "digital"
    },
    {
        "name": "üíé 1 –¥–µ–Ω—å –ø—Ä–µ–º–∏—É–º–∞",
        "description": "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏.",
        "price": 20,
        "type": "premium"
    },
    {
        "name": "üßò –ì–∞–π–¥ '–ö–∞–∫ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è'",
        "description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–Ω—è—Ç–∏—é —Å—Ç—Ä–µ—Å—Å–∞ –∑–∞ 5 –º–∏–Ω—É—Ç.",
        "price": 40,
        "type": "digital"
    },
    {
        "name": "üìù –®–∞–±–ª–æ–Ω –ö–æ–ª–µ—Å–∞ –ë–∞–ª–∞–Ω—Å–∞",
        "description": "–ì–æ—Ç–æ–≤—ã–π pdf –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∂–∏–∑–Ω–∏.",
        "price": 25,
        "type": "digital"
    },
    {
        "name": "üéß –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω–∞",
        "description": "–ê—É–¥–∏–æ—Ç—Ä–µ–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.",
        "price": 35,
        "type": "digital"
    },
    {
        "name": "üìà –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –º–µ—Å—è—Ü",
        "description": "–ú–∏–Ω–∏-–∫—É—Ä—Å –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é.",
        "price": 50,
        "type": "digital"
    },
    {
        "name": "üé≠ –¢–µ—Å—Ç '–í–∞—à –∞—Ä—Ö–µ—Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏'",
        "description": "–û–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
        "price": 30,
        "type": "digital"
    },
    {
        "name": "üíé 7 –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞",
        "description": "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏.",
        "price": 100,
        "type": "premium"
    },
    {
        "name": "üíé 30 –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞",
        "description": "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏.",
        "price": 350,
        "type": "premium"
    },
    {
        "name": "üåü –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —á–∞—Ç–µ",
        "description": "1 –ª–∏—á–Ω—ã–π –º–∏–Ω–∏-–æ—Ç–≤–µ—Ç –æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞.",
        "price": 60,
        "type": "service"
    },
    {
        "name": "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏",
        "description": "–ß–µ–∫-–ª–∏—Å—Ç —Ç–µ—Ö–Ω–∏–∫ –±–æ—Ä—å–±—ã —Å –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ–º.",
        "price": 20,
        "type": "digital"
    },
    {
        "name": "üîÆ –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç: –ú–∞—Ä–∞—Ñ–æ–Ω",
        "description": "7-–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ä–æ—Å—Ç–∞.",
        "price": 75,
        "type": "digital"
    },
]

DAILY_CHALLENGES = [
    {
        "title": "üßò 5 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
        "description": "–ù–∞–π–¥–∏—Ç–µ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ, –∑–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏.",
        "duration": 300,  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        "reward": 15
    },
    {
        "title": "üìù 3 –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
        "description": "–ó–∞–ø–∏—à–∏—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è.",
        "duration": 180,
        "reward": 10
    },
    {
        "title": "üö∂ –ü—Ä–æ–≥—É–ª–∫–∞ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "description": "–í—ã–π–¥–∏—Ç–µ –Ω–∞ —É–ª–∏—Ü—É –Ω–∞ 20 –º–∏–Ω—É—Ç –∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–º–∞ –∏–ª–∏ –≤ –∫–∞—Ä–º–∞–Ω–µ.",
        "duration": 1200,
        "reward": 20
    },
    {
        "title": "üé∂ –°–ª—É—à–∞–π—Ç–µ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É",
        "description": "–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —É –≤–∞—Å —Ä–∞–¥–æ—Å—Ç—å, –∏ –ø–æ—Å–ª—É—à–∞–π—Ç–µ 10 –º–∏–Ω—É—Ç.",
        "duration": 600,
        "reward": 15
    },
    {
        "title": "üßπ –£–±–æ—Ä–∫–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —É—á–∞—Å—Ç–∫–∞",
        "description": "–ù–∞–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ –∏–ª–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.",
        "duration": 900,
        "reward": 20
    },
    {
        "title": "üìö –ß—Ç–µ–Ω–∏–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å–µ–≥–æ 5 —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–æ–ª–Ω–æ–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å—é.",
        "duration": 600,
        "reward": 15
    },
    {
        "title": "üñçÔ∏è –ù–∞—Ä–∏—Å—É–π—Ç–µ —á—Ç–æ-—Ç–æ –¥–ª—è —Å–µ–±—è",
        "description": "–ù–∞—Ä–∏—Å—É–π—Ç–µ –ª—é–±–æ–π —Å–∫–µ—Ç—á, –Ω–µ –¥—É–º–∞—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ. –ü—Ä–æ—Å—Ç–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞.",
        "duration": 900,
        "reward": 20
    },
    {
        "title": "üíß –í–æ–¥–∞ –≤–º–µ—Å—Ç–æ —Å–ª–∞–¥–∫–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤",
        "description": "–¶–µ–ª—ã–π –¥–µ–Ω—å ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç–∞—è –≤–æ–¥–∞ –≤–º–µ—Å—Ç–æ —Å–æ–∫–æ–≤, –∫–æ—Ñ–µ –∏ –≥–∞–∑–∏—Ä–æ–≤–∫–∏.",
        "duration": 86400,
        "reward": 30
    },
    {
        "title": "üôå –ü–æ–º–æ–≥–∏—Ç–µ –∫–æ–º—É-—Ç–æ",
        "description": "–ü–æ–º–æ–≥–∏—Ç–µ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –±–µ—Å–∫–æ—Ä—ã—Å—Ç–Ω–æ (–ø–æ–º–æ—â—å –¥—Ä—É–≥—É, –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç, —Å–æ–≤–µ—Ç).",
        "duration": 1800,
        "reward": 20
    },
    {
        "title": "üìµ –¶–µ–ª—ã–π –≤–µ—á–µ—Ä –±–µ–∑ —Å–æ—Ü—Å–µ—Ç–µ–π",
        "description": "–ù–µ –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ —Å–æ—Ü—Å–µ—Ç–∏ –ø–æ—Å–ª–µ 19:00 –¥–æ —Å–Ω–∞.",
        "duration": 18000,
        "reward": 25
    },
    {
        "title": "üõå –†–∞–Ω–Ω–∏–π –æ—Ç—Ö–æ–¥ –∫–æ —Å–Ω—É",
        "description": "–õ—è–≥—Ç–µ —Å–ø–∞—Ç—å –¥–æ 22:30 –∏ –Ω–µ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–∞–¥–∂–µ—Ç–∞–º–∏ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞.",
        "duration": 28800,
        "reward": 30
    },
    {
        "title": "üåû –ü—Ä–∞–∫—Ç–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ —É—Ç—Ä–æ–º",
        "description": "–ü—Ä–æ—Å–Ω—É–≤—à–∏—Å—å, –∑–∞–ø–∏—à–∏—Ç–µ 1 –≤–µ—â—å, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã.",
        "duration": 300,
        "reward": 10
    },
]

# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = Table(
    "users",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("telegram_id", BigInteger, unique=True, nullable=False, index=True),
    Column("full_name", String(100)),
    Column("username", String(100)),
    Column("gender", String(10)),
    Column("name", String(100)),
    Column("hearts", Integer, default=10),
    Column("is_premium", Boolean, default=False),
    Column("user_type", String(20), default="free"),  # free/trial/premium
    Column("is_admin", Boolean, default=False),
    Column("trial_started_at", DateTime(timezone=True)),
    Column("subscription_expires_at", DateTime(timezone=True)),
    Column("created_at", DateTime(timezone=True), server_default=func.now()),
    Column("last_activity_at", DateTime(timezone=True), onupdate=func.now()),
    Column("daily_requests", Integer, default=0),
    Column("total_requests", Integer, default=0),
    Column("request_tokens", Integer, default=0),  # –¢–æ–∫–µ–Ω—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    Column("is_banned", Boolean, default=False),
    Column("diary_password", String(100)),
    Column("last_diary_reward", DateTime(timezone=True)),
    Column("referral_code", String(20), unique=True),
    Column("referrer_id", BigInteger),
    Column("referrals_count", Integer, default=0),
    Column("last_referral_date", DateTime(timezone=True)),
    Column("level", Integer, default=1),
    Column("experience", Integer, default=0),
    Column("premium_purchases", Integer, default=0),
)

# –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
payments = Table(
    "payments",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("amount", Float),
    Column("currency", String(10)),
    Column("item_id", String(50)),
    Column("status", String(20), default="pending"),
    Column("payment_method", String(20)),
    Column("transaction_hash", String(100)),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("confirmed_at", DateTime),
)

# –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
diary_entries = Table(
    "diary_entries",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("entry_text", Text),
    Column("mood", String(20)),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—ã—á–µ–∫
habits = Table(
    "habits",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("title", String(100)),
    Column("description", String(500)),
    Column("reminder_time", String(10)),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("target_date", DateTime),
    Column("is_completed", Boolean, default=False),
)

# –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
habit_completions = Table(
    "habit_completions",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("habit_id", Integer),
    Column("proof_text", Text),
    Column("proof_photo", String(200)),
    Column("completed_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
promo_codes = Table(
    "promo_codes",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("code", String(20), unique=True),
    Column("discount_percent", Integer),
    Column("valid_until", DateTime),
    Column("uses_remaining", Integer),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("description", String(200)),
)

# –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
admin_tasks = Table(
    "admin_tasks",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("title", String(100)),
    Column("description", Text),
    Column("reward", Integer),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("expires_at", DateTime),
)

# –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
completed_tasks = Table(
    "completed_tasks",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("task_id", Integer),
    Column("user_id", BigInteger),
    Column("completed_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_messages = Table(
    "user_messages",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("message_text", Text),
    Column("is_ai_response", Boolean, default=False),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# ==========================================
# üß† –°–æ—Å—Ç–æ—è–Ω–∏—è FSM (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
# ==========================================

class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_gender = State()
    waiting_for_diary_entry = State()
    waiting_for_diary_password = State()
    waiting_for_habit_title = State()
    waiting_for_habit_description = State()
    waiting_for_habit_time = State()
    waiting_for_habit_target = State()
    waiting_for_ai_question = State()
    waiting_for_promo_code = State()
    waiting_for_payment_method = State()
    waiting_for_trx_hash = State()
    waiting_for_task_proof = State()

class AdminStates(StatesGroup):
    waiting_for_premium_username = State()
    waiting_for_ban_user = State()
    waiting_for_unban_user = State()
    waiting_for_hearts_data = State()
    creating_challenge = State()
    creating_task = State()
    creating_promo = State()
    waiting_for_promo_code = State()
    waiting_for_promo_discount = State()
    waiting_for_promo_expiry = State()
    waiting_for_promo_uses = State()
    waiting_for_task_title = State()
    waiting_for_task_description = State()
    waiting_for_task_reward = State()
    waiting_for_task_expiry = State()

# ==========================================
# üèÜ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚Äî –ß–µ–ª–ª–µ–Ω–¥–∂–∏, –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è, –ú–∞–≥–∞–∑–∏–Ω—ã
# ==========================================

# üèÜ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ß–µ–ª–ª–µ–Ω–¥–∂–∏ (DAILY_TASKS)
DAILY_TASKS = [
    "üßò 10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
    "üìµ 1 —á–∞—Å –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    "üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏",
    "üèÉ –ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ 20 –º–∏–Ω—É—Ç",
    "‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å 3 –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
    "üßπ –ü—Ä–∏–±—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ",
    "üíß –í—ã–ø–∏—Ç—å 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã",
    "üò¥ –õ–µ—á—å —Å–ø–∞—Ç—å –¥–æ 23:00",
    "üé® –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ",
    "üéµ –ü–æ—Å–ª—É—à–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É 15 –º–∏–Ω—É—Ç"
]

# üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (PSYCHOLOGY_FEATURES)
PSYCHOLOGY_FEATURES = [
    {"title": "‚öñÔ∏è –ö–æ–ª–µ—Å–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞", "description": "–û—Ü–µ–Ω–∏ 8 —Å—Ñ–µ—Ä —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∏ –Ω–∞–π–¥–∏ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞."},
    {"title": "üôè –î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏", "description": "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞–ø–∏—Å—ã–≤–∞–π 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω."},
    {"title": "üåÄ –î–µ—Ç–æ–∫—Å –æ—Ç —Ç—Ä–µ–≤–æ–≥–∏", "description": "–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞."},
    {"title": "ü¶∏ –¢–µ—Å—Ç –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏", "description": "–£–∑–Ω–∞–π, –∫–∞–∫–æ–π –∞—Ä—Ö–µ—Ç–∏–ø –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –≤ —Ç–≤–æ—ë–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ."},
    {"title": "üåô –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞", "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–µ–≥–æ —Å–Ω–∞."},
    {"title": "üß™ –¢–µ—Å—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞", "description": "–ü—Ä–æ–≤–µ—Ä—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–µ–π—á–∞—Å —É—è–∑–≤–∏–º –∫ —Å—Ç—Ä–µ—Å—Å—É."}
]

# üõí –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏ (HEARTS_SHOP_ITEMS)
HEARTS_SHOP_ITEMS = [
    {"name": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 1 –¥–µ–Ω—å", "price": 20, "days": 1},
    {"name": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 7 –¥–Ω–µ–π", "price": 100, "days": 7},
    {"name": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π", "price": 350, "days": 30},
]

# üõçÔ∏è –ü–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å–≥–∏ (PAID_SHOP_ITEMS)
PAID_SHOP_ITEMS = [
    {"name": "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "price_usd": 5},
    {"name": "üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "price_usd": 3},
    {"name": "‚ôå –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø", "price_usd": 2},
]

# üåü –ü—Ä–µ–º–∏—É–º-–º–∞–≥–∞–∑–∏–Ω –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ (PREMIUM_SHOP_ITEMS)
PREMIUM_SHOP_ITEMS = [
    {"name": "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π", "price_usd": 10},
    {"name": "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 90 –¥–Ω–µ–π", "price_usd": 25},
    {"name": "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥", "price_usd": 79},
]

# ü§ñ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI GPT
AI_MODEL = "gpt-3.5-turbo"  # —Ä–µ–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
AI_PUBLIC_MODEL_NAME = "GPT-4o"  # —á—Ç–æ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
AI_SYSTEM_PROMPT = (
    "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. "
    "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –¥–∞—Ç—å —Å–æ–≤–µ—Ç ‚Äî –¥–∞–≤–∞–π –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
)

# ==========================================
# üõ†Ô∏è –•–µ–ª–ø–µ—Ä—ã (–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞)
# ==========================================

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user(telegram_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    try:
        async with async_session() as session:
            result = await session.execute(
                text("SELECT * FROM users WHERE telegram_id = :telegram_id"),
                {"telegram_id": telegram_id}
            )
            user = result.mappings().first()
            return dict(user) if user else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def create_user(telegram_id: int, full_name: str, username: Optional[str] = None) -> Optional[Dict[str, Any]]:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        referral_code = hashlib.sha256(
            f"{telegram_id}{datetime.now(timezone.utc).timestamp()}".encode()
        ).hexdigest()[:8]

        now = datetime.now(timezone.utc)
        trial_expires = now + timedelta(days=3)  # 3 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

        user_data = {
            "telegram_id": telegram_id,
            "full_name": full_name,
            "username": username,
            "hearts": 10,
            "level": 1,
            "experience": 0,
            "trial_started_at": now,
            "subscription_expires_at": trial_expires,
            "user_type": "trial",
            "created_at": now,
            "last_activity_at": now,
            "referral_code": referral_code,
        }

        async with async_session.begin() as session:
            await session.execute(users.insert().values(**user_data))

        return await get_user(telegram_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def update_user(telegram_id: int, **kwargs) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with async_session.begin() as session:
            await session.execute(
                users.update().where(users.c.telegram_id == telegram_id).values(**kwargs)
            )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def add_hearts(telegram_id: int, amount: int) -> bool:
    """–ù–∞—á–∏—Å–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        async with async_session.begin() as session:
            await session.execute(
                users.update()
                .where(users.c.telegram_id == telegram_id)
                .values(hearts=users.c.hearts + amount)
            )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–µ—Ä–¥–µ—á–µ–∫: {e}")
        return False

async def add_experience(telegram_id: int, exp: int) -> bool:
    """–ù–∞—á–∏—Å–ª–∏—Ç—å –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        user = await get_user(telegram_id)
        if not user:
            return False

        new_exp = user.get("experience", 0) + exp
        new_level = user.get("level", 1)

        while new_exp >= 100:
            new_exp -= 100
            new_level += 1

        async with async_session.begin() as session:
            await session.execute(
                users.update()
                .where(users.c.telegram_id == telegram_id)
                .values(level=new_level, experience=new_exp)
            )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞: {e}")
        return False

async def check_ai_limits(user: Dict[str, Any]]) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI"""
    if user["is_banned"]:
        return False, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    if user["user_type"] == "free":
        return False, ("üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.\n"
                     "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
    
    if user["user_type"] == "trial":
        if user["total_requests"] >= 22:
            return False, ("‚ö†Ô∏è –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ (22/22).\n"
                         "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")
        if user["request_tokens"] >= 11000:  # 22*500
            return False, ("‚ö†Ô∏è –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.\n"
                         "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤.")
    
    if user["user_type"] == "premium":
        if user["daily_requests"] >= 20:
            return False, ("‚ö†Ô∏è –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (20/20).\n"
                         "–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.")
        if user["request_tokens"] >= 24000:  # 30*800
            return False, ("‚ö†Ô∏è –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤.\n"
                         "–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞.")
    
    return True, ""

async def get_usd_rate() -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USDT –∫ —Ä—É–±–ª—é"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("https://api.exchangerate-api.com/v4/latest/USD")
            data = response.json()
            return data["rates"]["RUB"]
    except Exception:
        return 90.0  # Fallback –∫—É—Ä—Å

async def validate_promo_code(code: str) -> Optional[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        async with async_session() as session:
            result = await session.execute(
                text("SELECT * FROM promo_codes WHERE code = :code AND "
                    "(uses_remaining > 0 OR uses_remaining IS NULL) AND "
                    "(valid_until > NOW() OR valid_until IS NULL)"),
                {"code": code}
            )
            promo = result.mappings().first()
            return dict(promo) if promo else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        return None

async def use_promo_code(code: str) -> bool:
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (—É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)"""
    try:
        async with async_session.begin() as session:
            await session.execute(
                promo_codes.update()
                .where(promo_codes.c.code == code)
                .values(uses_remaining=promo_codes.c.uses_remaining - 1)
            )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        return False

# –í—ã–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
def get_random_daily_task() -> str:
    return random.choice(DAILY_TASKS)

# ==========================================
# üéõÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (InlineKeyboardMarkup)
# ==========================================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology_menu"),
         InlineKeyboardButton(text="üìî –î–Ω–µ–≤–Ω–∏–∫", callback_data="diary_menu")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏", callback_data="habits_menu"),
         InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop_menu")],
        [InlineKeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è", callback_data="daily_challenge"),
         InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É GPT-4o", callback_data="ask_ai")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"),
         InlineKeyboardButton(text="üèÜ –£—Ä–æ–≤–µ–Ω—å", callback_data="level_progress")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ú–µ–Ω—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
def get_psychology_keyboard():
    buttons = []
    for feature in PSYCHOLOGY_FEATURES:
        buttons.append([InlineKeyboardButton(text=feature["title"], callback_data=f"psy_{feature['title']}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
def get_shop_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="hearts_shop")],
        [InlineKeyboardButton(text="üí≥ –ü–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="paid_shop")],
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="premium_shop")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ú–∞–≥–∞–∑–∏–Ω –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏
def get_hearts_shop_keyboard():
    buttons = []
    for item in HEARTS_SHOP_ITEMS:
        buttons.append([InlineKeyboardButton(text=f"{item['name']} - {item['price']}üíñ", callback_data=f"buy_hearts_{item['days']}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ú–∞–≥–∞–∑–∏–Ω –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
def get_paid_shop_keyboard():
    buttons = []
    for item in PAID_SHOP_ITEMS:
        buttons.append([InlineKeyboardButton(text=f"{item['name']} - {item['price_usd']}$", callback_data=f"buy_paid_{item['name']}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏—É–º–∞ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏
def get_premium_shop_keyboard():
    buttons = []
    for item in PREMIUM_SHOP_ITEMS:
        buttons.append([InlineKeyboardButton(text=f"{item['name']} - {item['price_usd']}$", callback_data=f"buy_premium_{item['name']}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_back_to_main_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
    )

# ==========================================
# üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Handlers)
# ==========================================

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referral_code = None
    if len(message.text.split()) > 1:
        referral_code = message.text.split()[1]

    user = await get_user(message.from_user.id)

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await create_user(
            telegram_id=message.from_user.id,
            full_name=message.from_user.full_name,
            username=message.from_user.username,
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        if referral_code:
            async with async_session() as session:
                result = await session.execute(
                    text("SELECT telegram_id FROM users WHERE referral_code = :code"),
                    {"code": referral_code}
                )
                referrer = result.scalar()
                
                if referrer and referrer != message.from_user.id:
                    await update_user(
                        referrer,
                        referrals_count=users.c.referrals_count + 1,
                        last_referral_date=datetime.now(timezone.utc),
                    )
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    await add_hearts(referrer, 15)
                    # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º —Ä–µ—Ñ–µ—Ä–µ—Ä—É –Ω–∞ 2 –¥–Ω—è
                    await extend_premium(referrer, days=2)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    await show_loading_animation(message.chat.id)

    if not user.get("name") or not user.get("gender"):
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ–ª–∞ - –ø—Ä–æ—Å–∏–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        await state.set_state(UserStates.waiting_for_name)
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.\n"
            "–ö–∞–∫ –º–Ω–µ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è):"
        )
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await show_profile(message.from_user.id, message.chat.id)

async def show_loading_animation(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏"""
    steps = [
        "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...",
        "üß† –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...",
        "üíñ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é...",
        "üéØ –ì–æ—Ç–æ–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
        "‚ú® –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!",
    ]
    msg = None
    for step in steps:
        if msg:
            await msg.edit_text(step)
        else:
            msg = await bot.send_message(chat_id, step)
        await asyncio.sleep(1.5)
    if msg:
        await msg.delete()

@router.message(StateFilter(UserStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2 or len(name) > 20:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await update_user(message.from_user.id, name=name)
    await state.set_state(UserStates.waiting_for_gender)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="ü§∑ –î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=keyboard
    )

@router.message(StateFilter(UserStates.waiting_for_gender))
async def process_gender(message: Message, state: FSMContext):
    gender = message.text.strip()
    if gender not in ["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π", "ü§∑ –î—Ä—É–≥–æ–µ"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    gender_map = {
        "üë® –ú—É–∂—Å–∫–æ–π": "male",
        "üë© –ñ–µ–Ω—Å–∫–∏–π": "female",
        "ü§∑ –î—Ä—É–≥–æ–µ": "other"
    }
    
    await update_user(message.from_user.id, gender=gender_map[gender])
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await show_profile(message.from_user.id, message.chat.id)
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )

async def show_profile(user_id: int, chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(user_id)
    if not user:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_type = {
        "free": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
        "trial": "–ü—Ä–æ–±–Ω—ã–π",
        "premium": "–ü—Ä–µ–º–∏—É–º"
    }.get(user["user_type"], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    now = datetime.now(timezone.utc)
    if user["subscription_expires_at"] and user["subscription_expires_at"] > now:
        expires_in = (user["subscription_expires_at"] - now).days
        subscription_status = f"üîπ –ê–∫—Ç–∏–≤–Ω–∞ ({expires_in} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)"
    else:
        subscription_status = "üî∏ –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã AI
    if user["user_type"] == "free":
        ai_limits = "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
    elif user["user_type"] == "trial":
        remaining = 22 - user["total_requests"]
        ai_limits = (
            f"üîπ {remaining}/22 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é\n"
            f"üî∏ –î–æ 500 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å"
        )
    else:  # premium
        remaining = 20 - user["daily_requests"]
        saved_requests = min(user.get("saved_requests", 0), 150 - user["daily_requests"])
        ai_limits = (
            f"üíé {remaining + saved_requests}/20+{saved_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è\n"
            f"‚ú® –î–æ 800 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å"
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ {html.bold(user['name'])}\n"
        f"üîπ –£—Ä–æ–≤–µ–Ω—å: {user['level']} ({user['experience']}/100 XP)\n"
        f"üíñ –°–µ—Ä–¥–µ—á–∫–∏: {user['hearts']}\n\n"
        f"üéüÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_type}\n"
        f"{subscription_status}\n\n"
        f"üß† {AI_PUBLIC_MODEL_NAME} –¥–æ—Å—Ç—É–ø:\n"
        f"{ai_limits}\n\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at'].strftime('%d.%m.%Y')}"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    buttons = [
        [InlineKeyboardButton(text="üìî –î–Ω–µ–≤–Ω–∏–∫", callback_data="diary_menu"),
         InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏", callback_data="habits_menu")],
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="premium_menu"),
         InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress"),
         InlineKeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="daily_challenges")],
        [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology_menu"),
         InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop_menu")],
    ]
    
    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏
    if user["is_admin"]:
        buttons.append([InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await bot.send_message(
        chat_id,
        profile_text,
        reply_markup=keyboard
    )
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@router.callback_query(F.data == "admin_panel")
async def admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user = await get_user(callback.from_user.id)
    if not user or not user["is_admin"]:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    text = (
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    buttons = [
        [InlineKeyboardButton(text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_view_user")],
        [InlineKeyboardButton(text="‚õî –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_ban_user"),
         InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unban_user")],
        [InlineKeyboardButton(text="üíñ –ù–∞—á–∏—Å–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="admin_add_hearts")],
        [InlineKeyboardButton(text="üíé –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin_add_premium")],
        [InlineKeyboardButton(text="üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_create_task")],
        [InlineKeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")],
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_actions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    user = await get_user(callback.from_user.id)
    if not user or not user["is_admin"]:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    action = callback.data.split("_")[1]
    
    if action == "view":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
        await state.set_state(AdminStates.waiting_for_premium_username)
    elif action == "ban":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:"
        )
        await state.set_state(AdminStates.waiting_for_ban_user)
    elif action == "unban":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:"
        )
        await state.set_state(AdminStates.waiting_for_unban_user)
    elif action == "add":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—á–µ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
            "–ü—Ä–∏–º–µ—Ä: @username 100"
        )
        await state.set_state(AdminStates.waiting_for_hearts_data)
    elif action == "create":
        if callback.data.endswith("task"):
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
            )
            await state.set_state(AdminStates.waiting_for_task_title)
        elif callback.data.endswith("promo"):
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
            )
            await state.set_state(AdminStates.waiting_for_promo_code)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(StateFilter(AdminStates.waiting_for_premium_username))
async def admin_view_user(message: Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    identifier = message.text.strip()
    user = await find_user(identifier)
    
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    text = (
        f"üë§ {html.bold(user.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏'))}\n"
        f"üÜî ID: {user['telegram_id']}\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at'].strftime('%d.%m.%Y')}\n"
        f"üíñ –°–µ—Ä–¥–µ—á–∫–∏: {user['hearts']}\n"
        f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {'–ü—Ä–µ–º–∏—É–º' if user['is_premium'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n"
        f"üîπ –£—Ä–æ–≤–µ–Ω—å: {user['level']}\n"
        f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_activity_at'].strftime('%d.%m.%Y %H:%M')}\n"
        f"‚õî –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–∞–Ω–µ–Ω' if user['is_banned'] else '–ê–∫—Ç–∏–≤–µ–Ω'}"
    )
    
    await message.answer(text)
    await state.clear()

@router.message(StateFilter(AdminStates.waiting_for_ban_user))
async def admin_ban_user(message: Message, state: FSMContext):
    """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    identifier = message.text.strip()
    user = await find_user(identifier)
    
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    if user["is_banned"]:
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
        await state.clear()
        return
    
    await update_user(user["telegram_id"], is_banned=True)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('name', '')} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.")
    await state.clear()

@router.message(StateFilter(AdminStates.waiting_for_unban_user))
async def admin_unban_user(message: Message, state: FSMContext):
    """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    identifier = message.text.strip()
    user = await find_user(identifier)
    
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    if not user["is_banned"]:
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        await state.clear()
        return
    
    await update_user(user["telegram_id"], is_banned=False)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('name', '')} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    await state.clear()

async def find_user(identifier: str) -> Optional[Dict[str, Any]]:
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ ID"""
    try:
        async with async_session() as session:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
            if identifier.isdigit():
                result = await session.execute(
                    text("SELECT * FROM users WHERE telegram_id = :id"),
                    {"id": int(identifier)}
                )
                user = result.mappings().first()
                if user:
                    return dict(user)
            
            # –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            if identifier.startswith("@"):
                identifier = identifier[1:]
            
            # –ò—â–µ–º –ø–æ username
            result = await session.execute(
                text("SELECT * FROM users WHERE username = :username"),
                {"username": identifier}
            )
            user = result.mappings().first()
            return dict(user) if user else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
@router.callback_query(F.data == "diary_menu")
async def diary_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–Ω–µ–≤–Ω–∏–∫—É.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å
    if not user.get("diary_password"):
        await callback.message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–Ω–µ–≤–Ω–∏–∫—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–æ—Ç 4 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        await state.set_state(UserStates.waiting_for_diary_password)
        await callback.answer()
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    await callback.message.answer(
        "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–Ω–µ–≤–Ω–∏–∫—É:"
    )
    await state.set_state(UserStates.waiting_for_diary_password)
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_diary_password))
async def process_diary_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    user = await get_user(message.from_user.id)
    if not user:
        await state.clear()
        return
    
    password = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π
    if not user.get("diary_password"):
        if len(password) < 4:
            await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        await update_user(message.from_user.id, diary_password=password)
        await message.answer(
            "üîí –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫.",
            reply_markup=get_back_to_profile_keyboard()
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    if password != user["diary_password"]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞
    await state.clear()
    await show_diary_menu(message.from_user.id, message.chat.id)

async def show_diary_menu(user_id: int, chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚úçÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="diary_new_entry")],
        [InlineKeyboardButton(text="üìÜ –ó–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å", callback_data="diary_view_day"),
         InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="diary_view_week")],
        [InlineKeyboardButton(text="üóìÔ∏è –ó–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü", callback_data="diary_view_month")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")],
    ]
    
    await bot.send_message(
        chat_id,
        "üìî –í–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫. –í—Å–µ –∑–∞–ø–∏—Å–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@router.callback_query(F.data == "diary_new_entry")
async def diary_new_entry(callback: CallbackQuery, state: FSMContext):
    """–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    await callback.message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è."
    )
    await state.set_state(UserStates.waiting_for_diary_entry)
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_diary_entry))
async def process_diary_entry(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    entry_text = message.text.strip()
    if len(entry_text) < 50:
        await message.answer("–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    user = await get_user(message.from_user.id)
    if not user:
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è
    now = datetime.now(timezone.utc)
    if user.get("last_diary_reward") and (now - user["last_diary_reward"]).days < 1:
        reward = 0
        reward_text = ""
    else:
        reward = 10
        reward_text = f"\n\n+{reward} üíñ –∑–∞ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å —Å–µ–≥–æ–¥–Ω—è!"
        await update_user(message.from_user.id, last_diary_reward=now)
        await add_hearts(message.from_user.id, reward)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    async with async_session.begin() as session:
        await session.execute(
            diary_entries.insert().values(
                user_id=message.from_user.id,
                entry_text=entry_text,
                mood="neutral",
                created_at=now
            )
        )
    
    await message.answer(
        f"üìî –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!{reward_text}\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {await count_diary_entries(message.from_user.id)}",
        reply_markup=get_back_to_profile_keyboard()
    )
    await state.clear()

async def count_diary_entries(user_id: int) -> int:
    """–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT COUNT(*) FROM diary_entries WHERE user_id = :user_id"),
            {"user_id": user_id}
        )
        return result.scalar()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫
@router.callback_query(F.data == "habits_menu")
async def habits_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    habits_count = await count_habits(callback.from_user.id)
    completed_today = await count_completed_habits_today(callback.from_user.id)
    
    text = (
        "‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏ –∏ —Ü–µ–ª–∏\n\n"
        f"üîπ –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {habits_count}\n"
        f"üî∏ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {completed_today}\n\n"
        "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Å–µ—Ä–¥–µ—á–∫–∏ –∏ –æ–ø—ã—Ç!"
    )
    
    buttons = [
        [InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", callback_data="habit_new")],
        [InlineKeyboardButton(text="üìù –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habit_list")],
        [InlineKeyboardButton(text="üèÜ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="habit_completed")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")],
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data == "habit_new")
async def habit_new(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏–ª–∏ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞'):"
    )
    await state.set_state(UserStates.waiting_for_habit_title)
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_habit_title))
async def process_habit_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    if len(message.text.strip()) < 3:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    await state.update_data(title=message.text.strip())
    await message.answer(
        "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ —Ü–µ–ª—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ:"
    )
    await state.set_state(UserStates.waiting_for_habit_description)

@router.message(StateFilter(UserStates.waiting_for_habit_description))
async def process_habit_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    if len(message.text.strip()) < 10:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(description=message.text.strip())
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="08:00"), KeyboardButton(text="12:00")],
            [KeyboardButton(text="18:00"), KeyboardButton(text="21:00")],
            [KeyboardButton(text="–ù–µ –Ω—É–∂–Ω–æ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
        reply_markup=keyboard
    )
    await state.set_state(UserStates.waiting_for_habit_time)

@router.message(StateFilter(UserStates.waiting_for_habit_time))
async def process_habit_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≤—ã—á–∫–∏"""
    time_str = message.text.strip()
    reminder_time = None
    
    if time_str != "–ù–µ –Ω—É–∂–Ω–æ":
        if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_str):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30).")
            return
        reminder_time = time_str
    
    data = await state.get_data()
    await state.clear()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É
    async with async_session.begin() as session:
        await session.execute(
            habits.insert().values(
                user_id=message.from_user.id,
                title=data["title"],
                description=data["description"],
                reminder_time=reminder_time,
                created_at=datetime.now(timezone.utc)
            )
        )
    
    await message.answer(
        f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{data['title']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await show_habits_list(message.from_user.id, message.chat.id)

async def show_habits_list(user_id: int, chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM habits WHERE user_id = :user_id ORDER BY created_at DESC"),
            {"user_id": user_id}
        )
        habits_list = result.mappings().all()
    
    if not habits_list:
        await bot.send_message(
            chat_id,
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!",
            reply_markup=get_back_to_profile_keyboard()
        )
        return
    
    text = "üìù –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Ü–µ–ª–∏:\n\n"
    buttons = []
    
    for i, habit in enumerate(habits_list, 1):
        text += f"{i}. {habit['title']}\n"
        buttons.append([
            InlineKeyboardButton(
                text=f"‚úÖ {habit['title']}",
                callback_data=f"habit_complete_{habit['id']}")
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="habits_menu")])
    
    await bot.send_message(
        chat_id,
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

async def count_habits(user_id: int) -> int:
    """–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤—ã—á–µ–∫"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT COUNT(*) FROM habits WHERE user_id = :user_id"),
            {"user_id": user_id}
        )
        return result.scalar()

async def count_completed_habits_today(user_id: int) -> int:
    """–ü–æ—Å—á–∏—Ç–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    today = datetime.now(timezone.utc).date()
    async with async_session() as session:
        result = await session.execute(
            text("""
                SELECT COUNT(*) FROM habit_completions hc
                JOIN habits h ON hc.habit_id = h.id
                WHERE h.user_id = :user_id AND DATE(hc.completed_at) = :today
            """),
            {"user_id": user_id, "today": today}
        )
        return result.scalar()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–º–∏—É–º —Ä–∞–∑–¥–µ–ª–∞
@router.callback_query(F.data == "premium_menu")
async def premium_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    now = datetime.now(timezone.utc)
    is_premium = user["is_premium"] and user["subscription_expires_at"] > now
    
    if is_premium:
        expires_in = (user["subscription_expires_at"] - now).days
        text = (
            f"üíé –í–∞—à–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n\n"
            f"üîπ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {expires_in}\n"
            f"üî∏ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ {AI_PUBLIC_MODEL_NAME}: 20/–¥–µ–Ω—å\n"
            f"‚ú® –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: 800 —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞! ‚ù§Ô∏è"
        )
    else:
        text = (
            f"üîí –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞\n\n"
            f"üîπ –î–æ—Å—Ç—É–ø –∫ {AI_PUBLIC_MODEL_NAME} –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
            f"üî∏ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            f"‚ú® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞!"
        )
    
    buttons = [
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="premium_buy")],
    ]
    
    if is_premium:
        buttons.append([InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="premium_gift")])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data == "premium_buy")
async def premium_buy(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    now = datetime.now(timezone.utc)
    is_premium = user["is_premium"] and user["subscription_expires_at"] > now
    
    if is_premium:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return
    
    text = (
        "üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        "1 –º–µ—Å—è—Ü - 299 —Ä—É–±.\n"
        "3 –º–µ—Å—è—Ü–∞ - 799 —Ä—É–±. (—ç–∫–æ–Ω–æ–º–∏—è 10%)\n"
        "6 –º–µ—Å—è—Ü–µ–≤ - 1399 —Ä—É–±. (—ç–∫–æ–Ω–æ–º–∏—è 20%)\n"
        "12 –º–µ—Å—è—Ü–µ–≤ - 2399 —Ä—É–±. (—ç–∫–æ–Ω–æ–º–∏—è 30%)\n\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    
    buttons = [
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 299 —Ä—É–±.", callback_data="premium_1")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 799 —Ä—É–±.", callback_data="premium_3")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 1399 —Ä—É–±.", callback_data="premium_6")],
        [InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤ - 2399 —Ä—É–±.", callback_data="premium_12")],
        [InlineKeyboardButton(text="üéÅ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="premium_promo")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="premium_menu")],
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("premium_"))
async def process_premium_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if callback.data == "premium_promo":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
        await state.set_state(UserStates.waiting_for_promo_code)
        await callback.answer()
        return
    
    months = int(callback.data.split("_")[1])
    prices = {1: 299, 3: 799, 6: 1399, 12: 2399}
    price = prices.get(months, 299)
    
    await state.update_data(months=months, price=price, discount=0)
    
    text = (
        f"üíé –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤)\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} —Ä—É–±.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    buttons = [
        [InlineKeyboardButton(text="üí≥ –ÆMoney", callback_data=f"pay_yoomoney_{months}")],
        [InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT)", callback_data=f"pay_crypto_{months}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="premium_buy")],
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pay_"))
async def process_payment_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    method, months = callback.data.split("_")[1], int(callback.data.split("_")[2])
    prices = {1: 299, 3: 799, 6: 1399, 12: 2399}
    price = prices.get(months, 299)
    
    if method == "yoomoney":
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆMoney
        await callback.message.answer(
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã {months} –º–µ—Å—è—Ü–µ–≤ –ø—Ä–µ–º–∏—É–º–∞ ({price} —Ä—É–±.):\n\n"
            f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {price} —Ä—É–±. –Ω–∞ –Ω–æ–º–µ—Ä {YOOMONEY_WALLET}\n"
            "2. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: {callback.from_user.id}\n"
            "3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ @admin"
        )
    elif method == "crypto":
        usd_rate = await get_usd_rate()
        usd_amount = round(price / usd_rate, 2)
        
        await callback.message.answer(
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã {months} –º–µ—Å—è—Ü–µ–≤ –ø—Ä–µ–º–∏—É–º–∞ ({price} —Ä—É–±. ‚âà {usd_amount} USDT):\n\n"
            f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {usd_amount} USDT (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å:\n"
            f"<code>{TRON_ADDRESS}</code>\n"
            "2. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TXID)"
        )
        await state.set_state(UserStates.waiting_for_trx_hash)
    
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_trx_hash))
async def process_trx_hash(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    trx_hash = message.text.strip()
    if len(trx_hash) < 10:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
        return
    
    data = await state.get_data()
    months = data.get("months", 1)
    price = data.get("price", 299)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
    async with async_session.begin() as session:
        await session.execute(
            payments.insert().values(
                user_id=message.from_user.id,
                amount=price,
                currency="RUB",
                item_id=f"premium_{months}",
                status="pending",
                payment_method="crypto",
                transaction_hash=trx_hash,
                created_at=datetime.now(timezone.utc)
            )
        )
    
    await message.answer(
        "üîÑ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 15 –º–∏–Ω—É—Ç.\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        reply_markup=get_back_to_profile_keyboard()
    )
    await state.clear()
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
@router.callback_query(F.data == "referrals")
async def referrals_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    ref_count = user.get("referrals_count", 0)
    ref_link = f"https://t.me/{bot._me.username}?start={user['referral_code']}"
    
    text = (
        "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
        f"üîπ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {ref_count}\n"
        f"üî∏ –ú–∞–∫—Å–∏–º—É–º –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {min(ref_count, 5)}/5\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n"
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {ref_link}\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞:\n"
        "‚ûï 15 —Å–µ—Ä–¥–µ—á–µ–∫\n"
        "‚ûï 2 –¥–Ω—è –ø—Ä–µ–º–∏—É–º–∞"
    )
    
    buttons = [
        [InlineKeyboardButton(text="üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="ref_copy")],
        [InlineKeyboardButton(text="üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="ref_list")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")],
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        disable_web_page_preview=True
    )
    await callback.answer()

@router.callback_query(F.data == "ref_copy")
async def copy_referral_link(callback: CallbackQuery):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    ref_link = f"https://t.me/{bot._me.username}?start={user['referral_code']}"
    await callback.answer(f"–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {ref_link}", show_alert=True)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫
@router.callback_query(F.data == "psychology_menu")
async def psychology_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    now = datetime.now(timezone.utc)
    is_premium = user["is_premium"] and user["subscription_expires_at"] > now
    
    text = "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
    
    buttons = []
    for practice in PSYCHOLOGY_PRACTICES:
        if practice["premium_only"] and not is_premium:
            continue
        
        btn_text = practice["title"]
        if practice["hearts_cost"] > 0:
            btn_text += f" ({practice['hearts_cost']}üíñ)"
        
        buttons.append([
            InlineKeyboardButton(
                text=btn_text,
                callback_data=f"psy_{PSYCHOLOGY_PRACTICES.index(practice)}")
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("psy_"))
async def show_practice(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø—Ä–∞–∫—Ç–∏–∫—É"""
    practice_idx = int(callback.data.split("_")[1])
    if practice_idx >= len(PSYCHOLOGY_PRACTICES):
        await callback.answer("–ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    practice = PSYCHOLOGY_PRACTICES[practice_idx]
    user = await get_user(callback.from_user.id)
    
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    now = datetime.now(timezone.utc)
    is_premium = user["is_premium"] and user["subscription_expires_at"] > now
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if practice["premium_only"] and not is_premium:
        await callback.answer(
            "–≠—Ç–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            show_alert=True
        )
        return
    
    if practice["hearts_cost"] > 0 and user["hearts"] < practice["hearts_cost"]:
        await callback.answer(
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–¥–µ—á–µ–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ.",
            show_alert=True
        )
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å - —Å–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Ä–¥–µ—á–∫–∏
    if practice["hearts_cost"] > 0:
        await add_hearts(callback.from_user.id, -practice["hearts_cost"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
    await callback.message.answer(
        f"üß† {practice['title']}\n\n{practice['content']}\n\n"
        "–•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —ç—Ç—É —Ç–µ—Ö–Ω–∏–∫—É —Å AI-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –û–±—Å—É–¥–∏—Ç—å —Å AI", callback_data=f"psyai_{practice_idx}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
        ])
    )
    await callback.answer()
    
# –û–±—Ä–∞–±–æ—Ç—á–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
@router.callback_query(F.data == "shop_menu")
async def shop_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    text = (
        "üõç –ú–∞–≥–∞–∑–∏–Ω\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['hearts']} üíñ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    
    buttons = [
        [InlineKeyboardButton(text="üìö –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="shop_digital")],
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="shop_premium")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")],
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data == "shop_digital")
async def shop_digital(callback: CallbackQuery):
    """–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    text = "üìö –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    
    buttons = []
    for item in [i for i in SHOP_ITEMS if i["type"] == "digital"]:
        buttons.append([
            InlineKeyboardButton(
                text=f"{item['name']} - {item['price']}üíñ",
                callback_data=f"shop_item_{SHOP_ITEMS.index(item)}")
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop_menu")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("shop_item_"))
async def shop_item(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞"""
    item_idx = int(callback.data.split("_")[2])
    if item_idx >= len(SHOP_ITEMS):
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    item = SHOP_ITEMS[item_idx]
    user = await get_user(callback.from_user.id)
    
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if user["hearts"] < item["price"]:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–¥–µ—á–µ–∫.", show_alert=True)
        return
    
    text = (
        f"üõç {item['name']}\n\n"
        f"{item['description']}\n\n"
        f"–¶–µ–Ω–∞: {item['price']} üíñ\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['hearts']} üíñ"
    )
    
    buttons = [
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_item_{item_idx}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop_digital")],
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("buy_item_"))
async def buy_item(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
    item_idx = int(callback.data.split("_")[2])
    if item_idx >= len(SHOP_ITEMS):
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    item = SHOP_ITEMS[item_idx]
    user = await get_user(callback.from_user.id)
    
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if user["hearts"] < item["price"]:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–¥–µ—á–µ–∫.", show_alert=True)
        return
    
    # –°–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–¥–µ—á–µ–∫
    await add_hearts(callback.from_user.id, -item["price"])
    
    # –í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞
    if item["type"] == "digital":
        await callback.message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n"
            f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: {item['name']}\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: https://example.com/download\n"
            "–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞."
        )
    elif item["type"] == "premium":
        await extend_premium(callback.from_user.id, days=1)
        await callback.message.answer(
            "üéâ –í–∞—à –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å!"
        )
    
    await callback.answer()
    
# –û–±—Ä–∞–±–æ—Ç—á–∫–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —á–µ–ª–µ–Ω–¥–∂–µ–π 
@router.callback_query(F.data == "daily_challenges")
async def daily_challenges(callback: CallbackQuery):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–ª–∏ –ø–æ –¥–∞—Ç–µ)
    today = datetime.now(timezone.utc).date()
    challenge_idx = hash(str(today)) % len(DAILY_CHALLENGES)
    challenge = DAILY_CHALLENGES[challenge_idx]
    
    text = (
        f"üéØ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —á–µ–ª–ª–µ–Ω–¥–∂: {challenge['title']}\n\n"
        f"{challenge['description']}\n\n"
        f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {challenge['duration']//60} –º–∏–Ω—É—Ç\n"
        f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {challenge['reward']} üíñ"
    )
    
    buttons = [
        [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂", callback_data=f"start_challenge_{challenge_idx}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")],
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("start_challenge_"))
async def start_challenge(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    challenge_idx = int(callback.data.split("_")[2])
    if challenge_idx >= len(DAILY_CHALLENGES):
        await callback.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    challenge = DAILY_CHALLENGES[challenge_idx]
    await state.update_data(challenge_idx=challenge_idx, start_time=datetime.now(timezone.utc))
    
    await callback.message.edit_text(
        f"‚è≥ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞–ª—Å—è!\n\n{challenge['title']}\n\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å {challenge['duration']//60} –º–∏–Ω—É—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
        "–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_challenge")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "finish_challenge")
async def finish_challenge(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    data = await state.get_data()
    challenge_idx = data.get("challenge_idx")
    start_time = data.get("start_time")
    
    if challenge_idx is None or start_time is None:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞.")
        return
    
    challenge = DAILY_CHALLENGES[challenge_idx]
    elapsed = (datetime.now(timezone.utc) - start_time).total_seconds()
    
    if elapsed < challenge["duration"]:
        await callback.answer("–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!", show_alert=True)
        return
    
    # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await add_hearts(callback.from_user.id, challenge["reward"])
    await add_experience(callback.from_user.id, 5)
    
    await callback.message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ {challenge['reward']} üíñ\n\n"
        f"{challenge['title']}\n"
        f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed//60} –º–∏–Ω—É—Ç",
        reply_markup=get_back_to_profile_keyboard()
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    user_id = message.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ invoice_payload
    if payment.invoice_payload.startswith("premium_"):
        months = int(payment.invoice_payload.split("_")[1])
        await extend_premium(user_id, months * 30)  # 30 –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        
        await message.answer(
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤!\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
    async with async_session.begin() as session:
        await session.execute(
            payments.insert().values(
                user_id=user_id,
                amount=payment.total_amount // 100,
                currency=payment.currency,
                item_id=payment.invoice_payload,
                status="completed",
                payment_method="yoomoney",
                created_at=datetime.now(timezone.utc),
                confirmed_at=datetime.now(timezone.utc)
            )
        )

async def extend_premium(user_id: int, days: int) -> bool:
    """–ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
    user = await get_user(user_id)
    if not user:
        return False
    
    now = datetime.now(timezone.utc)
    if user["subscription_expires_at"] and user["subscription_expires_at"] > now:
        new_expires = user["subscription_expires_at"] + timedelta(days=days)
    else:
        new_expires = now + timedelta(days=days)
    
    await update_user(
        user_id,
        is_premium=True,
        user_type="premium",
        subscription_expires_at=new_expires,
        premium_purchases=users.c.premium_purchases + 1
    )
    return True

# –í—Å–ø–æ–º–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ "–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å"
def get_back_to_profile_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]]
    )

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    await show_profile(callback.from_user.id, callback.message.chat.id)
    await callback.answer()
    
# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

# –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
@router.callback_query(F.data == "psychology_menu")
async def open_psychology(callback: CallbackQuery):
    await callback.message.edit_text(
        "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
        reply_markup=get_psychology_keyboard()
    )
    await callback.answer()

# –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω
@router.callback_query(F.data == "shop_menu")
async def open_shop(callback: CallbackQuery):
    await callback.message.edit_text(
        "üõç –ú–∞–≥–∞–∑–∏–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:",
        reply_markup=get_shop_keyboard()
    )
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è
@router.callback_query(F.data == "daily_challenge")
async def daily_challenge(callback: CallbackQuery):
    task = get_random_daily_task()
    await callback.message.edit_text(
        f"üéØ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —á–µ–ª–ª–µ–Ω–¥–∂:\n\n{task}\n\n"
        "–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ –Ω–∞–≥—Ä–∞–¥—É! üíñ",
        reply_markup=get_back_to_main_keyboard()
    )
    # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
    await add_hearts(callback.from_user.id, 3)
    await add_experience(callback.from_user.id, 10)
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
@router.callback_query(F.data == "level_progress")
async def show_level(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    text = (
        f"üèÜ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user.get('level', 1)}\n"
        f"üîπ –û–ø—ã—Ç: {user.get('experience', 0)} / 100\n"
        "–ö–∞–∂–¥—ã–µ 100 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞ ‚Äî –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!"
    )
    await callback.message.edit_text(text, reply_markup=get_back_to_main_keyboard())
    await callback.answer()

# –°–ø—Ä–æ—Å–∏—Ç—å —É AI GPT-4o
@router.callback_query(F.data == "ask_ai")
async def ask_ai(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–∏ –∑–Ω–∞–Ω–∏—è –Ω–∞ –±–∞–∑–µ GPT-4o. üß†",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.set_state(UserStates.waiting_for_ai_question)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è AI
@router.message(StateFilter(UserStates.waiting_for_ai_question))
async def process_ai_question(message: Message, state: FSMContext):
    question = message.text

    await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    response_text = await ask_openai(question)

    await message.answer(
        f"üîÆ –û—Ç–≤–µ—Ç GPT-4o:\n\n{response_text}",
        reply_markup=get_main_menu_keyboard()
    )

    await add_experience(message.from_user.id, 20)  # –ó–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
    await state.clear()

# –ó–∞—â–∏—Ç–∞ –¥–ª—è –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
@router.message(F.text)
async def check_crisis_messages(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫—Ä–∏–∑–∏—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    text = message.text.lower()
    if any(keyword in text for keyword in CRISIS_KEYWORDS):
        await message.answer(
            "–Ø –≤–∏–∂—É, —á—Ç–æ –≤–∞–º —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é:\n\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
            "üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: @psyhelpbot\n\n"
            "–í—ã –Ω–µ –æ–¥–Ω–∏, –∏ –≤–∞—à–∞ –∂–∏–∑–Ω—å –≤–∞–∂–Ω–∞! üíô"
        )
        return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫—Ä–∏–∑–∏—Å–Ω–æ–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await process_regular_message(message)

async def process_regular_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    pass

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI
async def ask_openai(prompt: str) -> str:
    url = "https://api.openai.com/v1/chat/completions"

    headers = {
        "Authorization": f"Bearer {CRYPTO_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": AI_MODEL,
        "messages": [
            {"role": "system", "content": AI_SYSTEM_PROMPT},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 500
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=payload, headers=headers)
            data = response.json()
            return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
        return "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ==========================================
# üõí –ú–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–∫—É–ø–∫–∏ (–ø—Ä–µ–º–∏—É–º, —Å–µ—Ä–¥–µ—á–∫–∏, –ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
# ==========================================

@router.callback_query(F.data == "hearts_shop")
async def open_hearts_shop(callback: CallbackQuery):
    await callback.message.edit_text(
        "üíñ –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞ –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏:",
        reply_markup=get_hearts_shop_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "premium_shop")
async def open_premium_shop(callback: CallbackQuery):
    await callback.message.edit_text(
        "üíé –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏:",
        reply_markup=get_premium_shop_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "paid_shop")
async def open_paid_shop(callback: CallbackQuery):
    await callback.message.edit_text(
        "üõí –ü–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=get_paid_shop_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("buy_hearts_"))
async def buy_premium_by_hearts(callback: CallbackQuery):
    days = int(callback.data.split("_")[-1])
    cost = next((item["price"] for item in HEARTS_SHOP_ITEMS if item["days"] == days), None)

    user = await get_user(callback.from_user.id)
    if user["hearts"] < cost:
        await callback.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–¥–µ—á–µ–∫.", show_alert=True)
        return

    now = datetime.utcnow()
    expires_at = now + timedelta(days=days)

    async with async_session.begin() as session:
        await session.execute(
            users.update()
            .where(users.c.telegram_id == callback.from_user.id)
            .values(
                is_premium=True,
                subscription_expires_at=expires_at,
                hearts=users.c.hearts - cost
            )
        )

    await callback.message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π!",
        reply_markup=get_back_to_main_keyboard()
    )
    await callback.answer()

# ==========================================
# ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (cron) ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
# ==========================================

@aiocron.crontab('0 9 * * *')  # –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 –ú–°–ö
async def send_morning_challenge():
    logger.info("–£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...")
    try:
        async with async_session() as session:
            result = await session.execute(text("SELECT telegram_id FROM users WHERE is_banned = false"))
            users_list = result.scalars().all()

        task = get_random_daily_task()

        for user_id in users_list:
            try:
                await bot.send_message(
                    user_id,
                    f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\nüéØ –í–∞—à —á–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è:\n\n{task}\n\n–í—ã–ø–æ–ª–Ω—è–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å–µ—Ä–¥–µ—á–∫–∏! üíñ"
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")

@aiocron.crontab('0 18 * * *')  # –ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –≤ 18:00 –ú–°–ö
async def send_evening_challenge():
    logger.info("–í–µ—á–µ—Ä–Ω–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...")
    try:
        async with async_session() as session:
            result = await session.execute(text("SELECT telegram_id FROM users WHERE is_banned = false"))
            users_list = result.scalars().all()

        task = get_random_daily_task()

        for user_id in users_list:
            try:
                await bot.send_message(
                    user_id,
                    f"üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!\n\nüéØ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞ –≤–µ—á–µ—Ä:\n\n{task}\n\n–ó–∞–≤–µ—Ä—à–∏ –¥–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ! üíñ"
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")

# ==========================================
# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
# ==========================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@router.errors()
async def global_error_handler(event: ErrorEvent):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {event.exception}")
    if isinstance(event.update, Message):
        await event.update.answer("‚ùå –û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    elif isinstance(event.update, CallbackQuery):
        await event.update.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_default_commands(bot: Bot):
    await bot.set_my_commands([
        BotCommand(command="start", description="üîµ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
    ])

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await set_default_commands(bot)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
        async with engine.begin() as conn:
            await conn.run_sync(metadata.create_all)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        await engine.dispose()

def run_fastapi():
    uvicorn.run("webhook:app", host="0.0.0.0", port=8000, reload=False)

if __name__ == "__main__":
    Thread(target=run_fastapi, daemon=True).start()
    asyncio.run(main())