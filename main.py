import os
import logging
import asyncio
import random
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, BotCommand, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import text, MetaData, Table, Column, Integer, String, Boolean, DateTime, BigInteger, Float
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
import httpx
from decimal import Decimal, getcontext

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è Decimal
getcontext().prec = 8

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
TRIAL_DAYS = 3
TRIAL_DAILY_LIMIT = 12
PREMIUM_DAILY_LIMIT = 20
FREE_WEEKLY_LIMIT = 20
HEARTS_PER_DAY = 5
CHALLENGE_REWARD = 5  # –°–µ—Ä–¥–µ—á–µ–∫ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
CHALLENGE_DURATION = 120  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (2 –º–∏–Ω—É—Ç—ã)
REFERRAL_REWARD = 20  # –°–µ—Ä–¥–µ—á–µ–∫ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
REFERRAL_TRIAL_DAYS = 3  # –î–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ

# –ß–µ–ª–ª–µ–Ω–¥–∂–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
CHALLENGES = [
    {
        "title": "üå¨Ô∏è –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 4-7-8 –¥—ã—Ö–∞–Ω–∏–µ: 4 —Å–µ–∫ –≤–¥–æ—Ö, 7 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∞, 8 —Å–µ–∫ –≤—ã–¥–æ—Ö. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 5 —Ü–∏–∫–ª–æ–≤.",
        "duration": 120
    },
    {
        "title": "üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—É–ª–∫–∞ —Å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å—é",
        "description": "–ü—Ä–æ–≥—É–ª—è–π—Ç–µ—Å—å 2 –º–∏–Ω—É—Ç—ã, –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥ –∏ –æ–∫—Ä—É–∂–∞—é—â–∏–µ –∑–≤—É–∫–∏.",
        "duration": 120
    },
    {
        "title": "üí™ –ú–∏–Ω–∏-–∑–∞—Ä—è–¥–∫–∞",
        "description": "–°–¥–µ–ª–∞–π—Ç–µ 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π, 10 –Ω–∞–∫–ª–æ–Ω–æ–≤ –∏ 10 –≤—Ä–∞—â–µ–Ω–∏–π —Ä—É–∫–∞–º–∏.",
        "duration": 120
    },
    {
        "title": "üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è",
        "description": "–°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç.",
        "duration": 120
    },
    {
        "title": "üîÑ –ü–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ",
        "description": "–ó–∞–ø–∏—à–∏—Ç–µ 3 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞ –¥–Ω—è –∏ 1 —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.",
        "duration": 120
    },
    {
        "title": "üéµ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ",
        "description": "–í–∫–ª—é—á–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É –∏ —Å–ª—É—à–∞–π—Ç–µ –µ–µ 2 –º–∏–Ω—É—Ç—ã, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—è—Å—å –Ω–∞ –∑–≤—É–∫–∞—Ö.",
        "duration": 120
    },
    {
        "title": "üíß –ü–∏—Ç—å–µ–≤–∞—è –ø–∞—É–∑–∞",
        "description": "–ú–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—è—Å—å –Ω–∞ –∫–∞–∂–¥–æ–º –≥–ª–æ—Ç–∫–µ.",
        "duration": 120
    },
    {
        "title": "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è",
        "description": "–ó–∞–ø–∏—à–∏—Ç–µ 3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–∞–∫ –≤—ã –∏—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ.",
        "duration": 120
    }
]

# –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö
SUBSCRIPTION_PRICES = {
    "1_month": 299,
    "3_months": 749,
    "6_months": 1299,
    "1_year": 2199
}

# –°–∫–∏–¥–∫–∏ –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏ (–º–∞–∫—Å–∏–º—É–º 15%)
HEARTS_DISCOUNTS = {
    100: 5,   # 5% —Å–∫–∏–¥–∫–∞ –∑–∞ 100 —Å–µ—Ä–¥–µ—á–µ–∫
    200: 10,  # 10% —Å–∫–∏–¥–∫–∞ –∑–∞ 200 —Å–µ—Ä–¥–µ—á–µ–∫
    300: 15   # 15% —Å–∫–∏–¥–∫–∞ –∑–∞ 300 —Å–µ—Ä–¥–µ—á–µ–∫
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
SHOP_ITEMS = [
    {
        "id": "extra_requests",
        "title": "üìà –î–æ–ø. –∑–∞–ø—Ä–æ—Å—ã",
        "description": "10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò\n\n–ü–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±–æ—Ç–∞, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã.",
        "price": 30,
        "type": "requests"
    },
    {
        "id": "motivation",
        "title": "üíå –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ",
        "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –ò–ò\n\n–ü–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Å–∏–ª—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.",
        "price": 50,
        "type": "content"
    },
    {
        "id": "analysis",
        "title": "üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        "description": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n\n–ü–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –Ω–∞–π—Ç–∏ –ø—É—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.",
        "price": 70,
        "type": "analysis"
    },
    {
        "id": "therapy_session",
        "title": "üß† –°–µ—Å—Å–∏—è —Å –ò–ò-—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º",
        "description": "30-–º–∏–Ω—É—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –ò–ò-—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º\n\n–ü–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —ç–º–æ—Ü–∏—è—Ö –∏ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏—è.",
        "price": 100,
        "type": "therapy"
    },
    {
        "id": "sleep_guide",
        "title": "üåô –ì–∏–¥ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞",
        "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞\n\n–°–æ–≤–µ—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–Ω–∞.",
        "price": 80,
        "type": "guide"
    },
    {
        "id": "stress_relief",
        "title": "üåÄ –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        "description": "7-–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–∞\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        "price": 120,
        "type": "program"
    }
]

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
PAYMENT_DETAILS = {
    "crypto": {
        "TRC20_USDT": "TMrLxEVr1sd5UCYB2iQXpj7GM3K5KdXTCP",
        "BTC": "1LsTXcXRzRQyjixURhPRRAPCe4qJb8pEmG"
    },
    "yoomoney": {
        "account": "4100119110059662",
        "comment": "–ü–û–î–î–ï–†–ñ–ö–ê –∏ –≤–∞—à @username.\n"
        "–ü–†–ò–ú–ï–†: –ü–û–î–î–ï–†–ñ–ö–ê Ivansokolov"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DB_URL = os.getenv("DB_URL")
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "").split(",") if id.strip()]
CRYPTO_API_KEY = os.getenv("CRYPTO_API_KEY")

if not all([BOT_TOKEN, DB_URL]):
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
engine = create_async_engine(DB_URL, echo=True)
async_session = async_sessionmaker(engine, expire_on_commit=False)
metadata = MetaData()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
users = Table(
    "users",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("telegram_id", BigInteger, unique=True, nullable=False),
    Column("full_name", String(100)),
    Column("username", String(100)),
    Column("is_premium", Boolean, default=False),
    Column("is_admin", Boolean, default=False),
    Column("trial_started_at", DateTime),
    Column("subscription_expires_at", DateTime),
    Column("hearts", Integer, default=HEARTS_PER_DAY),
    Column("total_requests", Integer, default=0),
    Column("last_request_date", DateTime),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("is_banned", Boolean, default=False),
    Column("completed_challenges", Integer, default=0),
    Column("last_challenge_time", DateTime),
    Column("active_challenge", String(200), nullable=True),
    Column("challenge_started_at", DateTime, nullable=True),
    Column("extra_requests", Integer, default=0),
    Column("referral_code", String(20), nullable=True),
    Column("referred_by", BigInteger, nullable=True),
    Column("ip_address", String(45), nullable=True)
)

# –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
payments = Table(
    "payments",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("amount", Float),
    Column("currency", String(10)),
    Column("payment_method", String(20)),
    Column("transaction_id", String(100)),
    Column("status", String(20), default="pending"),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("completed_at", DateTime, nullable=True),
)

# –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
admin_actions = Table(
    "admin_actions",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("admin_id", BigInteger),
    Column("action", String(50)),
    Column("target_user_id", BigInteger),
    Column("details", String(200)),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_messages = Table(
    "user_messages",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("message_text", String(1000)),
    Column("is_ai_response", Boolean, default=False),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ü–∏–π
promotions = Table(
    "promotions",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("title", String(100)),
    Column("description", String(500)),
    Column("promo_code", String(20), unique=True),
    Column("discount_percent", Integer),
    Column("hearts_reward", Integer),
    Column("start_date", DateTime),
    Column("end_date", DateTime),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def setup_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    async with engine.begin() as conn:
        await conn.run_sync(metadata.create_all)
        logger.info("–¢–∞–±–ª–∏—Ü—ã –ë–î –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")

async def get_user(telegram_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM users WHERE telegram_id = :telegram_id"),
            {"telegram_id": telegram_id}
        )
        row = result.mappings().first()
        return dict(row) if row else None

async def get_user_by_username(username: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM users WHERE username = :username"),
            {"username": username.replace('@', '')}
        )
        row = result.mappings().first()
        return dict(row) if row else None

async def create_user(telegram_id: int, full_name: str, username: str = None, is_admin: bool = False, referred_by: int = None, ip_address: str = None) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        referral_code = f"REF{random.randint(1000, 9999)}"
        user_data = {
            "telegram_id": telegram_id,
            "full_name": full_name,
            "username": username,
            "is_admin": is_admin,
            "trial_started_at": datetime.utcnow() if not is_admin else None,
            "hearts": HEARTS_PER_DAY,
            "last_request_date": datetime.utcnow(),
            "referral_code": referral_code,
            "referred_by": referred_by,
            "ip_address": ip_address
        }
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏
        if referred_by:
            user_data["trial_started_at"] = datetime.utcnow()
            user_data["hearts"] = HEARTS_PER_DAY + REFERRAL_REWARD
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            referrer = await get_user(referred_by)
            if referrer:
                await session.execute(
                    text("UPDATE users SET hearts = hearts + :reward WHERE telegram_id = :telegram_id"),
                    {"reward": REFERRAL_REWARD, "telegram_id": referred_by}
                )
        
        result = await session.execute(
            users.insert().values(**user_data).returning(users)
        )
        await session.commit()
        return dict(result.mappings().first())

async def update_user(telegram_id: int, **kwargs) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        await session.execute(
            users.update()
            .where(users.c.telegram_id == telegram_id)
            .values(**kwargs)
        )
        await session.commit()
        return True

async def log_admin_action(admin_id: int, action: str, target_user_id: int = None, details: str = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞"""
    async with async_session() as session:
        await session.execute(
            admin_actions.insert().values(
                admin_id=admin_id,
                action=action,
                target_user_id=target_user_id,
                details=details
            )
        )
        await session.commit()

async def check_subscription(user: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not user or user.get('is_banned'):
        return False
    if user.get('is_admin'):
        return True
    if user.get('is_premium') and user.get('subscription_expires_at') and user['subscription_expires_at'] > datetime.utcnow():
        return True
    if user.get('trial_started_at') and (datetime.utcnow() - user['trial_started_at']).days <= TRIAL_DAYS:
        return True
    return False

async def check_request_limit(user: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if not user:
        return False
    if user.get('is_admin'):
        return True
        
    today = datetime.utcnow().date()
    last_request = user.get('last_request_date')
    
    # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    if last_request is None or last_request.date() != today:
        await update_user(
            user['telegram_id'], 
            total_requests=0,
            last_request_date=datetime.utcnow(),
            hearts=HEARTS_PER_DAY
        )
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∏ trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user.get('is_premium'):
        return user.get('total_requests', 0) < (PREMIUM_DAILY_LIMIT + user.get('extra_requests', 0))
    elif user.get('trial_started_at'):
        return user.get('total_requests', 0) < TRIAL_DAILY_LIMIT
    
    return False

async def get_ai_response(prompt: str, max_tokens: int = 500) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥–ª—É—à–∫—É"""
    if not OPENAI_API_KEY:
        return (
            "üß† <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /challenge –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    crisis_keywords = ["—Å—É–∏—Ü–∏–¥", "—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ", "–ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å"]
    if any(keyword in prompt.lower() for keyword in crisis_keywords):
        return (
            "üíô <b>–Ø –≤–∏–∂—É, —á—Ç–æ –≤–∞–º —Å–µ–π—á–∞—Å —Ç—è–∂–µ–ª–æ</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º:\n\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
            "üë®‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n\n"
            "–í—ã –Ω–µ –æ–¥–Ω–∏, –ø–æ–º–æ—â—å —Ä—è–¥–æ–º!"
        )
    
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Å —ç–º–ø–∞—Ç–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. "
                 "–ù–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑—ã, –Ω–æ –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ë—É–¥—å —Ç–µ–ø–ª—ã–º –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return (
            "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /challenge –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!"
        )

async def can_get_challenge(user: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂"""
    if not user:
        return False
        
    last_challenge = user.get('last_challenge_time')
    if last_challenge is None:
        return True
        
    now = datetime.utcnow()
    return (now - last_challenge) >= timedelta(hours=12)

async def complete_challenge(user_id: int):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        user = await get_user(user_id)
        if user and user.get('active_challenge'):
            new_hearts = user.get('hearts', 0) + CHALLENGE_REWARD
            await session.execute(
                users.update()
                .where(users.c.telegram_id == user_id)
                .values(
                    hearts=new_hearts,
                    completed_challenges=user.get('completed_challenges', 0) + 1,
                    last_challenge_time=datetime.utcnow(),
                    active_challenge=None,
                    challenge_started_at=None
                )
            )
            await session.commit()
            return new_hearts
    return None

async def get_crypto_rate(crypto: str) -> Optional[Decimal]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    try:
        async with httpx.AsyncClient() as client:
            if crypto == "BTC":
                url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=rub"
                response = await client.get(url)
                data = response.json()
                return Decimal(str(data["bitcoin"]["rub"]))
            elif crypto == "USDT":
                url = "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub"
                response = await client.get(url)
                data = response.json()
                return Decimal(str(data["tether"]["rub"]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ {crypto}: {e}")
        return None

async def calculate_crypto_amount(rub_amount: Decimal, crypto: str) -> Optional[Decimal]:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ"""
    rate = await get_crypto_rate(crypto)
    if not rate:
        return None
    return (rub_amount / rate).quantize(Decimal('0.00000001'))

async def check_crypto_payment(address: str, expected_amount: Decimal, crypto: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ API –±–ª–æ–∫—á–µ–π–Ω–∞
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
    return True

async def get_recent_users(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT username, created_at FROM users ORDER BY created_at DESC LIMIT :limit"),
            {"limit": limit}
        )
        return [dict(row) for row in result.mappings()]

async def get_user_messages(user_id: int, days: int = 1) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT message_text, created_at FROM user_messages WHERE user_id = :user_id AND created_at >= NOW() - INTERVAL ':days days' ORDER BY created_at DESC"),
            {"user_id": user_id, "days": days}
        )
        return [dict(row) for row in result.mappings()]

async def create_promotion(title: str, description: str, promo_code: str, discount_percent: int, hearts_reward: int, start_date: datetime, end_date: datetime):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞–∫—Ü–∏—é"""
    async with async_session() as session:
        await session.execute(
            promotions.insert().values(
                title=title,
                description=description,
                promo_code=promo_code,
                discount_percent=discount_percent,
                hearts_reward=hearts_reward,
                start_date=start_date,
                end_date=end_date
            )
        )
        await session.commit()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_challenge_keyboard(challenge_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂", callback_data=f"start_{challenge_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_challenge_timer_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚è≥ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="complete_challenge")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_shop_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    buttons = [
        [InlineKeyboardButton(text="üìà –î–æ–ø. –∑–∞–ø—Ä–æ—Å—ã", callback_data="shop_extra_requests")],
        [InlineKeyboardButton(text="üíå –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ", callback_data="shop_motivation")],
        [InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", callback_data="shop_analysis")],
        [InlineKeyboardButton(text="üß† –°–µ—Å—Å–∏—è —Å –ò–ò-—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º", callback_data="shop_therapy_session")],
        [InlineKeyboardButton(text="üåô –ì–∏–¥ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞", callback_data="shop_sleep_guide")],
        [InlineKeyboardButton(text="üåÄ –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="shop_stress_relief")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subscription_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    buttons = [
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 299‚ÇΩ", callback_data="sub_1_month")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 749‚ÇΩ", callback_data="sub_3_months")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 1299‚ÇΩ", callback_data="sub_6_months")],
        [InlineKeyboardButton(text="1 –≥–æ–¥ - 2199‚ÇΩ", callback_data="sub_1_year")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_method_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [InlineKeyboardButton(text="üí≥ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT/BTC)", callback_data="pay_crypto")],
        [InlineKeyboardButton(text="üü£ –ÆMoney", callback_data="pay_yoomoney")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_crypto_choice_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    buttons = [
        [InlineKeyboardButton(text="USDT (TRC20)", callback_data="crypto_usdt")],
        [InlineKeyboardButton(text="Bitcoin (BTC)", callback_data="crypto_btc")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_payment")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞"""
    buttons = [
        [InlineKeyboardButton(text="üë§ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin_premium")],
        [InlineKeyboardButton(text="üíñ –ù–∞—á–∏—Å–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="admin_hearts")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üéÅ –ê–∫—Ü–∏–∏", callback_data="admin_promotions")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_shop_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω"""
    buttons = [
        [InlineKeyboardButton(text="üîô –í –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_shop")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_psychology_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    buttons = [
        [InlineKeyboardButton(text="üí¨ –ß–∞—Ç —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º", callback_data="ai_psychologist")],
        [InlineKeyboardButton(text="üìî –õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫", callback_data="personal_diary")],
        [InlineKeyboardButton(text="üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏–∏", callback_data="meditations")],
        [InlineKeyboardButton(text="üìÖ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="weekly_plan")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await setup_db()
        user = await get_user(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referred_by = None
        if len(message.text.split()) > 1:
            try:
                referred_by = int(message.text.split()[1])
            except ValueError:
                pass
        
        if not user:
            is_admin = message.from_user.id in ADMIN_IDS
            user = await create_user(
                telegram_id=message.from_user.id,
                full_name=message.from_user.full_name,
                username=message.from_user.username,
                is_admin=is_admin,
                referred_by=referred_by,
                ip_address=message.from_user.id  # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å IP
            )
            
            if is_admin:
                reply = (
                    "üëë <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n"
                    "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:"
                )
                await message.answer(reply, reply_markup=get_admin_keyboard(), parse_mode="HTML")
            else:
                reply = (
                    "üåø‚ú® <b>–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!</b> ‚ú®üåø\n\n"
                    "–Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–±–æ—Ç—ã –æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ.\n\n"
                    "üìå <b>–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ—Å—Å–∏—é —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º (–Ω–∞ –±–∞–∑–µ GPT-4o)\n"
                    "‚Ä¢ –í–µ—Å—Ç–∏ –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Å –∑–∞—â–∏—Ç–æ–π –ø–∞—Ä–æ–ª–µ–º\n"
                    "‚Ä¢ –î–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (—á–µ–ª–ª–µ–Ω–¥–∂–∏)\n"
                    "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —ç–º–æ—Ü–∏–∏\n\n"
                    "üéÅ <b>–ë–æ–Ω—É—Å—ã:</b>\n"
                    f"‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ {TRIAL_DAYS} –¥–Ω—è ({TRIAL_DAILY_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å)\n"
                    f"‚Ä¢ {HEARTS_PER_DAY} —Å–µ—Ä–¥–µ—á–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
                    f"‚Ä¢ +{CHALLENGE_REWARD} —Å–µ—Ä–¥–µ—á–µ–∫ –∑–∞ –∫–∞–∂–¥—ã–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂\n"
                    f"‚Ä¢ +{REFERRAL_REWARD} —Å–µ—Ä–¥–µ—á–µ–∫ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞\n\n"
                    "üí° –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /psychology –∏ –æ—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!"
                )
                await message.answer(reply, parse_mode="HTML")
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
                if referred_by:
                    await message.answer(
                        f"üéâ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!</b>\n\n"
                        f"‚Ä¢ +{REFERRAL_REWARD} —Å–µ—Ä–¥–µ—á–µ–∫\n"
                        f"‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {TRIAL_DAYS + REFERRAL_TRIAL_DAYS} –¥–Ω–µ–π\n\n"
                        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –¥—Ä—É–∑–µ–π: "
                        f"https://t.me/{(await bot.get_me()).username}?start={message.from_user.id}",
                        parse_mode="HTML"
                    )
        else:
            if user.get('is_admin'):
                await message.answer("üëë <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>", reply_markup=get_admin_keyboard(), parse_mode="HTML")
            else:
                await show_user_profile(message.from_user.id, message)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_user_profile(user_id: int, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    days_left = TRIAL_DAYS - (datetime.utcnow() - user['trial_started_at']).days if user.get('trial_started_at') else 0
    days_left = max(0, days_left)
    
    if await check_subscription(user):
        status = "üíé –ü—Ä–µ–º–∏—É–º"
        if user.get('subscription_expires_at'):
            expires = user['subscription_expires_at'].strftime("%d.%m.%Y")
            status += f" (–¥–æ {expires})"
        requests_left = PREMIUM_DAILY_LIMIT + user.get('extra_requests', 0) - user.get('total_requests', 0)
        requests_info = f"{user.get('total_requests', 0)}/{PREMIUM_DAILY_LIMIT + user.get('extra_requests', 0)}"
    elif user.get('trial_started_at'):
        status = f"üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({days_left} –¥–Ω.)"
        requests_left = TRIAL_DAILY_LIMIT - user.get('total_requests', 0)
        requests_info = f"{user.get('total_requests', 0)}/{TRIAL_DAILY_LIMIT}"
    else:
        status = "üåø –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
        requests_left = FREE_WEEKLY_LIMIT - user.get('total_requests', 0)
        requests_info = f"{user.get('total_requests', 0)}/{FREE_WEEKLY_LIMIT}"
    
    buttons = [
        [InlineKeyboardButton(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="premium_subscription")],
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–¥–µ—á–µ–∫", callback_data="shop")],
        [InlineKeyboardButton(text="üèÜ –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂", callback_data="get_challenge")],
        [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology_menu")]
    ]
    
    reply = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üìõ –ò–º—è: {user.get('full_name')}\n"
        f"üéØ –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤: {requests_info}\n"
        f"üíñ –°–µ—Ä–¥–µ—á–µ–∫: {user.get('hearts', 0)}\n"
        f"üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂–µ–π: {user.get('completed_challenges', 0)}\n\n"
        f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{(await bot.get_me()).username}?start={user_id}"
    )
    
    await message.answer(
        reply,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    await show_user_profile(message.from_user.id, message)

@router.message(Command("psychology"))
async def cmd_psychology(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    await message.answer(
        "üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_psychology_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "psychology_menu")
async def psychology_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    await callback.message.edit_text(
        "üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_psychology_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "ai_psychologist")
async def ai_psychologist(callback: CallbackQuery):
    """–ß–∞—Ç —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await callback.message.edit_text(
        "üí¨ <b>–ß–∞—Ç —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –∑–¥–µ—Å—å —Å–≤–æ–∏ –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. "
        "–ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥ –Ω–∞ –±–∞–∑–µ GPT-4o –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ.\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.</i>\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ò–ò –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞. "
        "–í —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "personal_diary")
async def personal_diary(callback: CallbackQuery):
    """–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫"""
    await callback.message.edit_text(
        "üìî <b>–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. "
        "–í—Å–µ –∑–∞–ø–∏—Å–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –∑–∞—â–∏—â–µ–Ω—ã.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="new_diary_entry")],
            [InlineKeyboardButton(text="üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="set_diary_password")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(Command("subscription"))
async def cmd_subscription(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if user.get('is_admin'):
        await message.answer("üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return
    
    if user.get('is_banned'):
        await message.answer("üîê –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    
    if user.get('is_premium') and user.get('subscription_expires_at'):
        days_left = (user['subscription_expires_at'] - datetime.utcnow()).days
        if days_left > 0:
            await message.answer(
                f"üíé <b>–£ –≤–∞—Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                f"üîπ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                f"üîπ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user['subscription_expires_at'].strftime('%d.%m.%Y')}\n\n"
                f"üîπ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {PREMIUM_DAILY_LIMIT} –≤ –¥–µ–Ω—å",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ö†Ô∏è <b>–í–∞—à–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                parse_mode="HTML"
            )
    elif user.get('trial_started_at'):
        days_used = (datetime.utcnow() - user['trial_started_at']).days
        days_left = max(0, TRIAL_DAYS - days_used)
        
        await message.answer(
            f"üÜì <b>–£ –≤–∞—Å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b>\n\n"
            f"üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–Ω–µ–π: {days_used}\n"
            f"üîπ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            f"üîπ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {TRIAL_DAILY_LIMIT} –≤ –¥–µ–Ω—å\n\n"
            "üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç:</b>\n"
            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            reply_markup=get_subscription_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "üîí <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"üîπ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {FREE_WEEKLY_LIMIT} –≤ –Ω–µ–¥–µ–ª—é\n\n"
            "üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç:</b>\n"
            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=get_subscription_keyboard(),
            parse_mode="HTML"
        )

@router.message(Command("challenge"))
async def cmd_challenge(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    await handle_challenge(message.from_user.id, message)

async def handle_challenge(user_id: int, message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    user = await get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if user.get('active_challenge'):
        await message.answer(
            "‚è≥ <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {user['active_challenge']}\n\n"
            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.",
            parse_mode="HTML"
        )
        return
    
    if not await can_get_challenge(user):
        next_time = (user['last_challenge_time'] + timedelta(hours=12)).strftime("%H:%M")
        await message.answer(
            f"‚è≥ <b>–°–ª–µ–¥—É—é—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {next_time}</b>\n\n"
            "–ß–µ–ª–ª–µ–Ω–¥–∂–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å - —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º.",
            parse_mode="HTML"
        )
        return
    
    challenge = random.choice(CHALLENGES)
    challenge_id = str(hash(frozenset(challenge.items())))
    
    await update_user(
        user['telegram_id'],
        active_challenge=challenge["title"],
        challenge_started_at=None
    )
    
    await message.answer(
        f"üèÜ <b>–í–∞—à —á–µ–ª–ª–µ–Ω–¥–∂:</b> {challenge['title']}\n\n"
        f"{challenge['description']}\n\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {challenge['duration']} —Å–µ–∫—É–Ω–¥\n"
        f"üíñ –ù–∞–≥—Ä–∞–¥–∞: +{CHALLENGE_REWARD} —Å–µ—Ä–¥–µ—á–µ–∫",
        reply_markup=get_challenge_keyboard(challenge_id),
        parse_mode="HTML"
    )

@router.message(Command("shop"))
async def cmd_shop(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await message.answer(
        "üõç <b>–ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–¥–µ—á–µ–∫</b>\n\n"
        f"üíñ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.get('hearts', 0)} —Å–µ—Ä–¥–µ—á–µ–∫\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_shop_keyboard(),
        parse_mode="HTML"
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ ---
@router.callback_query(F.data == "get_challenge")
async def callback_get_challenge(callback: CallbackQuery):
    """–ö–æ–ª–±—ç–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    await handle_challenge(callback.from_user.id, callback.message)
    await callback.answer()

@router.callback_query(F.data.startswith("start_"))
async def start_challenge(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    challenge_id = callback.data.replace("start_", "")
    challenge = next((c for c in CHALLENGES if str(hash(frozenset(c.items()))) == challenge_id), None)
    
    if not challenge:
        await callback.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await update_user(
        user['telegram_id'],
        challenge_started_at=datetime.utcnow()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
    msg = await callback.message.edit_text(
        f"‚è≥ <b>–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç:</b> {challenge['title']}\n\n"
        f"{challenge['description']}\n\n"
        f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {challenge['duration']} —Å–µ–∫—É–Ω–¥",
        parse_mode="HTML"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    remaining = challenge['duration']
    while remaining > 0:
        await asyncio.sleep(1)
        remaining -= 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ–ª–ª–µ–Ω–¥–∂
        updated_user = await get_user(user['telegram_id'])
        if not updated_user or not updated_user.get('active_challenge'):
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        if remaining % 10 == 0 or remaining <= 5:
            try:
                await bot.edit_message_text(
                    f"‚è≥ <b>–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç:</b> {challenge['title']}\n\n"
                    f"{challenge['description']}\n\n"
                    f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫—É–Ω–¥",
                    chat_id=msg.chat.id,
                    message_id=msg.message_id,
                    parse_mode="HTML"
                )
            except:
                pass
    
    # –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await bot.edit_message_text(
        f"‚è≥ <b>–ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–≤–µ—Ä—à–µ–Ω:</b> {challenge['title']}\n\n"
        f"{challenge['description']}\n\n"
        "‚úÖ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã",
        chat_id=msg.chat.id,
        message_id=msg.message_id,
        reply_markup=get_challenge_timer_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "complete_challenge")
async def finish_challenge(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('active_challenge'):
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞")
        return
    
    challenge = next((c for c in CHALLENGES if c['title'] == user['active_challenge']), None)
    if not challenge:
        await callback.answer("–û—à–∏–±–∫–∞: —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    new_hearts = await complete_challenge(user['telegram_id'])
    if new_hearts is not None:
        await callback.message.edit_text(
            f"üéâ <b>–ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏: {challenge['title']}\n\n"
            f"üíñ –ü–æ–ª—É—á–µ–Ω–æ: +{CHALLENGE_REWARD} —Å–µ—Ä–¥–µ—á–µ–∫\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_hearts} —Å–µ—Ä–¥–µ—á–µ–∫",
            parse_mode="HTML"
        )
    await callback.answer()

@router.callback_query(F.data == "premium_subscription")
async def premium_subscription(callback: CallbackQuery):
    """–ö–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await callback.message.edit_text(
        "üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=get_subscription_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("sub_"))
async def select_subscription(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    sub_type = callback.data.replace("sub_", "")
    price = SUBSCRIPTION_PRICES.get(sub_type)
    
    if not price:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    duration_map = {
        "1_month": "1 –º–µ—Å—è—Ü",
        "3_months": "3 –º–µ—Å—è—Ü–∞",
        "6_months": "6 –º–µ—Å—è—Ü–µ–≤",
        "1_year": "1 –≥–æ–¥"
    }
    
    await callback.message.edit_text(
        f"üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration_map[sub_type]}</b>\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_method_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "pay_crypto")
async def pay_with_crypto(callback: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
    text = (
        "üí≥ <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –∞–¥—Ä–µ—Å–æ–≤:\n\n"
        f"<b>USDT (TRC20):</b>\n<code>{PAYMENT_DETAILS['crypto']['TRC20_USDT']}</code>\n\n"
        f"<b>Bitcoin (BTC):</b>\n<code>{PAYMENT_DETAILS['crypto']['BTC']}</code>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–µ—á–µ–Ω–µ–µ 5-10 –º–∏–Ω—É—Ç."
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "pay_yoomoney")
async def pay_with_yoomoney(callback: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney"""
    text = (
        "üü£ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney</b>\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä: <code>{PAYMENT_DETAILS['yoomoney']['account']}</code>\n\n"
        f"<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n"
        f"<code>{PAYMENT_DETAILS['yoomoney']['comment']}</code>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–µ—á–µ–Ω–µ–µ 5-10 –º–∏–Ω—É—Ç."
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "shop")
async def callback_shop(callback: CallbackQuery):
    """–ö–æ–ª–±—ç–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await callback.message.edit_text(
        "üõç <b>–ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–¥–µ—á–µ–∫</b>\n\n"
        f"üíñ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.get('hearts', 0)} —Å–µ—Ä–¥–µ—á–µ–∫\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_shop_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("shop_"))
async def shop_item(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
    item_id = callback.data.replace("shop_", "")
    item = next((i for i in SHOP_ITEMS if i["id"] == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if user.get('hearts', 0) < item['price']:
        await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–¥–µ—á–µ–∫. –ù—É–∂–Ω–æ: {item['price']}")
        return
    
    buttons = [
        [InlineKeyboardButton(text=f"‚úÖ –ö—É–ø–∏—Ç—å –∑–∞ {item['price']} —Å–µ—Ä–¥–µ—á–µ–∫", callback_data=f"buy_{item_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
    ]
    
    await callback.message.edit_text(
        f"üõç <b>{item['title']}</b>\n\n"
        f"{item['description']}\n\n"
        f"üíñ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['price']} —Å–µ—Ä–¥–µ—á–µ–∫",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("buy_"))
async def buy_item(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
    item_id = callback.data.replace("buy_", "")
    item = next((i for i in SHOP_ITEMS if i["id"] == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if user.get('hearts', 0) < item['price']:
        await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–¥–µ—á–µ–∫. –ù—É–∂–Ω–æ: {item['price']}")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_hearts = user.get('hearts', 0) - item['price']
    await update_user(
        user['telegram_id'],
        hearts=new_hearts
    )
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if item['type'] == "requests":
        extra_requests = user.get('extra_requests', 0) + 10
        await update_user(
            user['telegram_id'],
            extra_requests=extra_requests
        )
        result = "üîπ –ü–æ–ª—É—á–µ–Ω–æ +10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    elif item['type'] == "content":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        motivation_text = await get_ai_response("–ù–∞–ø–∏—à–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.")
        result = f"üíå <b>–í–∞—à–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ:</b>\n\n{motivation_text}"
    elif item['type'] == "analysis":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        analysis_text = await get_ai_response("–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")
        result = f"üîç <b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:</b>\n\n{analysis_text}"
    elif item['type'] == "therapy":
        # –°–µ—Å—Å–∏—è —Å –ò–ò-—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º
        result = "üß† <b>–°–µ—Å—Å–∏—è —Å –ò–ò-—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."
    elif item['type'] == "guide":
        # –ì–∏–¥ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞
        guide_text = await get_ai_response("–°–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ —Å —Å–æ–≤–µ—Ç–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏.")
        result = f"üåô <b>–ì–∏–¥ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞:</b>\n\n{guide_text}"
    elif item['type'] == "program":
        # –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º–∞
        program_text = await get_ai_response("–°–æ–∑–¥–∞–π 7-–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–∞ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏.")
        result = f"üåÄ <b>–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n\n{program_text}"
    else:
        result = "üõç –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω!"
    
    await callback.message.edit_text(
        f"üéâ <b>–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: {item['title']}\n\n"
        f"{result}\n\n"
        f"üíñ –û—Å—Ç–∞—Ç–æ–∫ —Å–µ—Ä–¥–µ—á–µ–∫: {new_hearts}",
        reply_markup=get_back_to_shop_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_user_profile(callback.from_user.id, callback.message)
    await callback.answer()

@router.callback_query(F.data == "back_to_shop")
async def back_to_shop(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–∞–≥–∞–∑–∏–Ω"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    try:
        await callback.message.edit_text(
            "üõç <b>–ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–¥–µ—á–µ–∫</b>\n\n"
            f"üíñ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.get('hearts', 0)} —Å–µ—Ä–¥–µ—á–µ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=get_shop_keyboard(),
            parse_mode="HTML"
        )
    except:
        await callback.answer()
    await callback.answer()

@router.callback_query(F.data == "back_to_subscription")
async def back_to_subscription(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    await premium_subscription(callback)
    await callback.answer()

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    await show_user_profile(callback.from_user.id, callback.message)
    await callback.answer()

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user = await get_user(message.from_user.id)
    if not user or not user.get('is_admin'):
        return
    
    await message.answer(
        "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        return
    
    async with async_session() as session:
        total_users = await session.scalar(text("SELECT COUNT(*) FROM users"))
        premium_users = await session.scalar(text("SELECT COUNT(*) FROM users WHERE is_premium = TRUE"))
        challenges_completed = await session.scalar(text("SELECT SUM(completed_challenges) FROM users"))
        total_hearts = await session.scalar(text("SELECT SUM(hearts) FROM users"))
        pending_payments = await session.scalar(text("SELECT COUNT(*) FROM payments WHERE status = 'pending'"))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recent_users = await get_recent_users()
    
    stats = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üíé –ü—Ä–µ–º–∏—É–º: {premium_users}\n"
        f"üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {challenges_completed or 0}\n"
        f"üíñ –í—Å–µ–≥–æ —Å–µ—Ä–¥–µ—á–µ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_hearts or 0}\n"
        f"üí∞ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã: {pending_payments or 0}\n\n"
        "üÜï <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    )
    
    for i, user in enumerate(recent_users, 1):
        stats += f"{i}. @{user['username']} - {user['created_at'].strftime('%d.%m.%Y')}\n"
    
    await callback.message.answer(stats, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_premium")
async def admin_premium(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º–∞ –∞–¥–º–∏–Ω–æ–º"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        return
    
    await callback.message.answer(
        "üë§ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>@username 30</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>@ivan 30</code> - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_hearts")
async def admin_hearts(callback: CallbackQuery):
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—á–µ–∫ –∞–¥–º–∏–Ω–æ–º"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        return
    
    await callback.message.answer(
        "üíñ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—á–µ–∫</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>@username 50</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>@ivan 50</code> - –Ω–∞—á–∏—Å–ª–∏—Ç 50 —Å–µ—Ä–¥–µ—á–µ–∫",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_promotions")
async def admin_promotions(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        return
    
    await callback.message.answer(
        "üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é", callback_data="create_promotion")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π", callback_data="list_promotions")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        return
    
    await callback.message.edit_text(
        "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message(F.text)
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        await session.execute(
            user_messages.insert().values(
                user_id=user['telegram_id'],
                message_text=message.text,
                is_ai_response=False
            )
        )
        await session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if not await check_request_limit(user):
        await message.answer(
            "‚ö†Ô∏è <b>–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ (/shop)\n"
            "2. –î–æ–∂–¥–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤\n"
            "3. –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É (/subscription)",
            parse_mode="HTML"
        )
        return
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    await update_user(
        user['telegram_id'],
        total_requests=user.get('total_requests', 0) + 1,
        last_request_date=datetime.utcnow()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    response = await get_ai_response(message.text)
    await message.answer(response, parse_mode="HTML")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
    async with async_session() as session:
        await session.execute(
            user_messages.insert().values(
                user_id=user['telegram_id'],
                message_text=response,
                is_ai_response=True
            )
        )
        await session.commit()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await setup_db()
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="profile", description="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="subscription", description="–ü–æ–¥–ø–∏—Å–∫–∞"),
        BotCommand(command="challenge", description="–ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂"),
        BotCommand(command="shop", description="–ú–∞–≥–∞–∑–∏–Ω"),
        BotCommand(command="psychology", description="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å")
    ]
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_commands = [
        BotCommand(command="admin", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.set_my_commands(user_commands)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMIN_IDS:
        try:
            await bot.set_my_commands(
                admin_commands,
                scope={"type": "chat", "chat_id": admin_id}
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
    logger.info("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
    await bot.close()
    await engine.dispose()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")