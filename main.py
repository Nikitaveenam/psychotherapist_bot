import os
import logging
import asyncio
import random
from sqlalchemy import MetaData
from sqlalchemy.orm import declarative_base
from aiogram import Dispatcher
from aiogram.types import ErrorEvent
from aiogram.fsm.state import State, StatesGroup
<<<<<<< HEAD
from aiogram import
=======
from aiogram import F
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone
<<<<<<< HEAD
=======
from aiogram import Bot, Dispatcher, Router, F
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
from aiogram.types import Message, BotCommand, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import text, MetaData, Table, Column, Integer, String, Boolean, DateTime, BigInteger, Float
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
import httpx
from decimal import Decimal, getcontext
<<<<<<< HEAD
from passlib.context import CryptContext
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
=======
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è Decimal
getcontext().prec = 8

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ],
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
TRIAL_DAYS = 3
TRIAL_DAILY_LIMIT = 12
PREMIUM_DAILY_LIMIT = 20
FREE_WEEKLY_LIMIT = 20
HEARTS_PER_DAY = 3
CHALLENGE_REWARD = 5  # –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—á–µ–∫ –∑–∞ —á–µ–ª–ª–µ–Ω–¥–∂
CHALLENGE_DURATION = 120  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (2 –º–∏–Ω—É—Ç—ã)
REFERRAL_REWARD = 10
REFERRAL_TRIAL_DAYS = 3
MAX_REFERRALS_PER_MONTH = 5  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü

# –ß–µ–ª–ª–µ–Ω–¥–∂–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
CHALLENGES = [
    {
        "title": "üå¨Ô∏è –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 4-7-8 –¥—ã—Ö–∞–Ω–∏–µ: 4 —Å–µ–∫ –≤–¥–æ—Ö, 7 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∞, 8 —Å–µ–∫ –≤—ã–¥–æ—Ö. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 5 —Ü–∏–∫–ª–æ–≤.",
        "duration": 120
    },
    {
        "title": "üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—É–ª–∫–∞ —Å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å—é",
        "description": "–ü—Ä–æ–≥—É–ª—è–π—Ç–µ—Å—å 2 –º–∏–Ω—É—Ç—ã, –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥ –∏ –æ–∫—Ä—É–∂–∞—é—â–∏–µ –∑–≤—É–∫–∏.",
        "duration": 120
    },
    {
        "title": "üí™ –ú–∏–Ω–∏-–∑–∞—Ä—è–¥–∫–∞",
        "description": "–°–¥–µ–ª–∞–π—Ç–µ 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π, 10 –Ω–∞–∫–ª–æ–Ω–æ–≤ –∏ 10 –≤—Ä–∞—â–µ–Ω–∏–π —Ä—É–∫–∞–º–∏.",
        "duration": 120
    },
    {
        "title": "üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è",
        "description": "–°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç.",
        "duration": 120
    },
    {
        "title": "üîÑ –ü–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ",
        "description": "–ó–∞–ø–∏—à–∏—Ç–µ 3 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞ –¥–Ω—è –∏ 1 —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.",
        "duration": 120
    },
    {
        "title": "üéµ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ",
        "description": "–í–∫–ª—é—á–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É –∏ —Å–ª—É—à–∞–π—Ç–µ –µ–µ 2 –º–∏–Ω—É—Ç—ã, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—è—Å—å –Ω–∞ –∑–≤—É–∫–∞—Ö.",
        "duration": 120
    },
    {
        "title": "üíß –ü–∏—Ç—å–µ–≤–∞—è –ø–∞—É–∑–∞",
        "description": "–ú–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—è—Å—å –Ω–∞ –∫–∞–∂–¥–æ–º –≥–ª–æ—Ç–∫–µ.",
        "duration": 120
    },
    {
        "title": "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è",
        "description": "–ó–∞–ø–∏—à–∏—Ç–µ 3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–∞–∫ –≤—ã –∏—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ.",
        "duration": 120
    },
    {
        "title": "üåø –ö–æ–Ω—Ç–∞–∫—Ç —Å –ø—Ä–∏—Ä–æ–¥–æ–π",
        "description": "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ, –Ω–∞–±–ª—é–¥–∞—è –∑–∞ –ø—Ä–∏—Ä–æ–¥–æ–π.",
        "duration": 120
    },
    {
        "title": "üí≠ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞",
        "description": "–ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±—è —É—Å–ø–µ—à–Ω—ã–º –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º.",
        "duration": 120
    }
]

# –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö
SUBSCRIPTION_PRICES = {
    "1_month": 299,
    "3_months": 749,
    "6_months": 1299,
    "1_year": 2199
}

# –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–µ—Ä–¥–µ—á–∫–∞—Ö
SUBSCRIPTION_HEARTS_PRICES = {
    "1_day": 100,
    "7_days": 600,
    "1_month": 2000
}

# –°–∫–∏–¥–∫–∏ –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏ (–º–∞–∫—Å–∏–º—É–º 15%)
HEARTS_DISCOUNTS = {
    100: 5,
    200: 10,
    300: 15
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
SHOP_ITEMS = [
    {
        "id": "extra_requests",
        "title": "üìà –î–æ–ø. –∑–∞–ø—Ä–æ—Å—ã",
        "description": "10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò\n\n–ü–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±–æ—Ç–∞, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã.",
        "price": 100,
        "type": "requests"
    },
    {
        "id": "motivation",
        "title": "üíå –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ",
        "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –ò–ò\n\n–ü–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Å–∏–ª—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.",
        "price": 150,
        "type": "content"
    },
    {
        "id": "analysis",
        "title": "üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        "description": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n\n–ü–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –Ω–∞–π—Ç–∏ –ø—É—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.",
        "price": 200,
        "type": "analysis"
    },
    {
        "id": "therapy_session",
        "title": "üß† –°–µ—Å—Å–∏—è —Å –ò–ò-—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º",
        "description": "30-–º–∏–Ω—É—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –ò–ò-—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º\n\n–ü–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —ç–º–æ—Ü–∏—è—Ö –∏ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏—è.",
        "price": 300,
        "type": "therapy"
    },
    {
        "id": "sleep_guide",
        "title": "üåô –ì–∏–¥ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞",
        "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞\n\n–°–æ–≤–µ—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–Ω–∞.",
        "price": 250,
        "type": "guide"
    },
    {
        "id": "stress_relief",
        "title": "üåÄ –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        "description": "7-–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–∞\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        "price": 400,
        "type": "program"
    },
    {
        "id": "premium_1_day",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 1 –¥–µ–Ω—å",
        "description": "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å\n\n–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
        "price": 100,
        "type": "premium"
    },
    {
        "id": "premium_7_days",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 7 –¥–Ω–µ–π",
        "description": "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π\n\n–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
        "price": 600,
        "type": "premium"
    },
    {
        "id": "premium_1_month",
        "title": "üíé –ü—Ä–µ–º–∏—É–º –Ω–∞ 1 –º–µ—Å—è—Ü",
        "description": "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü\n\n–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
        "price": 2000,
        "type": "premium"
    }
]

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
PAYMENT_DETAILS = {
    "crypto": {
        "TRC20_USDT": "TMrLxEVr1sd5UCYB2iQXpj7GM3K5KdXTCP"
    },
    "yoomoney": {
        "account": "4100119110059662",
        "comment": "–ü–û–î–î–ï–†–ñ–ö–ê –∏ –≤–∞—à @username.\n"
        "–ü–†–ò–ú–ï–†: –ü–û–î–î–ï–†–ñ–ö–ê Ivansokolov"
    }
}

# –ú–µ–¥–∏—Ç–∞—Ü–∏–∏
MEDITATIONS = [
    {
        "id": 1,
        "title": "üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏",
        "description": "10-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏ –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –±–µ–∑ –æ—Ü–µ–Ω–∫–∏.",
        "duration": 10,
        "hearts_reward": 20
    },
    {
        "id": 2,
        "title": "üåä –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞",
        "description": "10-–º–∏–Ω—É—Ç–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è, –ø–æ–º–æ–≥–∞—é—â–∞—è —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±—è —É –æ–∫–µ–∞–Ω–∞.",
        "duration": 10,
        "hearts_reward": 20
    },
    {
        "id": 3,
        "title": "üíñ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –ª—é–±—è—â–µ–π –¥–æ–±—Ä–æ—Ç—ã",
        "description": "10-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è –∫ —Å–µ–±–µ –∏ –¥—Ä—É–≥–∏–º.",
        "duration": 10,
        "hearts_reward": 20
    },
    {
        "id": 4,
        "title": "üå≥ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –≤ –ø—Ä–∏—Ä–æ–¥–µ",
        "description": "10-–º–∏–Ω—É—Ç–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Ä–æ–¥—ã. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±—è –≤ –ª–µ—Å—É –∏–ª–∏ —É –≥–æ—Ä–Ω–æ–≥–æ —Ä—É—á—å—è.",
        "duration": 10,
        "hearts_reward": 20
    },
    {
        "id": 5,
        "title": "üåô –ú–µ–¥–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
        "description": "10-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º. –ü–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞.",
        "duration": 10,
        "hearts_reward": 20
    },
    {
        "id": 6,
        "title": "‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è",
        "description": "10-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è —Å —è—Å–Ω—ã–º —É–º–æ–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–º.",
        "duration": 10,
        "hearts_reward": 20
    },
    {
        "id": 7,
        "title": "üåÄ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏",
        "description": "10-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, —É–ª—É—á—à–∞—é—â–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –≤–Ω–∏–º–∞–Ω–∏–µ.",
        "duration": 10,
        "hearts_reward": 20
    }
]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DB_URL = os.getenv("DB_URL")
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "").split(",") if id.strip()]
CRYPTO_API_KEY = os.getenv("CRYPTO_API_KEY")

if not all([BOT_TOKEN, DB_URL]):
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
engine = create_async_engine(DB_URL, echo=True)
async_session = async_sessionmaker(engine, expire_on_commit=False)
metadata = MetaData()
Base = declarative_base(metadata=metadata)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
users = Table(
    "users",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("telegram_id", BigInteger, unique=True, nullable=False),
    Column("full_name", String(100)),  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å
    Column("username", String(100)),
    Column("is_premium", Boolean, default=False),
    Column("weekly_requests", Integer, default=0),
    Column("is_admin", Boolean, default=False),
    Column("trial_started_at", DateTime),
    Column("subscription_expires_at", DateTime),
    Column("hearts", Integer, default=HEARTS_PER_DAY),
    Column("total_requests", Integer, default=0),
    Column("last_request_date", DateTime),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("is_banned", Boolean, default=False),
    Column("completed_challenges", Integer, default=0),
    Column("last_challenge_time", DateTime),
    Column("active_challenge", String(200), nullable=True),
    Column("challenge_started_at", DateTime, nullable=True),
    Column("extra_requests", Integer, default=0),
    Column("referral_code", String(20), nullable=True),
    Column("referred_by", BigInteger, nullable=True),
    Column("ip_address", BigInteger, nullable=True),
    Column("referral_count", Integer, default=0),
    Column("name", String(100), nullable=True),
    Column("last_referral_month", Integer, default=datetime.now().month),
    Column("current_month_referrals", Integer, default=0)
)

# –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
payments = Table(
    "payments",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("amount", Float),
    Column("currency", String(10)),
    Column("payment_method", String(20)),
    Column("transaction_id", String(100)),
    Column("status", String(20), default="pending"),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("completed_at", DateTime, nullable=True),
)

# –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
admin_actions = Table(
    "admin_actions",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("admin_id", BigInteger),
    Column("action", String(50)),
    Column("target_user_id", BigInteger),
    Column("details", String(200)),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_messages = Table(
    "user_messages",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("message_text", String(1000)),
    Column("is_ai_response", Boolean, default=False),
    Column("created_at", DateTime, default=datetime.utcnow),
)

# –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ü–∏–π
promotions = Table(
    "promotions",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("title", String(100)),
    Column("description", String(500)),
    Column("promo_code", String(20), unique=True),
    Column("discount_percent", Integer),
    Column("hearts_reward", Integer),
    Column("start_date", DateTime),
    Column("end_date", DateTime),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("tasks", String(500), nullable=True),
    Column("reward_type", String(10))  # 'hearts' –∏–ª–∏ 'discount'
)

# –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∞–∫—Ü–∏–π
promotion_tasks = Table(
    "promotion_tasks",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("promotion_id", Integer),
    Column("task", String(100)),
    Column("completed", Boolean, default=False),
    Column("completed_at", DateTime, nullable=True),
    Column("created_at", DateTime, default=datetime.utcnow)
)

# –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
referrals = Table(
    "referrals",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("referrer_id", BigInteger),
    Column("referred_id", BigInteger),
    Column("reward_paid", Boolean, default=False),
    Column("created_at", DateTime, default=datetime.utcnow)
)

# –¢–∞–±–ª–∏—Ü–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞
diary_entries = Table(
    "diary_entries",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("entry_text", String(2000)),
    Column("mood", String(20)),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("password", String(100), nullable=True)
)

# –¢–∞–±–ª–∏—Ü–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–π
meditations = Table(
    "meditations",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("title", String(100)),
    Column("description", String(500)),
    Column("duration", Integer),
    Column("hearts_reward", Integer),
    Column("audio_file_id", String(200), nullable=True),
    Column("created_at", DateTime, default=datetime.utcnow)
)

# –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—ã—á–µ–∫
habits = Table(
    "habits",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("title", String(100)),
    Column("description", String(500)),
    Column("reminder_enabled", Boolean, default=False),
    Column("reminder_time", String(10), nullable=True),
    Column("reminder_frequency", String(20), nullable=True),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("completed", Boolean, default=False),
    Column("completed_at", DateTime, nullable=True)
)

# –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
habit_completions = Table(
    "habit_completions",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("habit_id", Integer),
    Column("completed_at", DateTime, default=datetime.utcnow)
)

# –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = Table(
    "reminders",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("habit_id", Integer),
    Column("reminder_time", String(10)),
    Column("next_reminder", DateTime),
    Column("frequency", String(20)),
    Column("is_active", Boolean, default=True)
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def setup_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    try:
        async with engine.begin() as conn:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            await conn.run_sync(metadata.drop_all)
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
            await conn.run_sync(metadata.create_all)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise

async def get_user(telegram_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    try:
        async with async_session() as session:
            result = await session.execute(
                text("SELECT * FROM users WHERE telegram_id = :telegram_id"),
                {"telegram_id": telegram_id}
            )
            user = result.mappings().first()
            return dict(user) if user else None
    except Exception as e:
<<<<<<< HEAD
        logger.error(f"Error in get_user for telegram_id {telegram_id}: {e}", exc_info=True)
        return None

async def get_user_by_username(username: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ username"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM users WHERE username = :username"),
            {"username": username}
        )
        user = result.fetchone()
        if user:
            return user
        return None

async def save_user(user):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with async_session() as session:
        session.add(user)
        await session.commit()

async def get_user_message_history(user_id: int, days: int, page: int = 1, page_size: int = 10):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    async with async_session() as session:
        query = text("""
            SELECT * FROM user_messages
            WHERE user_id = :user_id
            AND created_at >= NOW() - INTERVAL :days DAY
            ORDER BY created_at DESC
            LIMIT :limit OFFSET :offset
        """)
        result = await session.execute(query, {"user_id": user_id, "days": days, "limit": page_size, "offset": (page - 1) * page_size})
        messages = result.fetchall()
        return messages



async def create_user(telegram_id: int, full_name: str, username: str = None, is_admin: bool = False):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
=======
        logger.error(f"Error in get_user: {e}", exc_info=True)
        return None

async def get_user_by_username(username: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM users WHERE username = :username"),
            {"username": username.replace('@', '')}
        )
        row = result.mappings().first()
        return dict(row) if row else None

async def create_user(telegram_id: int, full_name: str, username: str = None, 
                     is_admin: bool = False, referred_by: int = None, 
                     ip_address: int = None) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
    try:
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            current_month = datetime.now().month
<<<<<<< HEAD
            referral_code = f"REF{random.randint(1000, 9999)}"

=======
            
            referral_code = f"REF{random.randint(1000, 9999)}"
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
            user_data = {
                "telegram_id": telegram_id,
                "full_name": full_name,
                "username": username,
                "is_admin": is_admin,
                "trial_started_at": datetime.utcnow() if not is_admin else None,
<<<<<<< HEAD
                "hearts": HEARTS_PER_DAY,
                "created_at": datetime.utcnow(),
                "referral_code": referral_code
            }

=======
                "hearts": HEARTS_PER_DAY + (REFERRAL_REWARD if referred_by else 0),
                "last_request_date": datetime.utcnow(),
                "referral_code": referral_code,
                "referred_by": referred_by,
                "ip_address": ip_address,
                "referral_count": 0,
                "last_referral_month": current_month,
                "current_month_referrals": 0,
                "created_at": datetime.utcnow()
            }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
            result = await session.execute(
                users.insert().values(**user_data).returning(users)
            )
            await session.commit()
<<<<<<< HEAD

            created_user = result.mappings().first()
            return dict(created_user)
    except Exception as e:
        logger.error(f"Critical error in create_user: {e}", exc_info=True)
        raise


=======
            
            created_user = result.mappings().first()
            if not created_user:
                raise ValueError("User creation returned empty result")
            
            created_user_dict = dict(created_user)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if referred_by:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—è—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                    referrer = await get_user(referred_by)
                    if referrer:
                        current_month = datetime.now().month
                        if referrer['last_referral_month'] != current_month:
                            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –º–µ—Å—è—Ü –∏–∑–º–µ–Ω–∏–ª—Å—è
                            await update_user(
                                referred_by,
                                last_referral_month=current_month,
                                current_month_referrals=0
                            )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
                        if referrer['current_month_referrals'] < MAX_REFERRALS_PER_MONTH:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                            await update_user(
                                referred_by,
                                hearts=referrer.get('hearts', 0) + REFERRAL_REWARD,
                                referral_count=referrer.get('referral_count', 0) + 1,
                                current_month_referrals=referrer.get('current_month_referrals', 0) + 1
                            )
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
                            await session.execute(
                                referrals.insert().values(
                                    referrer_id=referred_by,
                                    referred_id=telegram_id,
                                    created_at=datetime.utcnow()
                                )
                            )
                            await session.commit()
                            logger.info(f"Referral bonus applied for {referred_by}")
                except Exception as ref_error:
                    logger.error(f"Referral processing failed: {ref_error}")
                    await session.rollback()

            return created_user_dict
            
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
    except Exception as e:
        logger.error(f"Critical error in create_user: {e}", exc_info=True)
        if 'session' in locals():
            await session.rollback()
        raise

async def update_user(telegram_id: int, **kwargs) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with async_session() as session:
            # –£–¥–∞–ª—è–µ–º weekly_requests –∏–∑ kwargs, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ
            if 'weekly_requests' in kwargs:
                kwargs.pop('weekly_requests')
                
            stmt = users.update().where(users.c.telegram_id == telegram_id).values(**kwargs)
            await session.execute(stmt)
            await session.commit()
            return True
    except Exception as e:
        logger.error(f"Error updating user: {e}")
        return False

async def log_admin_action(admin_id: int, action: str, target_user_id: int = None, details: str = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞"""
    async with async_session() as session:
        await session.execute(
            admin_actions.insert().values(
                admin_id=admin_id,
                action=action,
                target_user_id=target_user_id,
                details=details
            )
        )
        await session.commit()

async def check_subscription(user: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not user or user.get('is_banned'):
        return False
    if user.get('is_admin'):
        return True
    if user.get('is_premium') and user.get('subscription_expires_at') and user['subscription_expires_at'] > datetime.utcnow():
        return True
    if user.get('trial_started_at') and (datetime.utcnow() - user['trial_started_at']).days <= TRIAL_DAYS:
        return True
    return False

async def check_request_limit(user: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if not user:
        return False

    now = datetime.now(timezone.utc)
    today = now.date()
    last_request = user.get('last_request_date')

    # –î–ª—è –ø—Ä–µ–º–∏—É–º: —Å–±—Ä–æ—Å daily (–∏—Å–ø–æ–ª—å–∑—É–µ–º total_requests) –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    if user.get('is_premium'):
        if last_request is None or last_request.replace(tzinfo=timezone.utc).date() != today:
            await update_user(
                user['telegram_id'],
                total_requests=0,
                last_request_date=now
            )
        return user.get('total_requests', 0) < PREMIUM_DAILY_LIMIT + user.get('extra_requests', 0)

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö: —Å–±—Ä–æ—Å weekly_requests —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
    else:
        if last_request is None or (now - last_request.replace(tzinfo=timezone.utc)).days >= 7:
            await update_user(
                user['telegram_id'],
                total_requests=0,
                last_request_date=now
            )
        return user.get('total_requests', 0) < FREE_WEEKLY_LIMIT

async def get_ai_response(prompt: str, user: Dict[str, Any]) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not OPENAI_API_KEY:
        return (
            "üß† <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /challenge –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!"
        )
    
    crisis_keywords = ["—Å—É–∏—Ü–∏–¥", "—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ", "–ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å"]
    if any(keyword in prompt.lower() for keyword in crisis_keywords):
        return (
            "üíô <b>–Ø –≤–∏–∂—É, —á—Ç–æ –≤–∞–º —Å–µ–π—á–∞—Å —Ç—è–∂–µ–ª–æ</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º:\n\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
            "üë®‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n\n"
            "–í—ã –Ω–µ –æ–¥–Ω–∏, –ø–æ–º–æ—â—å —Ä—è–¥–æ–º!"
        )

    max_tokens = 500
    if user.get('is_premium'):
        max_tokens = 800

    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": (
                        "–¢—ã - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Å —ç–º–ø–∞—Ç–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. "
                        "–ù–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑—ã, –Ω–æ –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
                        "–ë—É–¥—å —Ç–µ–ø–ª—ã–º –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1-2 –∞–±–∑–∞—Ü–∞)."
                    )
                },
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=0.7
        )
        return response.choices[0].message.content

<<<<<<< HEAD

    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}", exc_info=True)
=======
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
        return (
            "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /challenge –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!"
        )

async def can_get_challenge(user: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂"""
    if not user:
        return False
        
    last_challenge = user.get('last_challenge_time')
    if last_challenge is None:
        return True
        
    now = datetime.utcnow()
    # –ß–µ–ª–ª–µ–Ω–¥–∂–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ 9:00 –∏ 18:00 –ø–æ –ú–°–ö (6:00 –∏ 15:00 UTC)
    challenge_reset_time1 = now.replace(hour=6, minute=0, second=0, microsecond=0)
    challenge_reset_time2 = now.replace(hour=15, minute=0, second=0, microsecond=0)
    
    if now.hour < 6:
        challenge_reset_time1 -= timedelta(days=1)
    elif now.hour < 15:
        challenge_reset_time2 -= timedelta(days=1)
    
    return last_challenge < challenge_reset_time1 or last_challenge < challenge_reset_time2

async def complete_challenge(user_id: int):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        user = await get_user(user_id)
        if user and user.get('active_challenge'):
            new_hearts = user.get('hearts', 0) + CHALLENGE_REWARD
            await session.execute(
                users.update()
                .where(users.c.telegram_id == user_id)
                .values(
                    hearts=new_hearts,
                    completed_challenges=user.get('completed_challenges', 0) + 1,
                    last_challenge_time=datetime.utcnow(),
                    active_challenge=None,
                    challenge_started_at=None
                )
            )
            await session.commit()
            return new_hearts
    return None

async def get_crypto_rate(crypto: str) -> Optional[Decimal]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    try:
        async with httpx.AsyncClient() as client:
            if crypto == "USDT":
                url = "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub"
                response = await client.get(url)
                data = response.json()
                return Decimal(str(data["tether"]["rub"]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ {crypto}: {e}")
        return None

async def calculate_crypto_amount(rub_amount: Decimal, crypto: str) -> Optional[Decimal]:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ"""
    rate = await get_crypto_rate(crypto)
    if not rate:
        return None
    return (rub_amount / rate).quantize(Decimal('0.00000001'))

async def check_crypto_payment(address: str, expected_amount: Decimal, crypto: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    return True

async def get_recent_users(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT username, created_at FROM users ORDER BY created_at DESC LIMIT :limit"),
            {"limit": limit}
        )
        return [dict(row) for row in result.mappings()]

async def get_user_messages(user_id: int, days: int = 1) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT message_text, created_at FROM user_messages WHERE user_id = :user_id AND created_at >= NOW() - INTERVAL ':days days' ORDER BY created_at DESC"),
            {"user_id": user_id, "days": days}
        )
        return [dict(row) for row in result.mappings()]

<<<<<<< HEAD
async def create_promotion(title: str, description: str, promo_code: str, discount_percent: int, hearts_reward: int,
                           start_date: datetime, end_date: datetime, tasks: str = None, reward_type: str = "hearts"):
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏: title={title}, description={description}, promo_code={promo_code}, "
                    f"discount_percent={discount_percent}, hearts_reward={hearts_reward}, start_date={start_date}, "
                    f"end_date={end_date}, tasks={tasks}, reward_type={reward_type}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã
        if not start_date or not end_date:
            logger.error("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
            raise ValueError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")

        if start_date >= end_date:
            logger.error("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")
            raise ValueError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞
        async with async_session() as session:
            existing_promo = await session.execute(
                text("SELECT * FROM promotions WHERE promo_code = :promo_code"),
                {"promo_code": promo_code}
            )
            if existing_promo.first():
                logger.error(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                raise ValueError(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

        # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏
        async with async_session() as session:
            await session.execute(
                promotions.insert().values(
                    title=title,
                    description=description,
                    promo_code=promo_code,
                    discount_percent=discount_percent,
                    hearts_reward=hearts_reward,
                    start_date=start_date,
                    end_date=end_date,
                    tasks=tasks,
                    reward_type=reward_type
                )
            )
            await session.commit()
            logger.info(f"–ê–∫—Ü–∏—è {title} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏: {e}")
        await session.rollback()  # –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        raise


=======
async def create_promotion(title: str, description: str, promo_code: str, discount_percent: int, hearts_reward: int, start_date: datetime, end_date: datetime, tasks: str = None, reward_type: str = "hearts"):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞–∫—Ü–∏—é"""
    async with async_session() as session:
        await session.execute(
            promotions.insert().values(
                title=title,
                description=description,
                promo_code=promo_code,
                discount_percent=discount_percent,
                hearts_reward=hearts_reward,
                start_date=start_date,
                end_date=end_date,
                tasks=tasks,
                reward_type=reward_type
            )
        )
        await session.commit()
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6

async def get_promotions() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM promotions WHERE end_date >= NOW()")
        )
        return [dict(row) for row in result.mappings()]

async def get_user_referrals(user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM referrals WHERE referrer_id = :user_id"),
            {"user_id": user_id}
        )
        return [dict(row) for row in result.mappings()]

async def get_diary_entries(user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM diary_entries WHERE user_id = :user_id ORDER BY created_at DESC"),
            {"user_id": user_id}
        )
        return [dict(row) for row in result.mappings()]

async def create_diary_entry(user_id: int, entry_text: str, mood: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    async with async_session() as session:
        await session.execute(
            diary_entries.insert().values(
                user_id=user_id,
                entry_text=entry_text,
                mood=mood
            )
        )
        await session.commit()
        
        # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
        user = await get_user(user_id)
        if user:
            new_hearts = user.get('hearts', 0) + 5  # 5 —Å–µ—Ä–¥–µ—á–µ–∫ –∑–∞ –∑–∞–ø–∏—Å—å
            await update_user(user_id, hearts=new_hearts)

async def set_diary_password(user_id: int, password: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫"""
    async with async_session() as session:
<<<<<<< HEAD
        hashed_password = pwd_context.hash(password)
        await session.execute(
            diary_entries.update()
            .where(diary_entries.c.user_id == user_id)
            .values(password=hashed_password)
=======
        await session.execute(
            diary_entries.update()
            .where(diary_entries.c.user_id == user_id)
            .values(password=password)
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
        )
        await session.commit()

async def get_meditations() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏—Ç–∞—Ü–∏–π"""
    return MEDITATIONS

async def get_habit(user_id: int, habit_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM habits WHERE user_id = :user_id AND id = :habit_id"),
            {"user_id": user_id, "habit_id": habit_id}
        )
        row = result.mappings().first()
        return dict(row) if row else None

async def get_user_habits(user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM habits WHERE user_id = :user_id ORDER BY created_at DESC"),
            {"user_id": user_id}
        )
        return [dict(row) for row in result.mappings()]

async def create_habit(user_id: int, title: str, description: str, reminder_enabled: bool = False, 
                      reminder_time: str = None, reminder_frequency: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É"""
    async with async_session() as session:
        result = await session.execute(
            habits.insert().values(
                user_id=user_id,
                title=title,
                description=description,
                reminder_enabled=reminder_enabled,
                reminder_time=reminder_time,
                reminder_frequency=reminder_frequency
            ).returning(habits)
        )
        await session.commit()
        
        habit = result.mappings().first()
        if habit and reminder_enabled and reminder_time and reminder_frequency:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await create_reminder(user_id, habit['id'], reminder_time, reminder_frequency)
        
        return dict(habit) if habit else None

async def complete_habit(habit_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    async with async_session() as session:
        await session.execute(
            habits.update()
            .where(habits.c.id == habit_id)
            .values(completed=True, completed_at=datetime.utcnow())
        )
        
        await session.execute(
            habit_completions.insert().values(
                habit_id=habit_id,
                completed_at=datetime.utcnow()
            )
        )
        await session.commit()

async def create_reminder(user_id: int, habit_id: int, reminder_time: str, frequency: str):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    async with async_session() as session:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        now = datetime.now()
        reminder_hour, reminder_minute = map(int, reminder_time.split(':'))
        
        if frequency == "daily":
            next_reminder = now.replace(hour=reminder_hour, minute=reminder_minute, second=0, microsecond=0)
            if next_reminder < now:
                next_reminder += timedelta(days=1)
        elif frequency == "weekly":
            next_reminder = now.replace(hour=reminder_hour, minute=reminder_minute, second=0, microsecond=0)
            while next_reminder < now:
                next_reminder += timedelta(days=7)
        elif frequency == "monthly":
            next_reminder = now.replace(hour=reminder_hour, minute=reminder_minute, second=0, microsecond=0)
            while next_reminder < now:
                next_reminder += timedelta(days=30)
        else:
            next_reminder = now.replace(hour=reminder_hour, minute=reminder_minute, second=0, microsecond=0)
            if next_reminder < now:
                next_reminder += timedelta(days=1)
        
        await session.execute(
            reminders.insert().values(
                user_id=user_id,
                habit_id=habit_id,
                reminder_time=reminder_time,
                next_reminder=next_reminder,
                frequency=frequency
            )
        )
        await session.commit()

async def get_habit_completions(habit_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM habit_completions WHERE habit_id = :habit_id ORDER BY completed_at DESC"),
            {"habit_id": habit_id}
        )
        return [dict(row) for row in result.mappings()]

async def get_user_stats(user_id: int, days: int = 7) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        result = await session.execute(
            text("SELECT COUNT(*) FROM users WHERE telegram_id = :user_id AND last_challenge_time >= NOW() - INTERVAL ':days days'"),
            {"user_id": user_id, "days": days}
        )
        challenges_completed = result.scalar() or 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
        result = await session.execute(
            text("SELECT COUNT(*) FROM diary_entries WHERE user_id = :user_id AND created_at >= NOW() - INTERVAL ':days days'"),
            {"user_id": user_id, "days": days}
        )
        diary_entries = result.scalar() or 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        result = await session.execute(
            text("SELECT COUNT(*) FROM habit_completions WHERE habit_id IN (SELECT id FROM habits WHERE user_id = :user_id) AND completed_at >= NOW() - INTERVAL ':days days'"),
            {"user_id": user_id, "days": days}
        )
        habits_completed = result.scalar() or 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ—Ä–¥–µ—á–∫–∏
        result = await session.execute(
            text("SELECT hearts FROM users WHERE telegram_id = :user_id"),
            {"user_id": user_id}
        )
        hearts = result.scalar() or 0
        
        return {
            "challenges_completed": challenges_completed,
            "diary_entries": diary_entries,
            "habits_completed": habits_completed,
            "hearts_earned": hearts
        }

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_challenge_keyboard(challenge_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂", callback_data=f"start_{challenge_id}")],
        [InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="enable_challenge_notifications")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_challenge_timer_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚è≥ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="complete_challenge")],
        [InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ (–±–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã)", callback_data="cancel_challenge")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_shop_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    buttons = []
    for item in SHOP_ITEMS:
        buttons.append([InlineKeyboardButton(text=item["title"], callback_data=f"shop_{item['id']}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subscription_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    buttons = [
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 299‚ÇΩ", callback_data="sub_1_month")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 749‚ÇΩ", callback_data="sub_3_months")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 1299‚ÇΩ", callback_data="sub_6_months")],
        [InlineKeyboardButton(text="1 –≥–æ–¥ - 2199‚ÇΩ", callback_data="sub_1_year")],
        [InlineKeyboardButton(text="üíñ –ö—É–ø–∏—Ç—å –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="buy_with_hearts")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_hearts_subscription_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏"""
    buttons = [
        [InlineKeyboardButton(text="1 –¥–µ–Ω—å - 100üíñ", callback_data="hearts_sub_1_day")],
        [InlineKeyboardButton(text="7 –¥–Ω–µ–π - 600üíñ", callback_data="hearts_sub_7_days")],
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 2000üíñ", callback_data="hearts_sub_1_month")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_method_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [InlineKeyboardButton(text="üí≥ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT)", callback_data="pay_crypto")],
        [InlineKeyboardButton(text="üü£ –ÆMoney", callback_data="pay_yoomoney")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞"""
    buttons = [
        [InlineKeyboardButton(text="üë§ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin_premium")],
        [InlineKeyboardButton(text="üíñ –ù–∞—á–∏—Å–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="admin_hearts")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_ban")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üéÅ –ê–∫—Ü–∏–∏", callback_data="admin_promotions")],
        [InlineKeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="admin_user_messages")],
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="admin_reset_activity")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_shop_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω"""
    buttons = [
        [InlineKeyboardButton(text="üîô –í –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_shop")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_psychology_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    buttons = [
        [InlineKeyboardButton(text="üí¨ –ß–∞—Ç —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º", callback_data="ai_psychologist")],
        [InlineKeyboardButton(text="üìî –õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫", callback_data="personal_diary")],
        [InlineKeyboardButton(text="üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏–∏", callback_data="meditations")],
        [InlineKeyboardButton(text="üéØ –¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habits")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_diary_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚úçÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="new_diary_entry")],
        [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_diary_entries")],
        [InlineKeyboardButton(text="üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="set_diary_password")],
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π (20üíñ)", callback_data="analyze_diary")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_diary_entries_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    buttons = [
        [InlineKeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="diary_today")],
        [InlineKeyboardButton(text="üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="diary_week")],
        [InlineKeyboardButton(text="üóì –ó–∞ –º–µ—Å—è—Ü", callback_data="diary_month")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="personal_diary")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_meditation_keyboard(meditation_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    buttons = [
        [InlineKeyboardButton(text="üßò‚Äç‚ôÄÔ∏è –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é (20üíñ)", callback_data=f"start_meditation_{meditation_id}")],
        [InlineKeyboardButton(text="üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"read_meditation_{meditation_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="meditations")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_meditation_timer_keyboard(meditation_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é", callback_data=f"complete_meditation_{meditation_id}")],
        [InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ (–±–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã)", callback_data="cancel_meditation")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_habits_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏–≤—ã—á–µ–∫"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", callback_data="new_habit")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="habits_progress")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_habit_frequency_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    buttons = [
        [InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="habit_frequency_daily")],
        [InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="habit_frequency_weekly")],
        [InlineKeyboardButton(text="–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="habit_frequency_monthly")],
        [InlineKeyboardButton(text="–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="habit_frequency_none")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_habits_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º"""
    buttons = [
        [InlineKeyboardButton(text="üîô –ö –ø—Ä–∏–≤—ã—á–∫–∞–º", callback_data="habits")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_referral_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    buttons = [
        [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="get_referral_link")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="referral_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_keyboard(callback_data: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥"""
    buttons = [
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await setup_db()

        user = await get_user(message.from_user.id)

        if not user:
            is_admin = message.from_user.id in ADMIN_IDS
            try:
                user = await create_user(
                    telegram_id=message.from_user.id,
                    full_name=message.from_user.full_name,
                    username=message.from_user.username,
                    is_admin=is_admin
                )

                if is_admin:
                    await message.answer(
                        "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º")
                    return

                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = (
            "üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫!</b> üå∏\n\n"
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞ –ø—É—Ç–∏ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –¥—É—à–µ–≤–Ω–æ–º—É —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—é. "
            "–í–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º:\n\n"
            "‚Ä¢ –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏—è—Ö –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö üí≠\n"
            "‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ —Ç—Ä–µ–≤–æ–≥–æ–π üåø\n"
            "‚Ä¢ –†–∞–∑–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è üéØ\n"
            "‚Ä¢ –í–µ—Å—Ç–∏ –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è üìî\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è üßò‚Äç‚ôÄÔ∏è\n\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–µ—Ä–¥–µ—á–∫–∏ üíñ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ, "
            "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n\n"
            "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –Ω–∞—à –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –≤–º–µ—Å—Ç–µ! –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology_menu")],
            [InlineKeyboardButton(text="üíû –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")],
            [InlineKeyboardButton(text="üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="get_challenge")],
            [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
        ])
        
        await message.answer(welcome_msg, reply_markup=keyboard, parse_mode="HTML")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        if not user.get('name'):
            await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_main_menu(user_id: int, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    
    if user.get('is_admin'):
        await message.answer(
            f"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {name}",
            reply_markup=get_admin_keyboard()
        )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology_menu")],
            [InlineKeyboardButton(text="üíû –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")],
            [InlineKeyboardButton(text="üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="get_challenge")],
            [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
        ])
        
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )

async def handle_name_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ï—Å–ª–∏ –∏–º—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if not user.get('name'):
        name = message.text.strip()
        if len(name) < 2:
            await message.answer("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        await update_user(message.from_user.id, name=name)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏
        welcome_msg = (
            f"‚ú® –ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. ‚ú®\n\n"
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:\n"
            "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º üí¨\n"
            "‚Ä¢ –í–µ–¥–µ–Ω–∏–µ–º –ª–∏—á–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ üìî\n"
            "‚Ä¢ –ú–µ–¥–∏—Ç–∞—Ü–∏—è–º–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ üßò‚Äç‚ôÄÔ∏è\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–π üîç\n"
            "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ–º –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ üéØ\n\n"
            "üìä –¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            f"- –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {TRIAL_DAYS} –¥–Ω—è\n"
            f"- –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {TRIAL_DAILY_LIMIT}/–¥–µ–Ω—å\n"
            f"- –°–µ—Ä–¥–µ—á–µ–∫ –≤ –¥–µ–Ω—å: {HEARTS_PER_DAY}\n\n"
            "üèÜ –í—ã–ø–æ–ª–Ω—è–π —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ –ø–æ–ª—É—á–∞–π +{CHALLENGE_REWARD} —Å–µ—Ä–¥–µ—á–µ–∫ –∑–∞ –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n"
            "üíñ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å–µ—Ä–¥–µ—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç—Ä–∞—Ç—å –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å —Ä–∞–∑–¥–µ–ª–∞ '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è' –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology_menu")],
            [InlineKeyboardButton(text="üíû –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")]
        ])
        
        await message.answer(welcome_msg, reply_markup=keyboard)
    else:
        await handle_text_message(message)

async def show_user_profile(user_id: int, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    user = await get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    days_left = TRIAL_DAYS - (datetime.utcnow() - user['trial_started_at']).days if user.get('trial_started_at') else 0
    days_left = max(0, days_left)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    if await check_subscription(user):
        if user.get('is_premium'):
            expires = user['subscription_expires_at'].strftime("%d.%m.%Y") if user.get('subscription_expires_at') else "‚àû"
            status = f"üíé –ü—Ä–µ–º–∏—É–º (–¥–æ {expires})"
            requests_left = PREMIUM_DAILY_LIMIT + user.get('extra_requests', 0) - user.get('total_requests', 0)
            requests_info = f"{user.get('total_requests', 0)}/{PREMIUM_DAILY_LIMIT + user.get('extra_requests', 0)}"
        else:
            status = f"üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({days_left} –¥–Ω. –æ—Å—Ç–∞–ª–æ—Å—å)"
            requests_left = TRIAL_DAILY_LIMIT - user.get('total_requests', 0)
            requests_info = f"{user.get('total_requests', 0)}/{TRIAL_DAILY_LIMIT}"
    else:
        status = "üåø –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
        requests_left = FREE_WEEKLY_LIMIT - user.get('total_requests', 0)
        requests_info = f"{user.get('total_requests', 0)}/{FREE_WEEKLY_LIMIT}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏–≤—ã—á–µ–∫
    habits = await get_user_habits(user_id)
    completed_habits = sum(1 for h in habits if h.get('completed'))
    habits_progress = f"{completed_habits}/{len(habits)}" if habits else "0/0"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile_msg = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å {name}</b>\n\n"
        f"üîπ –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üîπ –ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {requests_left}\n"
        f"üîπ –°–µ—Ä–¥–µ—á–µ–∫: {user.get('hearts', 0)} üíñ\n"
        f"üîπ –ß–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {user.get('completed_challenges', 0)} üèÜ\n"
        f"üîπ –ü—Ä–∏–≤—ã—á–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {habits_progress} ‚úÖ\n"
        f"üîπ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.get('referral_count', 0)} üë•\n\n"
        "<b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π:</b>\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
    stats = await get_user_stats(user_id, 5)
    if stats:
        profile_msg += (
            f"- –ß–µ–ª–ª–µ–Ω–¥–∂–µ–π: {stats['challenges_completed']}\n"
            f"- –ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: {stats['diary_entries']}\n"
            f"- –ü—Ä–∏–≤—ã—á–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['habits_completed']}\n"
            f"- –°–µ—Ä–¥–µ—á–µ–∫ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['hearts_earned']}\n\n"
        )
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons = [
        [InlineKeyboardButton(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="premium_subscription")],
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–¥–µ—á–µ–∫", callback_data="shop")],
        [InlineKeyboardButton(text="üèÜ –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂", callback_data="get_challenge")],
        [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology_menu")],
        [InlineKeyboardButton(text="üíû –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")]
    ]
    
    await message.answer(
        profile_msg,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    await show_user_profile(message.from_user.id, message)

@router.message(Command("psychology"))
async def cmd_psychology(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    await message.answer(
        f"üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª, {name}</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "üí¨ –ß–∞—Ç —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º - –æ–±—Å—É–¥–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞\n"
        "üìî –õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ - –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏—Ö\n"
        "üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ - –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏\n"
        "üìÖ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é - –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üéØ –¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏ - —Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏\n"
        "üíû –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_psychology_menu_keyboard(),
        parse_mode="HTML"
    )

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user = await get_user(message.from_user.id)
    if not user or not user.get('is_admin'):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await get_user(callback.from_user.id)
        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        name = user.get('name', '–¥—Ä—É–≥')
        days_left = (user['trial_started_at'] + timedelta(days=TRIAL_DAYS) - datetime.utcnow()).days if user.get('trial_started_at') else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_msg = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {name}\n\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: {'–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥' if not user.get('is_premium') else '–ü—Ä–µ–º–∏—É–º'}\n"
            f"üîπ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {max(0, days_left)}\n"
            f"üîπ –°–µ—Ä–¥–µ—á–µ–∫: {user.get('hearts', 0)}\n"
            f"üîπ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user.get('total_requests', 0)}/{TRIAL_DAILY_LIMIT}\n"
            f"üîπ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.get('referral_count', 0)}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å–µ—Ä–¥–µ—á–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π!"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
            [InlineKeyboardButton(text="üíû –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral_system")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(profile_msg, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

<<<<<<< HEAD

@router.callback_query(F.data == "list_promotions")
async def list_promotions(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    promotions_list = await get_promotions()

    if not promotions_list:
        await callback.message.edit_text(
            "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é", callback_data="create_promotion")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_promotions")]
            ])
        )
    else:
        text = "üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏:</b>\n\n"
        buttons = []

        for promo in promotions_list:
            end_date = promo['end_date'].strftime("%d.%m.%Y")
            reward = f"{promo['hearts_reward']}üíñ" if promo[
                                                         'reward_type'] == "hearts" else f"{promo['discount_percent']}% —Å–∫–∏–¥–∫–∞"

            text += (
                f"<b>{promo['title']}</b>\n"
                f"üî† –ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo['promo_code']}</code>\n"
                f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward}\n"
                f"üìÖ –î–æ: {end_date}\n\n"
            )

            buttons.append([
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {promo['promo_code']}",
                    callback_data=f"delete_promo_{promo['id']}"
                )
            ])

        buttons.append([
            InlineKeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_promotion"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_promotions")
        ])

=======
@router.callback_query(F.data == "list_promotions")
async def list_promotions(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        return
    
    promotions_list = await get_promotions()
    
    if not promotions_list:
        await callback.message.answer("üéÅ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π")
    else:
        text = "üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏:</b>\n\n"
        buttons = []
        
        for promo in promotions_list:
            end_date = promo['end_date'].strftime("%d.%m.%Y")
            text += f"‚Ä¢ {promo['title']} (–¥–æ {end_date})\n–ü—Ä–æ–º–æ–∫–æ–¥: {promo['promo_code']}\n\n"
            buttons.append([
                InlineKeyboardButton(
                    text=f"–£–¥–∞–ª–∏—Ç—å {promo['promo_code']}",
                    callback_data=f"delete_promo_{promo['id']}"
                )
            ])
        
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_promotions")])
        
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
            parse_mode="HTML"
        )
    await callback.answer()

<<<<<<< HEAD

@router.callback_query(F.data.startswith("delete_promo_"))
async def delete_promotion(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏"""
    promo_id = int(callback.data.replace("delete_promo_", ""))
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        async with async_session() as session:
            await session.execute(
                text("DELETE FROM promotions WHERE id = :id"),
                {"id": promo_id}
            )
            await session.commit()

        await callback.answer("‚úÖ –ê–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
        await list_promotions(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

=======
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
@router.callback_query(F.data == "psychology_menu")
async def psychology_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    await callback.message.edit_text(
        f"üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª, {name}</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_psychology_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(callback.from_user.id, callback.message)
    await callback.answer()

@router.callback_query(F.data == "ai_psychologist")
async def ai_psychologist(callback: CallbackQuery):
    """–ß–∞—Ç —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    await callback.message.edit_text(
        f"üí¨ <b>–ß–∞—Ç —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º, {name}</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –∑–¥–µ—Å—å —Å–≤–æ–∏ –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. "
        "–ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥ –Ω–∞ –±–∞–∑–µ GPT-4o –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ.\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.</i>\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ò–ò –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞. "
        "–í —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "personal_diary")
async def personal_diary(callback: CallbackQuery):
    """–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    await callback.message.edit_text(
        f"üìî <b>–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫, {name}</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. "
        "–í—Å–µ –∑–∞–ø–∏—Å–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –∑–∞—â–∏—â–µ–Ω—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_diary_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "new_diary_entry")
async def new_diary_entry(callback: CallbackQuery):
    """–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    await callback.message.edit_text(
        f"‚úçÔ∏è <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ, {name}</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "<i>–°–µ–≥–æ–¥–Ω—è –±—ã–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å! –Ø –∑–∞–∫–æ–Ω—á–∏–ª –≤–∞–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. üòä</i>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ—Ü–∏–∏: üòä üò¢ üò† üòç üòê üò® üò≠ ü§î",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "my_diary_entries")
async def my_diary_entries(callback: CallbackQuery):
    """–ú–æ–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    entries = await get_diary_entries(user['telegram_id'])
    if not entries:
        await callback.message.edit_text(
            "üìñ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_diary_keyboard(),
            parse_mode="HTML"
        )
    else:
        text = "üìñ <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        for entry in entries[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
            date = entry['created_at'].strftime("%d.%m.%Y %H:%M")
            mood = entry.get('mood', '')
            text += f"üìÖ <b>{date}</b> {mood}\n{entry['entry_text'][:100]}...\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_diary_keyboard(),
            parse_mode="HTML"
        )
    await callback.answer()

@router.callback_query(F.data == "set_diary_password")
async def set_diary_password(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    await callback.message.edit_text(
        f"üîê <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫, {name}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–µ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞. –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.</i>",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "meditations")
async def meditations_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –º–µ–¥–∏—Ç–∞—Ü–∏–π"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    meditations_list = await get_meditations()
    if not meditations_list:
        await callback.message.edit_text(
            "üßò‚Äç‚ôÄÔ∏è <b>–ú–µ–¥–∏—Ç–∞—Ü–∏–∏</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_psychology_menu_keyboard(),
            parse_mode="HTML"
        )
    else:
        text = "üßò‚Äç‚ôÄÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n"
        for meditation in meditations_list:
            text += f"‚Ä¢ {meditation['title']} ({meditation['duration']} –º–∏–Ω.) - {meditation['hearts_reward']}üíñ\n"
        
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        buttons = []
        for meditation in meditations_list:
            buttons.append([InlineKeyboardButton(
                text=f"{meditation['title']} ({meditation['duration']} –º–∏–Ω.)",
                callback_data=f"view_meditation_{meditation['id']}"
            )])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
            parse_mode="HTML"
        )
    await callback.answer()

@router.callback_query(F.data.startswith("view_meditation_"))
async def view_meditation(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    meditation_id = int(callback.data.replace("view_meditation_", ""))
    meditation = None
    meditations_list = await get_meditations()
    
    for m in meditations_list:
        if m['id'] == meditation_id:
            meditation = m
            break
    
    if not meditation:
        await callback.answer("–ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await callback.message.edit_text(
        f"üßò‚Äç‚ôÄÔ∏è <b>{meditation['title']}</b>\n\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {meditation['duration']} –º–∏–Ω—É—Ç\n"
        f"üíñ –ù–∞–≥—Ä–∞–¥–∞: {meditation['hearts_reward']} —Å–µ—Ä–¥–µ—á–µ–∫\n\n"
        f"{meditation['description']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_meditation_keyboard(meditation_id),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("start_meditation_"))
async def start_meditation(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    meditation_id = int(callback.data.replace("start_meditation_", ""))
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    meditation = None
    meditations_list = await get_meditations()
    
    for m in meditations_list:
        if m['id'] == meditation_id:
            meditation = m
            break
    
    if not meditation:
        await callback.answer("–ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if user.get('hearts', 0) < meditation['hearts_reward']:
        await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–¥–µ—á–µ–∫. –ù—É–∂–Ω–æ: {meditation['hearts_reward']}")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –º–µ–¥–∏—Ç–∞—Ü–∏—é
    await callback.message.edit_text(
        f"üßò‚Äç‚ôÄÔ∏è <b>–ù–∞—á–∞–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏: {meditation['title']}</b>\n\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {meditation['duration']} –º–∏–Ω—É—Ç\n"
        "–°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ, –∑–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–º –¥—ã—Ö–∞–Ω–∏–∏...\n\n"
        "–Ø –±—É–¥—É –≤–µ—Å—Ç–∏ –≤–∞—Å —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é", callback_data=f"complete_meditation_{meditation_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("complete_meditation_"))
async def complete_meditation(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    meditation_id = int(callback.data.replace("complete_meditation_", ""))
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    meditation = None
    meditations_list = await get_meditations()
    
    for m in meditations_list:
        if m['id'] == meditation_id:
            meditation = m
            break
    
    if not meditation:
        await callback.answer("–ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    new_hearts = user.get('hearts', 0) + meditation['hearts_reward']
    await update_user(
        user['telegram_id'],
        hearts=new_hearts
    )
    
    await callback.message.edit_text(
        f"üéâ <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏: {meditation['title']}\n\n"
        f"üíñ –ü–æ–ª—É—á–µ–Ω–æ: +{meditation['hearts_reward']} —Å–µ—Ä–¥–µ—á–µ–∫\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_hearts} —Å–µ—Ä–¥–µ—á–µ–∫",
        reply_markup=get_psychology_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "weekly_plan")
async def weekly_plan(callback: CallbackQuery):
    """–ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    plan = await get_weekly_plan(user['telegram_id'])
    
    if plan:
        await callback.message.edit_text(
            "üìÖ <b>–í–∞—à –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
            f"–¶–µ–ª–∏:\n{plan['goals']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data="edit_weekly_plan")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
            ]),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "üìÖ <b>–ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å?\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
            ]),
            parse_mode="HTML"
        )
    await callback.answer()

@router.errors()
async def errors_handler(event: ErrorEvent):  # –î–ª—è aiogram 3.x
    logger.error(f"–û—à–∏–±–∫–∞: {event.exception}")
    return True

@router.callback_query(F.data == "edit_weekly_plan")
async def edit_weekly_plan(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é, {name}</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é. –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∏—Ö –ø–æ –¥–Ω—è–º –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –æ–±—â–∏–µ –∑–∞–¥–∞—á–∏.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i>\n"
        "1. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å 10 –º–∏–Ω—É—Ç\n"
        "2. –ü—Ä–æ–π—Ç–∏ 3 —á–µ–ª–ª–µ–Ω–¥–∂–∞\n"
        "3. –ù–∞–ø–∏—Å–∞—Ç—å 5 –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "habits")
async def habits(callback: CallbackQuery):
    """–¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    await callback.message.edit_text(
        f"üéØ <b>–¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏, {name}</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –∏ —Ü–µ–ª—è–º–∏.\n\n"
        "1. <b>–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫</b> - –æ—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "2. <b>–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏</b> - —Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü –∏ –±–æ–ª–µ–µ\n"
        "3. <b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", callback_data="new_habit")],
            [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="habits_progress")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "referral_system")
async def referral_system(callback: CallbackQuery):
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    referrals_list = await get_user_referrals(callback.from_user.id)
    name = user.get('name', '–¥—Ä—É–≥')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    current_month = datetime.now().month
    current_year = datetime.now().year
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    monthly_referrals = [
        r for r in referrals_list 
        if r['created_at'].month == current_month and r['created_at'].year == current_year
    ]
    
    await callback.message.edit_text(
        f"üíû <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, {name}</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {len(referrals_list)}\n"
        f"üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {len(monthly_referrals)}/{MAX_REFERRALS_PER_MONTH}\n"
        f"üíñ –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–¥–µ—á–µ–∫: {user.get('hearts', 0)}\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"https://t.me/{(await bot.get_me()).username}?start={user['telegram_id']}\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {REFERRAL_REWARD} —Å–µ—Ä–¥–µ—á–µ–∫!\n"
        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {MAX_REFERRALS_PER_MONTH} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü.",
        reply_markup=get_referral_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# ... (–∫–æ–¥ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ psychology_menu)

@router.callback_query(F.data == "psychology_menu")
async def psychology_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    await callback.message.edit_text(
        f"üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª, {name}</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "üí¨ <b>–ß–∞—Ç —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º</b> - –æ–±—Å—É–¥–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º\n"
        "üìî <b>–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫</b> - –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏—Ö (–ø–æ–ª—É—á–∞–π—Ç–µ 5üíñ –∑–∞ –∑–∞–ø–∏—Å—å)\n"
        "üßò‚Äç‚ôÄÔ∏è <b>–ú–µ–¥–∏—Ç–∞—Ü–∏–∏</b> - –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ (–¥–æ 3 –≤ –¥–µ–Ω—å, 20üíñ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)\n"
        "üéØ <b>–¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏</b> - —Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n\n"
        "üíñ –ó–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–µ—Ä–¥–µ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ!",
        reply_markup=get_psychology_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# ... (–∫–æ–¥ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ habits)

@router.callback_query(F.data == "habits")
async def habits(callback: CallbackQuery):
    """–†–∞–∑–¥–µ–ª –ø—Ä–∏–≤—ã—á–µ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    user_habits = await get_user_habits(callback.from_user.id)
    
    habits_text = ""
    if user_habits:
        habits_text = "\n\n<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:</b>\n"
        for habit in user_habits[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–≤—ã—á–µ–∫
            status = "‚úÖ" if habit.get('completed') else "‚è≥"
            reminder = f"‚è∞ {habit['reminder_time']} ({habit['reminder_frequency']})" if habit.get('reminder_enabled') else ""
            habits_text += f"{status} {habit['title']} {reminder}\n"
    
    await callback.message.edit_text(
        f"üéØ <b>–¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏, {name}</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –∏ —Ü–µ–ª—è–º–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
        f"{habits_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", callback_data="new_habit")],
            [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="habits_progress")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "new_habit")
async def new_habit(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å.\n"
        "–ü—Ä–∏–º–µ—Ä: <i>–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞</i>",
        parse_mode="HTML"
    )
    await callback.answer()

<<<<<<< HEAD
class PromotionCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_promo_code = State()
    waiting_for_discount = State()
    waiting_for_hearts = State()
    waiting_for_end_date = State()
    waiting_for_reward_type = State()
    waiting_for_tasks = State()

=======
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
class HabitCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_time = State()

@router.callback_query(F.data == "create_habit")
async def start_habit_creation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(HabitCreation.waiting_for_title)
    await callback.message.edit_text("üß† –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏")
    await callback.answer()

@router.message(HabitCreation.waiting_for_title)
async def habit_title_handler(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(HabitCreation.waiting_for_description)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏.\n–ü—Ä–∏–º–µ—Ä: –í—ã–ø–æ–ª–Ω—è—Ç—å 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π –∏ 20 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ")

@router.message(HabitCreation.waiting_for_description)
async def habit_description_handler(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(HabitCreation.waiting_for_time)
    await message.answer("‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30)")

@router.message(HabitCreation.waiting_for_time)
async def habit_time_handler(message: Message, state: FSMContext):
    data = await state.update_data(time=message.text.strip())
    habit = await state.get_data()

    # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î —á–µ—Ä–µ–∑ save_habit(user_id, habit)
    await message.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n{habit['title']} ‚Äî {habit['description']} –≤ {habit['time']}")
    await state.clear()

@router.message(F.text & ~F.text.startswith('/'))
async def handle_habit_description(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user = await get_user(message.from_user.id)
    if not user or not user.get('temp_habit_title'):
        return
    
    habit_description = message.text.strip()
    if len(habit_description) < 5:
        await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await update_user(
        message.from_user.id,
        temp_habit_description=habit_description
    )
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await message.answer(
        "‚è∞ –•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="set_habit_reminder")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="create_habit_no_reminder")]
        ])
    )

@router.callback_query(F.data == "set_habit_reminder")
async def set_habit_reminder(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    await callback.message.edit_text(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=get_habit_frequency_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("habit_frequency_"))
async def set_habit_frequency(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    frequency = callback.data.replace("habit_frequency_", "")
    user = await get_user(callback.from_user.id)
    if not user or not user.get('temp_habit_title'):
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    if frequency == "none":
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await create_habit(
            user_id=callback.from_user.id,
            title=user['temp_habit_title'],
            description=user.get('temp_habit_description', ''),
            reminder_enabled=False
        )
        
        await callback.message.edit_text(
            "üéâ –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!",
            reply_markup=get_back_to_habits_keyboard()
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        await update_user(
            callback.from_user.id,
            temp_habit_frequency=frequency
        )
        
        await callback.message.edit_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):"
        )
    
    await callback.answer()

@router.message(F.text.regexp(r'^\d{2}:\d{2}$'))
async def handle_habit_reminder_time(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    user = await get_user(message.from_user.id)
    if not user or not user.get('temp_habit_title'):
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        hours, minutes = map(int, message.text.split(':'))
        if not (0 <= hours < 24 and 0 <= minutes < 60):
            raise ValueError
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        habit = await create_habit(
            user_id=message.from_user.id,
            title=user['temp_habit_title'],
            description=user.get('temp_habit_description', ''),
            reminder_enabled=True,
            reminder_time=message.text,
            reminder_frequency=user.get('temp_habit_frequency', 'daily')
        )
        
        if habit:
            await message.answer(
                f"üéâ –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤ {message.text} ({user.get('temp_habit_frequency', 'daily')})!",
                reply_markup=get_back_to_habits_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await update_user(
                message.from_user.id,
                temp_habit_title=None,
                temp_habit_description=None,
                temp_habit_frequency=None
            )
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")

@router.callback_query(F.data == "habits_progress")
async def habits_progress(callback: CallbackQuery):
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    habits = await get_user_habits(callback.from_user.id)
    if not habits:
        await callback.message.edit_text(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", callback_data="new_habit")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="habits")]
            ])
        )
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    completed = [h for h in habits if h.get('completed')]
    in_progress = [h for h in habits if not h.get('completed')]
    
    text = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º:</b>\n\n"
    text += f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {len(completed)}/{len(habits)}\n"
    
    if completed:
        text += "\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ:</b>\n"
        for habit in completed[:3]:
            date = habit['completed_at'].strftime("%d.%m") if habit.get('completed_at') else "??.??"
            text += f"- {habit['title']} ({date})\n"
    
    if in_progress:
        text += "\n<b>–í –ø—Ä–æ—Ü–µ—Å—Å–µ:</b>\n"
        for habit in in_progress[:5]:
            reminder = f"‚è∞ {habit['reminder_time']} ({habit['reminder_frequency']})" if habit.get('reminder_enabled') else ""
            text += f"- {habit['title']} {reminder}\n"
    
    text += "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="habits")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# ... (–∫–æ–¥ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ meditations_menu)

@router.callback_query(F.data == "meditations")
async def meditations_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –º–µ–¥–∏—Ç–∞—Ü–∏–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –ª–∏–º–∏—Ç–µ"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date()
    completed_today = 0
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è –º–µ–¥–∏—Ç–∞—Ü–∏–π
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    if user.get('last_meditation_date'):
        last_date = user['last_meditation_date'].date()
        if last_date == today:
            completed_today = user.get('meditations_today', 0)
    
    meditations_list = MEDITATIONS
    
    text = (
        f"üßò‚Äç‚ôÄÔ∏è <b>–ú–µ–¥–∏—Ç–∞—Ü–∏–∏</b>\n\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {completed_today}/3\n"
        "–ö–∞–∂–¥–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 10 –º–∏–Ω—É—Ç –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç 20üíñ –∑–∞ –ø–æ–ª–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n"
    )
    
    buttons = []
    for meditation in meditations_list:
        buttons.append([
            InlineKeyboardButton(
                text=f"{meditation['title']} ({meditation['duration']} –º–∏–Ω)",
                callback_data=f"view_meditation_{meditation['id']}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )
    await callback.answer()

# ... (–∫–æ–¥ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ set_diary_password)

@router.callback_query(F.data == "set_diary_password")
async def set_diary_password_handler(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await callback.message.edit_text(
        "üîê <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –¥–Ω–µ–≤–Ω–∏–∫</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_premium")
async def admin_activate_premium(callback: CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞:")
    await callback.answer()

<<<<<<< HEAD
    @router.message(F.from_user.id == callback.from_user.id)
    async def activate_premium(message: Message):
        username = message.text.strip()
        user = await get_user_by_username(username)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        if user:
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º–∞
            user.is_premium = True
            await save_user(user)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(user.telegram_id, "–í–∞–º –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å!")
            await callback.message.edit_text(f"–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {username}.")
        else:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")


=======
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
@router.callback_query(F.data == "admin_hearts")
async def admin_add_hearts(callback: CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ @username –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—á–µ–∫ (–ø—Ä–∏–º–µ—Ä: @user 100):")
    await callback.answer()

<<<<<<< HEAD
    @router.message(F.from_user.id == callback.from_user.id)
    async def add_hearts(message: Message):
        parts = message.text.strip().split()
        if len(parts) != 2:
            await callback.message.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: @user 100")
            return

        username, hearts = parts
        try:
            hearts = int(hearts)
        except ValueError:
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—á–µ–∫ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
            return

        user = await get_user_by_username(username)
        if user:
            user.hearts += hearts
            await save_user(user)
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(user.telegram_id, f"–í–∞–º –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {hearts} —Å–µ—Ä–¥–µ—á–µ–∫!")
            await callback.message.edit_text(f"{hearts} —Å–µ—Ä–¥–µ—á–µ–∫ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}.")
        else:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    async with async_session() as session:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(text("SELECT COUNT(*) FROM users"))
        total_users = result.scalar()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(
            text("SELECT COUNT(*) FROM users WHERE is_banned = FALSE AND (is_premium = TRUE OR trial_started_at IS NOT NULL)")
        )
        active_users = result.scalar()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        result = await session.execute(text("SELECT COUNT(*) FROM users WHERE completed_challenges > 0"))
        challenges_completed = result.scalar()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–¥–µ—á–µ–∫
        result = await session.execute(text("SELECT SUM(hearts) FROM users"))
        total_hearts = result.scalar() or 0

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
        result = await session.execute(text("SELECT COUNT(*) FROM diary_entries"))
        total_diary_entries = result.scalar()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        result = await session.execute(text("SELECT COUNT(*) FROM habit_completions"))
        total_habits_completed = result.scalar()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_message = (
            f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"üí¨ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {active_users}\n"
            f"üèÜ <b>–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π:</b> {challenges_completed}\n"
            f"üíñ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—á–µ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {total_hearts}\n"
            f"üìî <b>–ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ:</b> {total_diary_entries}\n"
            f"‚úÖ <b>–ü—Ä–∏–≤—ã—á–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {total_habits_completed}\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await callback.message.edit_text(stats_message, parse_mode="HTML")
        await callback.answer()

=======
@router.callback_query(F.data == "admin_stats")
async def admin_statistics(callback: CallbackQuery):
    await callback.message.edit_text("üìä –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞ ‚Äî –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É)")
    await callback.answer()
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6

@router.callback_query(F.data == "admin_user_messages")
async def admin_user_history(callback: CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ @username –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–ø—Ä–∏–º–µ—Ä: @user 7):")
    await callback.answer()

<<<<<<< HEAD
    @router.message(F.from_user.id == callback.from_user.id)
    async def get_user_history(message: Message):
        parts = message.text.strip().split()
        if len(parts) != 2:
            await callback.message.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: @user 7")
            return

        username, days = parts
        try:
            days = int(days)
        except ValueError:
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
            return

        user = await get_user_by_username(username)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        if user:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
            history = await get_user_message_history(user.telegram_id, days)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

            if history:
                history_text = "\n".join([f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {entry.timestamp}: {entry.text}" for entry in history])
                await callback.message.edit_text(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:\n{history_text}")
            else:
                await callback.message.edit_text(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.")
        else:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")

=======
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
@router.callback_query(F.data == "admin_reset_activity")
async def admin_reset_data(callback: CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ @username –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
    await callback.answer()

<<<<<<< HEAD
    @router.message(F.from_user.id == callback.from_user.id)
    async def reset_activity(message: Message):
        username = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_username(username)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ username

        if user:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.completed_challenges = 0  # –ü—Ä–∏–º–µ—Ä: —Å–±—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
            user.diary_entries = 0  # –ü—Ä–∏–º–µ—Ä: —Å–±—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
            user.completed_habits = 0  # –ü—Ä–∏–º–µ—Ä: —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
            await save_user(user)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–±—Ä–æ—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await bot.send_message(user.telegram_id, "–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await callback.message.edit_text(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")
        else:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")

=======
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
@router.callback_query(F.data == "admin_ban")
async def admin_ban_user(callback: CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:")
    await callback.answer()

<<<<<<< HEAD
    @router.message(F.from_user.id == callback.from_user.id)
    async def ban_user(message: Message):
        username = message.text.strip()
        user = await get_user_by_username(username)
        if user:
            user.is_banned = True
            await save_user(user)
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(user.telegram_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            await callback.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.callback_query(F.data == "admin_promotions")
async def admin_promotions_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏—è–º–∏"""
=======
@router.callback_query(F.data == "admin_promotions")
async def admin_promotions(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏"""
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
<<<<<<< HEAD

    await callback.message.edit_text(
        "üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "–ê–∫—Ü–∏–∏ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å:\n"
        "üíñ –ë–æ–Ω—É—Å–Ω—ã–µ —Å–µ—Ä–¥–µ—á–∫–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n"
        "üí≥ –°–∫–∏–¥–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é", callback_data="create_promotion")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π", callback_data="list_promotions")],
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]
        ]),
        parse_mode="HTML"
=======
    
    await callback.message.edit_text(
        "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏\n\n"
        "1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–∫—Ü–∏—é\n"
        "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ\n"
        "3. –£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é", callback_data="create_promotion")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π", callback_data="list_promotions")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ])
>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
    )
    await callback.answer()

@router.callback_query(F.data == "create_promotion")
<<<<<<< HEAD
async def create_promotion_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏"""
    try:
        user = await get_user(callback.from_user.id)
        if not user or not user.get('is_admin'):
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        await state.set_state(PromotionCreation.waiting_for_title)
        await callback.message.edit_text(
            "üéÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):",
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        @router.message(F.from_user.id == callback.from_user.id)
        async def promotion_name_input(message: Message):
            promotion_name = message.text.strip()

            if len(promotion_name) < 3:
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –∏–∑ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            promotion_data = {"name": promotion_name}
            await ask_for_description()
            return promotion_data

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        @router.message(F.from_user.id == callback.from_user.id)
        async def promotion_description_input(message: Message, promotion_data):
            promotion_description = message.text.strip()

            if len(promotion_description) < 5:
                await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –∏–∑ 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            promotion_data['description'] = promotion_description
            await ask_for_start_date()
            return promotion_data

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
        @router.message(F.from_user.id == callback.from_user.id)
        async def promotion_start_date_input(message: Message, promotion_data):
            try:
                start_date = datetime.strptime(message.text, "%Y-%m-%d")
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            promotion_data['start_date'] = start_date
            await ask_for_end_date()
            return promotion_data

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        @router.message(F.from_user.id == callback.from_user.id)
        async def promotion_end_date_input(message: Message, promotion_data):
            try:
                end_date = datetime.strptime(message.text, "%Y-%m-%d")
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            promotion_data['end_date'] = end_date
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await create_promotion_in_db(promotion_data)

        async def create_promotion_in_db(promotion_data):
            """–°–æ–∑–¥–∞–µ—Ç –∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
            async with async_session() as session:
                try:
                    await session.execute(
                        promotions.insert().values(
                            title=promotion_data['name'],
                            description=promotion_data['description'],
                            promo_code=f"PROMO{random.randint(1000, 9999)}",
                            discount_percent=0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ —Å–∫–∏–¥–∫–∏
                            hearts_reward=100,  # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–∞–µ–º 100 —Å–µ—Ä–¥–µ—á–µ–∫
                            start_date=promotion_data['start_date'],
                            end_date=promotion_data['end_date'],
                            created_at=datetime.utcnow()
                        )
                    )
                    await session.commit()
                    await callback.message.answer(f"–ê–∫—Ü–∏—è '{promotion_data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                except Exception as db_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_error}")
                    await session.rollback()
                    await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(PromotionCreation.waiting_for_title)
async def process_promotion_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ü–∏–∏"""
    if len(message.text.strip()) < 3:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(title=message.text.strip())
    await state.set_state(PromotionCreation.waiting_for_description)
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤):\n"
        "(–ß—Ç–æ –ø–æ–ª—É—á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É—Å–ª–æ–≤–∏—è –∏ —Ç.–¥.)"
    )


@router.message(PromotionCreation.waiting_for_description)
async def process_promotion_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ü–∏–∏"""
    if len(message.text.strip()) < 5:
        await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(description=message.text.strip())
    await state.set_state(PromotionCreation.waiting_for_reward_type)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíñ –ù–∞–≥—Ä–∞–¥–∞ —Å–µ—Ä–¥–µ—á–∫–∞–º–∏", callback_data="reward_hearts")],
        [InlineKeyboardButton(text="üí≥ –°–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="reward_discount")]
    ])

    await message.answer(
        "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:",
        reply_markup=keyboard
    )


@router.message(PromotionCreation.waiting_for_promo_code)
async def process_promo_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if not message.text.strip().isalnum():
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(promo_code=message.text.strip().upper())
    await state.set_state(PromotionCreation.waiting_for_reward_type)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíñ –ù–∞–≥—Ä–∞–¥–∞ —Å–µ—Ä–¥–µ—á–∫–∞–º–∏", callback_data="reward_hearts")],
        [InlineKeyboardButton(text="üí≥ –°–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="reward_discount")]
    ])

    await message.answer(
        "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("reward_"), PromotionCreation.waiting_for_reward_type)
async def process_reward_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã"""
    reward_type = "hearts" if callback.data == "reward_hearts" else "discount"
    await state.update_data(reward_type=reward_type)

    if reward_type == "hearts":
        await state.set_state(PromotionCreation.waiting_for_hearts)
        await callback.message.edit_text(
            "üíñ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–¥–µ—á–µ–∫ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50):"
        )
    else:
        await state.set_state(PromotionCreation.waiting_for_discount)
        await callback.message.edit_text(
            "üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15):"
        )
    await callback.answer()

@router.message(PromotionCreation.waiting_for_hearts)
async def process_hearts_reward(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –≤ —Å–µ—Ä–¥–µ—á–∫–∞—Ö"""
    try:
        hearts = int(message.text.strip())
        if hearts <= 0:
            raise ValueError
        await state.update_data(hearts_reward=hearts, discount_percent=0)
        await state.set_state(PromotionCreation.waiting_for_end_date)
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
            "–ü—Ä–∏–º–µ—Ä: 31.12.2023"
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ—Ä–¥–µ—á–µ–∫ (–±–æ–ª—å—à–µ 0):")

@router.message(PromotionCreation.waiting_for_discount)
async def process_discount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∏–¥–∫–∏"""
    try:
        discount = int(message.text.strip())
        if not 1 <= discount <= 100:
            raise ValueError
        await state.update_data(discount_percent=discount, hearts_reward=0)
        await state.set_state(PromotionCreation.waiting_for_end_date)
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
            "–ü—Ä–∏–º–µ—Ä: 31.12.2023"
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–æ—Ç 1 –¥–æ 100):")

@router.message(PromotionCreation.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        day, month, year = map(int, message.text.strip().split('.'))
        end_date = datetime(year, month, day)
        if end_date <= datetime.now():
            raise ValueError

        await state.update_data(end_date=end_date)
        await state.set_state(PromotionCreation.waiting_for_tasks)
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∞–∫—Ü–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
            "–ü—Ä–∏–º–µ—Ä: –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, –í—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è"
        )
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")


@router.message(PromotionCreation.waiting_for_tasks)
async def process_tasks(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ü–∏–∏"""
    tasks = None if message.text.strip().lower() == '–Ω–µ—Ç' else message.text.strip()
    data = await state.get_data()

    try:
        promo_code = f"PROMO{random.randint(1000, 9999)}"

        await create_promotion(
            title=data['title'],
            description=data['description'],
            promo_code=promo_code,
            discount_percent=data.get('discount_percent', 0),
            hearts_reward=data.get('hearts_reward', 0),
            start_date=datetime.now(),
            end_date=data['end_date'],
            tasks=tasks,
            reward_type=data['reward_type']
        )

        reward_text = ""
        if data['reward_type'] == "hearts":
            reward_text = f"üíñ –ù–∞–≥—Ä–∞–¥–∞: {data['hearts_reward']} —Å–µ—Ä–¥–µ—á–µ–∫"
        else:
            reward_text = f"üí≥ –°–∫–∏–¥–∫–∞: {data['discount_percent']}%"

        await message.answer(
            f"üéâ <b>–ê–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n"
            f"{reward_text}\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data['end_date'].strftime('%d.%m.%Y')}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–∫—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π", callback_data="list_promotions")],
                [InlineKeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_promotion")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_promotions")]
            ])
        )

    await state.clear()

=======
async def create_promotion_handler(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ü–∏–∏"""
    user = await get_user(callback.from_user.id)
    if not user or not user.get('is_admin'):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ü—Ä–æ–º–æ–∫–æ–¥|–°–∫–∏–¥–∫–∞%|–ù–∞–≥—Ä–∞–¥–∞ –≤ —Å–µ—Ä–¥–µ—á–∫–∞—Ö|–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ù–æ–≤–æ–≥–æ–¥–Ω—è—è –∞–∫—Ü–∏—è|–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ|NEWYEAR2023|15|50|31.12.2023"
    )
    await callback.answer()

>>>>>>> 18fbeedce0645dd9c3f916acc311418f9ed1f0d6
@router.message(F.text & ~F.text.startswith('/'))
async def handle_diary_password(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    user = await get_user(message.from_user.id)
    if not user:
        return
    
    password = message.text.strip()
    if len(password) < 6:
        await message.answer("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    try:
        async with async_session() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await session.execute(
                diary_entries.update()
                .where(diary_entries.c.user_id == message.from_user.id)
                .values(password=password)
            )
            await session.commit()
        
        await message.answer(
            "üîê –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞—â–∏—â–µ–Ω.",
            reply_markup=get_diary_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ... (–∫–æ–¥ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ create_diary_entry)

async def create_diary_entry(user_id: int, entry_text: str, mood: str = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        async with async_session() as session:
            await session.execute(
                diary_entries.insert().values(
                    user_id=user_id,
                    entry_text=entry_text,
                    mood=mood,
                    created_at=datetime.utcnow()
                )
            )
            await session.commit()
            
            # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
            user = await get_user(user_id)
            if user:
                new_hearts = user.get('hearts', 0) + 5  # 5 —Å–µ—Ä–¥–µ—á–µ–∫ –∑–∞ –∑–∞–ø–∏—Å—å
                await update_user(user_id, hearts=new_hearts)
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: {e}")
    
    return False

# ... (–∫–æ–¥ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ get_diary_entries)

async def get_diary_entries(user_id: int, period: str = "all") -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        async with async_session() as session:
            query = diary_entries.select().where(diary_entries.c.user_id == user_id)
            
            now = datetime.utcnow()
            if period == "today":
                today = now.date()
                query = query.where(diary_entries.c.created_at >= today)
            elif period == "week":
                week_ago = now - timedelta(days=7)
                query = query.where(diary_entries.c.created_at >= week_ago)
            elif period == "month":
                month_ago = now - timedelta(days=30)
                query = query.where(diary_entries.c.created_at >= month_ago)
            
            query = query.order_by(diary_entries.c.created_at.desc())
            
            result = await session.execute(query)
            return [dict(row) for row in result.mappings()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞: {e}")
        return []

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# --- –î–û–ë–ê–í–õ–ï–ù–û: weekly_plans —Ç–∞–±–ª–∏—Ü–∞ ---

weekly_plans = Table(
    "weekly_plans",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger),
    Column("goals", String(1000)),
    Column("created_at", DateTime, default=datetime.utcnow),
    Column("week_start", DateTime)
)


# --- –î–û–ë–ê–í–õ–ï–ù–û: weekly_plan —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def get_weekly_plan(user_id: int) -> Optional[Dict[str, Any]]:
    async with async_session() as session:
        result = await session.execute(
            text("SELECT * FROM weekly_plans WHERE user_id = :user_id ORDER BY week_start DESC LIMIT 1"),
            {"user_id": user_id}
        )
        row = result.mappings().first()
        return dict(row) if row else None

async def create_weekly_plan(user_id: int, goals: str):
    async with async_session() as session:
        today = datetime.utcnow()
        week_start = today - timedelta(days=today.weekday())
        await session.execute(
            weekly_plans.insert().values(
                user_id=user_id,
                goals=goals,
                week_start=week_start
            )
        )
        await session.commit()


# --- –î–û–ë–ê–í–õ–ï–ù–û: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_challenge_keyboard(challenge_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂", callback_data=f"start_{challenge_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_challenge_timer_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚è≥ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="complete_challenge")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_shop_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    buttons = []
    for item in SHOP_ITEMS:
        buttons.append([InlineKeyboardButton(text=item["title"], callback_data=f"shop_{item['id']}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subscription_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    buttons = [
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 299‚ÇΩ", callback_data="sub_1_month")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 749‚ÇΩ", callback_data="sub_3_months")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 1299‚ÇΩ", callback_data="sub_6_months")],
        [InlineKeyboardButton(text="1 –≥–æ–¥ - 2199‚ÇΩ", callback_data="sub_1_year")],
        [InlineKeyboardButton(text="üíñ –ö—É–ø–∏—Ç—å –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="buy_with_hearts")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_hearts_subscription_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ —Å–µ—Ä–¥–µ—á–∫–∏"""
    buttons = [
        [InlineKeyboardButton(text="1 –¥–µ–Ω—å - 50üíñ", callback_data="hearts_sub_1_day")],
        [InlineKeyboardButton(text="7 –¥–Ω–µ–π - 300üíñ", callback_data="hearts_sub_7_days")],
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 1000üíñ", callback_data="hearts_sub_1_month")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_method_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [InlineKeyboardButton(text="üí≥ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT)", callback_data="pay_crypto")],
        [InlineKeyboardButton(text="üü£ –ÆMoney", callback_data="pay_yoomoney")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞"""
    buttons = [
        [InlineKeyboardButton(text="üë§ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin_premium")],
        [InlineKeyboardButton(text="üíñ –ù–∞—á–∏—Å–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–∏", callback_data="admin_hearts")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üéÅ –ê–∫—Ü–∏–∏", callback_data="admin_promotions")],
        [InlineKeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="admin_user_messages")],
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="admin_reset_activity")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_shop_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω"""
    buttons = [
        [InlineKeyboardButton(text="üîô –í –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_shop")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_psychology_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    buttons = [
        [InlineKeyboardButton(text="üí¨ –ß–∞—Ç —Å –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º", callback_data="ai_psychologist")],
        [InlineKeyboardButton(text="üìî –õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫", callback_data="personal_diary")],
        [InlineKeyboardButton(text="üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏–∏", callback_data="meditations")],
        [InlineKeyboardButton(text="üìÖ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="weekly_plan")],
        [InlineKeyboardButton(text="üéØ –¶–µ–ª–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habits")],
        [InlineKeyboardButton(text="üíû –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_diary_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚úçÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="new_diary_entry")],
        [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_diary_entries")],
        [InlineKeyboardButton(text="üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="set_diary_password")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_meditation_keyboard(meditation_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
    buttons = [
        [InlineKeyboardButton(text="üßò‚Äç‚ôÄÔ∏è –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é (10üíñ)", callback_data=f"start_meditation_{meditation_id}")],
        [InlineKeyboardButton(text="üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"read_meditation_{meditation_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="meditations")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_referral_keyboard():

    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    buttons = [
        [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="get_referral_link")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="psychology_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def check_payments():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    while True:
        try:
            async with async_session() as session:
                result = await session.execute(
                    text("SELECT * FROM payments WHERE status = 'pending'")
                )
                payments = result.mappings().all()
                
                for payment in payments:
                    if payment['payment_method'] == 'crypto':
                        verified = await check_crypto_payment(
                            payment['transaction_id'],
                            payment['amount'],
                            'USDT'
                        )
                        if verified:
                            await session.execute(
                                text("UPDATE payments SET status = 'completed' WHERE id = :id"),
                                {"id": payment['id']}
                            )
                            await session.commit()
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_payments: {e}")
        
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await setup_db()
        user = await get_user(message.from_user.id)
        
        if not user:
            is_admin = message.from_user.id in ADMIN_IDS
            user = await create_user(
                telegram_id=message.from_user.id,
                full_name=message.from_user.full_name,
                username=message.from_user.username,
                is_admin=is_admin,
                ip_address=message.from_user.id  # –ß–∏—Å–ª–æ, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
            )
            
            if is_admin:
                await message.answer(
                    "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º")
                return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                "üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∞!\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:\n"
                "- –ê–Ω–∞–ª–∏–∑–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
                "- –ú–µ–¥–∏—Ç–∞—Ü–∏—è–º–∏ –∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–µ–π\n"
                "- –í–µ–¥–µ–Ω–∏–µ–º –¥–Ω–µ–≤–Ω–∏–∫–∞\n"
                "- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
                "üìå –õ–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                f"- –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {TRIAL_DAYS} –¥–Ω—è\n"
                f"- –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: {TRIAL_DAILY_LIMIT}\n"
                f"- –°–µ—Ä–¥–µ—á–µ–∫ –≤ –¥–µ–Ω—å: {HEARTS_PER_DAY}\n\n"
                "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:")
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –Ω–æ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not user.get('name'):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:")
            return
            
        await show_main_menu(message.from_user.id, message)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_main_menu(user_id: int, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    name = user.get('name', '–¥—Ä—É–≥')
    
    if user.get('is_admin'):
        # –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer(
            f"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {name}",
            reply_markup=get_admin_keyboard()
        )
    else:
        # –ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology_menu")],
            [InlineKeyboardButton(text="üíû –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")],
            [InlineKeyboardButton(text="üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="get_challenge")],
            [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
        ])
        
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )

async def check_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            now = datetime.now()
            async with async_session() as session:
                result = await session.execute(
                    text("SELECT * FROM reminders WHERE next_reminder <= :now AND is_active = TRUE"),
                    {"now": now}
                )
                reminders = result.mappings().all()
                
                for reminder in reminders:
                    habit = await get_habit(reminder['user_id'], reminder['habit_id'])
                    if habit:
                        await bot.send_message(
                            reminder['user_id'],
                            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {habit['title']}\n{habit['description']}"
                        )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    if reminder['frequency'] == "daily":
                        next_reminder = now + timedelta(days=1)
                    elif reminder['frequency'] == "weekly":
                        next_reminder = now + timedelta(weeks=1)
                    elif reminder['frequency'] == "monthly":
                        next_reminder = now + timedelta(days=30)
                    
                    await session.execute(
                        text("UPDATE reminders SET next_reminder = :next WHERE id = :id"),
                        {"next": next_reminder, "id": reminder['id']}
                    )
                    await session.commit()
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_reminders: {e}")
        
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    async def main():
        await setup_db()
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)

    asyncio.run(main())